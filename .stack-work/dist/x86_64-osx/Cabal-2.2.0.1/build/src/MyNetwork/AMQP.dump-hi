
==================== FINAL INTERFACE ====================
2019-09-26 17:12:17.092552 UTC

interface largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC:MyNetwork.AMQP 8044
  interface hash: cdc7c84028b3010159348bc12ceeac58
  ABI hash: f57d9d4330fea4d609b9e818625a384c
  export-list hash: 08e7024c51e0c250765ea3ee0f96da1b
  orphan hash: 01699a7409f63bdae7032575b1146013
  flag hash: 4535995d996d8f38bcfa0c8e28d2613e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyNetwork.AMQP.ackEnv
  MyNetwork.AMQP.ackMsg
  MyNetwork.AMQP.addConfirmationListener
  MyNetwork.AMQP.amqplain
  MyNetwork.AMQP.bindExchange
  MyNetwork.AMQP.bindExchange'
  MyNetwork.AMQP.bindQueue
  MyNetwork.AMQP.bindQueue'
  MyNetwork.AMQP.cancelConsumer
  MyNetwork.AMQP.confirmSelect
  MyNetwork.AMQP.consumeMsgs
  MyNetwork.AMQP.consumeMsgs'
  MyNetwork.AMQP.declareExchange
  MyNetwork.AMQP.declareQueue
  MyNetwork.AMQP.defaultConnectionOpts
  MyNetwork.AMQP.deleteExchange
  MyNetwork.AMQP.deleteQueue
  MyNetwork.AMQP.flow
  MyNetwork.AMQP.fromURI
  MyNetwork.AMQP.getMsg
  MyNetwork.AMQP.newExchange
  MyNetwork.AMQP.newMsg
  MyNetwork.AMQP.newQueue
  MyNetwork.AMQP.openConnection
  MyNetwork.AMQP.openConnection'
  MyNetwork.AMQP.plain
  MyNetwork.AMQP.publishMsg
  MyNetwork.AMQP.publishMsg'
  MyNetwork.AMQP.purgeQueue
  MyNetwork.AMQP.qos
  MyNetwork.AMQP.rabbitCRdemo
  MyNetwork.AMQP.recoverMsgs
  MyNetwork.AMQP.rejectEnv
  MyNetwork.AMQP.rejectMsg
  MyNetwork.AMQP.txCommit
  MyNetwork.AMQP.txRollback
  MyNetwork.AMQP.txSelect
  MyNetwork.AMQP.unbindExchange
  MyNetwork.AMQP.unbindExchange'
  MyNetwork.AMQP.unbindQueue
  MyNetwork.AMQP.unbindQueue'
  MyNetwork.AMQP.waitForConfirms
  MyNetwork.AMQP.waitForConfirmsUntil
  MyNetwork.AMQP.Internal.addChannelExceptionHandler
  MyNetwork.AMQP.Internal.addConnectionBlockedHandler
  MyNetwork.AMQP.Internal.addConnectionClosedHandler
  MyNetwork.AMQP.Internal.addReturnListener
  MyNetwork.AMQP.Internal.closeChannel
  MyNetwork.AMQP.Internal.closeConnection
  MyNetwork.AMQP.Internal.getServerProperties
  MyNetwork.AMQP.Internal.openChannel
  MyNetwork.AMQP.Internal.openConnection''
  MyNetwork.AMQP.Ack{MyNetwork.AMQP.Ack MyNetwork.AMQP.NoAck}
  MyNetwork.AMQP.ExchangeOpts{MyNetwork.AMQP.ExchangeOpts exchangeArguments exchangeAutoDelete exchangeDurable exchangeInternal exchangeName exchangePassive exchangeType}
  MyNetwork.AMQP.QueueOpts{MyNetwork.AMQP.QueueOpts queueAutoDelete queueDurable queueExclusive queueHeaders queueName queuePassive}
  MyNetwork.AMQP.Internal.AckType{MyNetwork.AMQP.Internal.BasicAck MyNetwork.AMQP.Internal.BasicNack}
  MyNetwork.AMQP.Internal.ChanThreadKilledException
  MyNetwork.AMQP.Internal.Channel
  MyNetwork.AMQP.Internal.Connection
  MyNetwork.AMQP.Internal.ConnectionOpts{MyNetwork.AMQP.Internal.ConnectionOpts coAuth coHeartbeatDelay coMaxChannel coMaxFrameSize coName coServers coTLSSettings coVHost}
  MyNetwork.AMQP.Internal.DeliveryMode{MyNetwork.AMQP.Internal.NonPersistent MyNetwork.AMQP.Internal.Persistent}
  MyNetwork.AMQP.Internal.Envelope{MyNetwork.AMQP.Internal.Envelope envChannel envDeliveryTag envExchangeName envRedelivered envRoutingKey}
  MyNetwork.AMQP.Internal.Message{MyNetwork.AMQP.Internal.Message msgApplicationID msgBody msgClusterID msgContentEncoding msgContentType msgCorrelationID msgDeliveryMode msgExpiration msgHeaders msgID msgPriority msgReplyTo msgTimestamp msgType msgUserID}
  MyNetwork.AMQP.Internal.PublishError{MyNetwork.AMQP.Internal.PublishError errExchange errReplyCode errRoutingKey}
  MyNetwork.AMQP.Internal.ReturnReplyCode{MyNetwork.AMQP.Internal.NoConsumers MyNetwork.AMQP.Internal.NotFound MyNetwork.AMQP.Internal.Unroutable}
  MyNetwork.AMQP.Internal.SASLMechanism{MyNetwork.AMQP.Internal.SASLMechanism saslChallengeFunc saslInitialResponse saslName}
  MyNetwork.AMQP.Internal.TLSSettings{MyNetwork.AMQP.Internal.TLSCustom MyNetwork.AMQP.Internal.TLSTrusted MyNetwork.AMQP.Internal.TLSUntrusted}
  MyNetwork.AMQP.Types.AMQPException{MyNetwork.AMQP.Types.AllChannelsAllocatedException MyNetwork.AMQP.Types.ChannelClosedException MyNetwork.AMQP.Types.ConnectionClosedException}
  MyNetwork.AMQP.Types.CloseType{MyNetwork.AMQP.Types.Abnormal MyNetwork.AMQP.Types.Normal}
  MyNetwork.AMQP.Types.ConfirmationResult{MyNetwork.AMQP.Types.Complete MyNetwork.AMQP.Types.Partial}
  MyNetwork.AMQP.Types.ConsumerTag
module dependencies: MyNetwork.AMQP.ChannelAllocator
                     MyNetwork.AMQP.Generated MyNetwork.AMQP.Helpers
                     MyNetwork.AMQP.Internal MyNetwork.AMQP.Protocol
                     MyNetwork.AMQP.Types MyNetwork2.Connection
                     MyNetwork2.Connection.Types
package dependencies: array-0.5.2.0 asn1-encoding-0.9.5
                      asn1-parse-0.9.4 asn1-types-0.3.2 async-2.2.1 base-4.11.1.0
                      basement-0.0.8 binary-0.8.5.1 bytestring-0.10.8.2 cereal-0.5.7.0
                      clock-0.7.2 containers-0.5.11.0 cryptonite-0.25
                      data-binary-ieee754-0.4.4 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 hourglass-0.2.12 integer-gmp-1.0.2.0
                      memory-0.14.18 mtl-2.2.2 network-2.6.3.6 network-uri-2.6.1.0
                      parsec-3.1.13.0 pem-0.2.4 primitive-0.6.3.0 process-1.6.3.0
                      socks-0.5.6 split-0.2.3.3 stm-2.4.5.1 text-1.2.3.1 time-1.8.0.2
                      tls-1.4.1 transformers-0.5.5.0 unix-2.7.2.2 vector-0.12.0.1
                      x509-1.7.4 x509-store-1.6.6 x509-system-1.6.6
                      x509-validation-1.6.10
orphans: network-2.6.3.6:Network.Socket
         stm-2.4.5.1:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base clock-0.7.2:System.Clock
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool
                         network-uri-2.6.1.0:Network.URI
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Concurrent.MVar ca4c584bd9db3afcc6677dea708f87d7
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.IO 6a65980161bb76863e5722eb33606919
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Read b9e6d20d40da8c8a12b566d22e1160e0
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Word bc9bdf9b61a0f9352e5a1baeee5690a5
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.ParserCombinators.ReadPrec d0ebf984ed486435a97481288b73febb
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  base-4.11.1.0:Text.Read.Lex f8ad6f9ae74ae325ba69a4fa5c82aaca
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Put 46413a3745068b8c82c5993962a4bce7
import  -/  bytestring-0.10.8.2:Data.ByteString 273248cbc494640ee3139e6d00588e9f
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  containers-0.5.11.0:Data.IntSet 2a2e516563abb136f0f0c2d3ef065529
import  -/  containers-0.5.11.0:Data.IntSet.Internal c967b4a43794bb3ae1eb622413871039
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  MyNetwork.AMQP.Generated 90da3e6fbc699ef42abc037524eddac1
  exports: d4f7fdf541b79210f3809a636b8d849c
  Basic_ack 023f225cc7f275094cb03aca5e0e6ff6
  Basic_cancel c767cc58443513cd221af70711e5038a
  Basic_cancel_ok 32b4c3662026d717b398d8aaec1fdd6a
  Basic_consume 1099b9949c113689bbf7c7307cde27b2
  Basic_get 74eda82bccba1e9ef8d2cfc4b7c5b83d
  Basic_get_ok 10e73919d837f4973417680b2a7bbb96
  Basic_publish 1c7dacb7e2522c684ea70f4abd11e7ca
  Basic_qos 8cf81e2f2edd7ef969341bf136c78f50
  Basic_qos_ok 96dfb3030cbc4f5a91c4508897eb83d9
  Basic_recover 8cfabcd48c68424dd85f1434453eb0f7
  Basic_recover_ok 3c03ceb5e9b70d9d3d8cff1a1318a967
  Basic_reject 4ebb967a63ce630bbfa835a4fcd9eda3
  CHBasic b92ce0d87ae58ae1b418b02ba0a256a6
  Channel_flow 1a9ad0bcf65a49213967a17b8d92266c
  Channel_flow_ok 168de3d92bb76e45fe8f315ad32b9128
  Confirm_select 89491c780f61bcfc9d76212ae0b72939
  Confirm_select_ok af69b7261eaef24c4c5c0f7217c35d3f
  Exchange_bind bed7e3d8e279cb0a133b31556915d652
  Exchange_bind_ok 80b65bcb3ab2ddd39877fc00d8a63d91
  Exchange_declare 51c1cc08ebc62ed938623bdb71059122
  Exchange_declare_ok 41c085d49c74fc44d3ccfc35c64ac517
  Exchange_delete fb02d8d8d42f80f12bd92ecff34dc145
  Exchange_delete_ok 8dbd39af89ccba0c999600e622541a25
  Exchange_unbind 3469997887ac05dd20d01595cfa008be
  Exchange_unbind_ok 7a981395bc56e076705c5ba0dcb22c21
  Queue_bind 7925b23911907e8d9a3ac0cba933f70e
  Queue_bind_ok 5051bf9171943f56371503ef6db97f28
  Queue_declare fe1b33e93334291b9ef9e59186f50bf9
  Queue_declare_ok e9823ded87de9ed86fcd24a31379511a
  Queue_delete 5f2d9305195e31904c8ed518dcf74168
  Queue_delete_ok 307cd5d08a725c618a9d2b3e89b365a6
  Queue_purge 73624a997371194a42f715f550b30b15
  Queue_purge_ok 8eb62cedf0571ac65b3fcb399fa3643f
  Queue_unbind bfbfb369bec0d58733013d990e118a7e
  Queue_unbind_ok 97c9bab40b914aceb891f32ad6b2b05c
  Tx_commit 10fd3e52b7a3aed6d270484cad624aa1
  Tx_commit_ok 6ef310c6fb8003b12c757295a4e9d803
  Tx_rollback 53626af0aef82cab961735d770fcfba6
  Tx_rollback_ok b2210c222a5e95c7255818597d29b324
  Tx_select 0674bac4434ded936ccbd8de72733656
  Tx_select_ok 7e1166a236954dfc80cf8f0b56e43572
import  -/  MyNetwork.AMQP.Helpers 043a0b653c74173dd57f4e43719a3330
  exports: 78161c7b323a61f393bba5255c5e718b
  toStrict a157d855f53c2b0ef64e73a86ed967f0
import  -/  MyNetwork.AMQP.Internal 0b8431299e0481cf499af36ef840bd59
  exports: d3ebd44eea6f30df90048a921319ab8b
  AckType 947a2b46e8b1df068558c545a9d1a410
  BasicAck d51a68057c0c308cc0a8021b695c9e92
  BasicNack 3802958cd345e3edb268d9608ec74572
  ChanThreadKilledException 3a90d0615f17322f97fa5a05c488ef99
  Channel 7d542ee1ef20270f61c1e8689122e18c
  Connection 7d542ee1ef20270f61c1e8689122e18c
  ConnectionOpts fd70183ce51bab024829b1d383d2ef92
  ConnectionOpts 12baaf6b27b7fdceeb98fb2f41dc1af3
  ContentMethod eec6c34614fa261f003c97508ef1404d
  DeliveryMode dbe7c5f34461c7b48b8bf4d91f1f4910
  Envelope 124485c306d58468c43585014ebd9208
  Envelope 7d542ee1ef20270f61c1e8689122e18c
  Message 07a18962660b90154f8cad30b7dbd766
  Message 526afa0333c4fb39d6fd1fa459b2940d
  NoConsumers ba4896613e0a48b2e7cbcaf4b4f1572c
  NonPersistent 930aedb01d4d3f3572eb0ef57ca748c2
  NotFound 1371b91cebccf6bbe81b7f50e0ee2818
  Persistent 6ae728df560f5c98b6d1030a289b09fd
  PublishError 2a9ab11b0bae25f865cd29800b0b8cf6
  PublishError ede5ac3eb2f1fe804d63f0d00f2c19c6
  ReturnReplyCode f7bde183c07509c93d41e860d14c0460
  SASLMechanism 9eb28d67ff7f9289fbf2d645ac207a61
  SASLMechanism ea50a7f6887dca2cbe54fe9a12b6bd34
  SimpleMethod 389d3da2f87c2cf87e9f9ba8fe037ce0
  TLSCustom 9b70895b9b295c8c450da6074cd83765
  TLSSettings 09164f3ec2dd9b975c6cb3a39557e784
  TLSTrusted 2f5574ea40f0b016a7d538d81b892eb4
  TLSUntrusted 0e03ae4afebef584ad8931ba59ac436b
  Unroutable fe21430c4dea07b8dd24a7d5edbf53e8
  ackedSet 7d542ee1ef20270f61c1e8689122e18c
  addChannelExceptionHandler 26c99ca917d4c4d0e94c70b957066631
  addConnectionBlockedHandler bf427847b16ec848a2628d6118693c15
  addConnectionClosedHandler f24840a9bdf7076f43221416955b4b7b
  addReturnListener 1d7a31106fec3a3650e9a5d3da677b65
  closeChannel 4190d77e7341452ce29bdb590d1938d1
  closeConnection 738d900c1a033d0f30f6f64287eeb107
  coAuth 12baaf6b27b7fdceeb98fb2f41dc1af3
  coHeartbeatDelay 12baaf6b27b7fdceeb98fb2f41dc1af3
  coMaxChannel 12baaf6b27b7fdceeb98fb2f41dc1af3
  coMaxFrameSize 12baaf6b27b7fdceeb98fb2f41dc1af3
  coName 12baaf6b27b7fdceeb98fb2f41dc1af3
  coServers 12baaf6b27b7fdceeb98fb2f41dc1af3
  coTLSSettings 12baaf6b27b7fdceeb98fb2f41dc1af3
  coVHost 12baaf6b27b7fdceeb98fb2f41dc1af3
  confirmListeners 7d542ee1ef20270f61c1e8689122e18c
  consumers 7d542ee1ef20270f61c1e8689122e18c
  deliveryModeToInt 40a3b1a9966e88b15ad37f1d3da63c69
  envChannel 7d542ee1ef20270f61c1e8689122e18c
  envDeliveryTag 7d542ee1ef20270f61c1e8689122e18c
  envExchangeName 7d542ee1ef20270f61c1e8689122e18c
  envRedelivered 7d542ee1ef20270f61c1e8689122e18c
  envRoutingKey 7d542ee1ef20270f61c1e8689122e18c
  errExchange ede5ac3eb2f1fe804d63f0d00f2c19c6
  errReplyCode ede5ac3eb2f1fe804d63f0d00f2c19c6
  errRoutingKey ede5ac3eb2f1fe804d63f0d00f2c19c6
  getServerProperties 85a61530a5888feeb7622bba440bf3e7
  lastConsumerTag 7d542ee1ef20270f61c1e8689122e18c
  msgApplicationID 526afa0333c4fb39d6fd1fa459b2940d
  msgBody 526afa0333c4fb39d6fd1fa459b2940d
  msgClusterID 526afa0333c4fb39d6fd1fa459b2940d
  msgContentEncoding 526afa0333c4fb39d6fd1fa459b2940d
  msgContentType 526afa0333c4fb39d6fd1fa459b2940d
  msgCorrelationID 526afa0333c4fb39d6fd1fa459b2940d
  msgDeliveryMode 526afa0333c4fb39d6fd1fa459b2940d
  msgExpiration 526afa0333c4fb39d6fd1fa459b2940d
  msgFromContentHeaderProperties b213da13c14fa7e25484c7ebf94a784b
  msgHeaders 526afa0333c4fb39d6fd1fa459b2940d
  msgID 526afa0333c4fb39d6fd1fa459b2940d
  msgPriority 526afa0333c4fb39d6fd1fa459b2940d
  msgReplyTo 526afa0333c4fb39d6fd1fa459b2940d
  msgTimestamp 526afa0333c4fb39d6fd1fa459b2940d
  msgType 526afa0333c4fb39d6fd1fa459b2940d
  msgUserID 526afa0333c4fb39d6fd1fa459b2940d
  nackedSet 7d542ee1ef20270f61c1e8689122e18c
  nextPublishSeqNum 7d542ee1ef20270f61c1e8689122e18c
  openChannel 380b7fae40b21f566be5183e66a528f8
  openConnection'' 32f8d1d8dc43429e17cf7589ee39c6ac
  request 8c77295ce8baea0fd58e4b6689f2d626
  saslChallengeFunc ea50a7f6887dca2cbe54fe9a12b6bd34
  saslInitialResponse ea50a7f6887dca2cbe54fe9a12b6bd34
  saslName ea50a7f6887dca2cbe54fe9a12b6bd34
  unconfirmedSet 7d542ee1ef20270f61c1e8689122e18c
  waitForAllConfirms a2be679af31b96869ffcdc0fb5408e4c
  writeAssembly 4f3d2b9c99766b42a762a6f4386fd7fb
import  -/  MyNetwork.AMQP.Types b8f148f2de1f7b1663f31cc0624f4831
  exports: 79710897a339f37e0aa0cd0013badcb8
  AMQPException 4e3e663e4d9b79b9c4b960dd52fd612c
  Abnormal 52d78a2fb9c6a4549d46072434348ee9
  AllChannelsAllocatedException f1b3a84ae0207139b07a3cce9ba04e21
  ChannelClosedException 087b16d8c9197e316ddf48c43d2f582a
  CloseType aa6a03fa60860e76928efb63e27e0f5b
  Complete 00b0a343c35e3f50b83a210b8d1cfb94
  ConfirmationResult f4d3a18c700ab8b31645d417c7e08348
  ConnectionClosedException 0c390f321908c5e180b0d6308ad415d5
  ConsumerTag 5cb78a23bfa6f324df665b5ead71beda
  FVString 47e40e228425db6f9cefd88dafd3375e
  FieldTable 7e0d9c0b51c0ccc4f1cf4b5e7ef54b86
  FieldTable e2dab219ac237204a5b8f05eb2c223b2
  LongLongInt 763ed05ff03a034b2d61b6cd62071d38
  Normal 9d8f94c624deb82b532d520596a4fe8d
  Partial 4a3e6ccbb8841dde1ee7e489d0040348
  ShortString 2dedbb560fb43245b7b7cb66bc88dc76
import  -/  network-2.6.3.6:Network b2d886de20c575a44d4fc25c74e0fc87
import  -/  network-2.6.3.6:Network.Socket.Types 49e70a5740de467f1a9c2675afd92abb
import  -/  network-uri-2.6.1.0:Network.URI 6f1d442925b80040aaad90ad424bac29
import  -/  split-0.2.3.3:Data.List.Split 5324097c17aea95e263e86195d8f4cf4
import  -/  split-0.2.3.3:Data.List.Split.Internals 5b68cd2231dc71aa99e1db1b43dd9a13
import  -/  stm-2.4.5.1:Control.Concurrent.STM 0dd34c54515ec28f37ab6d6104eb0e05
import  -/  stm-2.4.5.1:Control.Concurrent.STM.TVar 17f0d58b753eebd51af9c5bea2cff66f
import  -/  text-1.2.3.1:Data.Text e8581f8e8ebc78d94a3747f354f0ee37
import  -/  text-1.2.3.1:Data.Text.Encoding 4f307d162133b7e1268d26d0f05f94d5
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fEqAck :: GHC.Classes.Eq MyNetwork.AMQP.Ack
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Ack
                  MyNetwork.AMQP.$fEqAck_$c==
                  MyNetwork.AMQP.$fEqAck_$c/= -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fEqAck_$c/= ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Ack) (y :: MyNetwork.AMQP.Ack) ->
                 case x of wild {
                   MyNetwork.AMQP.Ack
                   -> case y of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.False
                        MyNetwork.AMQP.NoAck -> GHC.Types.True }
                   MyNetwork.AMQP.NoAck
                   -> case y of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.True
                        MyNetwork.AMQP.NoAck -> GHC.Types.False } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fEqAck_$c== ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds4 :: MyNetwork.AMQP.Ack) (ds5 :: MyNetwork.AMQP.Ack) ->
                 case ds4 of wild {
                   MyNetwork.AMQP.Ack
                   -> case ds5 of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.True
                        MyNetwork.AMQP.NoAck -> GHC.Types.False }
                   MyNetwork.AMQP.NoAck
                   -> case ds5 of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.False
                        MyNetwork.AMQP.NoAck -> GHC.Types.True } }) -}
e664c797b038da82f9abd4781da7b4a5
  $fEqExchangeOpts :: GHC.Classes.Eq MyNetwork.AMQP.ExchangeOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.ExchangeOpts
                  MyNetwork.AMQP.$fEqExchangeOpts_$c==
                  MyNetwork.AMQP.$fEqExchangeOpts_$c/= -}
e664c797b038da82f9abd4781da7b4a5
  $fEqExchangeOpts_$c/= ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.ExchangeOpts)
                   (y :: MyNetwork.AMQP.ExchangeOpts) ->
                 case MyNetwork.AMQP.$fEqExchangeOpts_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e664c797b038da82f9abd4781da7b4a5
  $fEqExchangeOpts_$c== ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))>,
     Unfolding: (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts)
                   (ds5 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts a1 a2 a3 a4 a5 a6 a7 ->
                 case ds5 of wild1 { MyNetwork.AMQP.ExchangeOpts b1 b2 b3 b4 b5 b6 b7 ->
                 case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt2 dt5 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds6 ds7 ->
                      case GHC.Prim.narrow32Int# ds7 of wild4 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case a2 of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                           case b2 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                           case GHC.Prim.==# dt9 dt12 of lwild1 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt7
                                       (GHC.Prim.int2Word# dt8)
                                       dt10
                                       (GHC.Prim.int2Word# dt11)
                                       (GHC.Prim.int2Word# dt9)
                                       GHC.Prim.realWorld# of wild8 { (#,#) ds8 ds9 ->
                                case GHC.Prim.narrow32Int# ds9 of wild9 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> let {
                                       $j :: GHC.Types.Bool <join 0>
                                       = let {
                                           $j1 :: GHC.Types.Bool <join 0>
                                           = let {
                                               $j2 :: GHC.Types.Bool <join 0>
                                               = case a6 of wild10 {
                                                   GHC.Types.False
                                                   -> case b6 of wild11 {
                                                        GHC.Types.False
                                                        -> MyNetwork.AMQP.Types.$fEqFieldTable_$c==
                                                             a7
                                                             b7
                                                        GHC.Types.True -> GHC.Types.False }
                                                   GHC.Types.True
                                                   -> case b6 of wild11 {
                                                        GHC.Types.False -> GHC.Types.False
                                                        GHC.Types.True
                                                        -> MyNetwork.AMQP.Types.$fEqFieldTable_$c==
                                                             a7
                                                             b7 } }
                                             } in
                                             case a5 of wild10 {
                                               GHC.Types.False
                                               -> case b5 of wild11 {
                                                    GHC.Types.False -> $j2
                                                    GHC.Types.True -> GHC.Types.False }
                                               GHC.Types.True
                                               -> case b5 of wild11 {
                                                    GHC.Types.False -> GHC.Types.False
                                                    GHC.Types.True -> $j2 } }
                                         } in
                                         case a4 of wild10 {
                                           GHC.Types.False
                                           -> case b4 of wild11 {
                                                GHC.Types.False -> $j1
                                                GHC.Types.True -> GHC.Types.False }
                                           GHC.Types.True
                                           -> case b4 of wild11 {
                                                GHC.Types.False -> GHC.Types.False
                                                GHC.Types.True -> $j1 } }
                                     } in
                                     case a3 of wild10 {
                                       GHC.Types.False
                                       -> case b3 of wild11 {
                                            GHC.Types.False -> $j
                                            GHC.Types.True -> GHC.Types.False }
                                       GHC.Types.True
                                       -> case b3 of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> $j } } } } } } } } } } } } } }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fEqQueueOpts :: GHC.Classes.Eq MyNetwork.AMQP.QueueOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.QueueOpts
                  MyNetwork.AMQP.$fEqQueueOpts_$c==
                  MyNetwork.AMQP.$fEqQueueOpts_$c/= -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fEqQueueOpts_$c/= ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))><S(S(LLS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.QueueOpts)
                   (y :: MyNetwork.AMQP.QueueOpts) ->
                 case MyNetwork.AMQP.$fEqQueueOpts_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fEqQueueOpts_$c== ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))><S(S(LLS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(U))>,
     Unfolding: (\ (ds4 :: MyNetwork.AMQP.QueueOpts)
                   (ds5 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts a1 a2 a3 a4 a5 a6 ->
                 case ds5 of wild1 { MyNetwork.AMQP.QueueOpts b1 b2 b3 b4 b5 b6 ->
                 case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt2 dt5 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds6 ds7 ->
                      case GHC.Prim.narrow32Int# ds7 of wild4 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = let {
                                     $j2 :: GHC.Types.Bool <join 0>
                                     = case a5 of wild6 {
                                         GHC.Types.False
                                         -> case b5 of wild7 {
                                              GHC.Types.False
                                              -> MyNetwork.AMQP.Types.$fEqFieldTable_$c== a6 b6
                                              GHC.Types.True -> GHC.Types.False }
                                         GHC.Types.True
                                         -> case b5 of wild7 {
                                              GHC.Types.False -> GHC.Types.False
                                              GHC.Types.True
                                              -> MyNetwork.AMQP.Types.$fEqFieldTable_$c== a6 b6 } }
                                   } in
                                   case a4 of wild6 {
                                     GHC.Types.False
                                     -> case b4 of wild7 {
                                          GHC.Types.False -> $j2 GHC.Types.True -> GHC.Types.False }
                                     GHC.Types.True
                                     -> case b4 of wild7 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True -> $j2 } }
                               } in
                               case a3 of wild6 {
                                 GHC.Types.False
                                 -> case b3 of wild7 {
                                      GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.False }
                                 GHC.Types.True
                                 -> case b3 of wild7 {
                                      GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } }
                           } in
                           case a2 of wild6 {
                             GHC.Types.False
                             -> case b2 of wild7 {
                                  GHC.Types.False -> $j GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True
                             -> case b2 of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j } } } } } } } } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck :: GHC.Classes.Ord MyNetwork.AMQP.Ack
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Ack
                  MyNetwork.AMQP.$fEqAck
                  MyNetwork.AMQP.$fOrdAck_$ccompare
                  MyNetwork.AMQP.$fOrdAck_$c<
                  MyNetwork.AMQP.$fOrdAck_$c<=
                  MyNetwork.AMQP.$fOrdAck_$c>
                  MyNetwork.AMQP.$fOrdAck_$c>=
                  MyNetwork.AMQP.$fOrdAck_$cmax
                  MyNetwork.AMQP.$fOrdAck_$cmin -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$c< ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Ack) (b :: MyNetwork.AMQP.Ack) ->
                 case a of wild {
                   MyNetwork.AMQP.Ack
                   -> case b of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.False
                        MyNetwork.AMQP.NoAck -> GHC.Types.True }
                   MyNetwork.AMQP.NoAck
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$c<= ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Ack) (b :: MyNetwork.AMQP.Ack) ->
                 case b of wild {
                   MyNetwork.AMQP.Ack
                   -> case a of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.True
                        MyNetwork.AMQP.NoAck -> GHC.Types.False }
                   MyNetwork.AMQP.NoAck
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$c> ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Ack) (b :: MyNetwork.AMQP.Ack) ->
                 MyNetwork.AMQP.$fOrdAck_$c< b a) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$c>= ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Ack) (b :: MyNetwork.AMQP.Ack) ->
                 case a of wild {
                   MyNetwork.AMQP.Ack
                   -> case b of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.True
                        MyNetwork.AMQP.NoAck -> GHC.Types.False }
                   MyNetwork.AMQP.NoAck
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$ccompare ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Ack) (b :: MyNetwork.AMQP.Ack) ->
                 case a of wild {
                   MyNetwork.AMQP.Ack
                   -> case b of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.EQ
                        MyNetwork.AMQP.NoAck -> GHC.Types.LT }
                   MyNetwork.AMQP.NoAck
                   -> case b of wild1 {
                        MyNetwork.AMQP.Ack -> GHC.Types.GT
                        MyNetwork.AMQP.NoAck -> GHC.Types.EQ } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$cmax ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Ack) (y :: MyNetwork.AMQP.Ack) ->
                 case y of wild {
                   MyNetwork.AMQP.Ack -> x
                   MyNetwork.AMQP.NoAck
                   -> case x of wild1 { DEFAULT -> MyNetwork.AMQP.NoAck } }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fOrdAck_$cmin ::
    MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack -> MyNetwork.AMQP.Ack
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Ack) (y :: MyNetwork.AMQP.Ack) ->
                 case y of wild {
                   MyNetwork.AMQP.Ack
                   -> case x of wild1 { DEFAULT -> MyNetwork.AMQP.Ack }
                   MyNetwork.AMQP.NoAck -> x }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts :: GHC.Classes.Ord MyNetwork.AMQP.ExchangeOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.ExchangeOpts
                  MyNetwork.AMQP.$fEqExchangeOpts
                  MyNetwork.AMQP.$fOrdExchangeOpts_$ccompare
                  MyNetwork.AMQP.$fOrdExchangeOpts_$c<
                  MyNetwork.AMQP.$fOrdExchangeOpts_$c<=
                  MyNetwork.AMQP.$fOrdExchangeOpts_$c>
                  MyNetwork.AMQP.$fOrdExchangeOpts_$c>=
                  MyNetwork.AMQP.$fOrdExchangeOpts_$cmax
                  MyNetwork.AMQP.$fOrdExchangeOpts_$cmin -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$c< ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: (\ (a :: MyNetwork.AMQP.ExchangeOpts)
                   (b :: MyNetwork.AMQP.ExchangeOpts) ->
                 case a of wild { MyNetwork.AMQP.ExchangeOpts a1 a2 a3 a4 a5 a6 a7 ->
                 case b of wild1 { MyNetwork.AMQP.ExchangeOpts b1 b2 b3 b4 b5 b6 b7 ->
                 case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case a2 of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                      case b2 of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                      case Data.Text.$w$ccompare ww12 ww13 ww14 ww16 ww17 ww18 of wild3 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = let {
                                     $j2 :: GHC.Types.Bool <join 0>
                                     = case a6 of wild4 {
                                         GHC.Types.False
                                         -> case b6 of wild5 {
                                              GHC.Types.False
                                              -> MyNetwork.AMQP.Types.$fOrdFieldTable_$c< a7 b7
                                              GHC.Types.True -> GHC.Types.True }
                                         GHC.Types.True
                                         -> case b6 of wild5 {
                                              GHC.Types.False -> GHC.Types.False
                                              GHC.Types.True
                                              -> MyNetwork.AMQP.Types.$fOrdFieldTable_$c< a7 b7 } }
                                   } in
                                   case a5 of wild4 {
                                     GHC.Types.False
                                     -> case b5 of wild5 {
                                          GHC.Types.False -> $j2 GHC.Types.True -> GHC.Types.True }
                                     GHC.Types.True
                                     -> case b5 of wild5 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True -> $j2 } }
                               } in
                               case a4 of wild4 {
                                 GHC.Types.False
                                 -> case b4 of wild5 {
                                      GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.True }
                                 GHC.Types.True
                                 -> case b4 of wild5 {
                                      GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } }
                           } in
                           case a3 of wild4 {
                             GHC.Types.False
                             -> case b3 of wild5 {
                                  GHC.Types.False -> $j GHC.Types.True -> GHC.Types.True }
                             GHC.Types.True
                             -> case b3 of wild5 {
                                  GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j } }
                        GHC.Types.GT -> GHC.Types.False } } }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$c<= ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.ExchangeOpts)
                   (b :: MyNetwork.AMQP.ExchangeOpts) ->
                 case MyNetwork.AMQP.$fOrdExchangeOpts_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$c> ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.ExchangeOpts)
                   (b :: MyNetwork.AMQP.ExchangeOpts) ->
                 MyNetwork.AMQP.$fOrdExchangeOpts_$c< b a) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$c>= ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.ExchangeOpts)
                   (b :: MyNetwork.AMQP.ExchangeOpts) ->
                 case MyNetwork.AMQP.$fOrdExchangeOpts_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$ccompare ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: (\ (a :: MyNetwork.AMQP.ExchangeOpts)
                   (b :: MyNetwork.AMQP.ExchangeOpts) ->
                 case a of wild { MyNetwork.AMQP.ExchangeOpts a1 a2 a3 a4 a5 a6 a7 ->
                 case b of wild1 { MyNetwork.AMQP.ExchangeOpts b1 b2 b3 b4 b5 b6 b7 ->
                 case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case a2 of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                      case b2 of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                      case Data.Text.$w$ccompare ww12 ww13 ww14 ww16 ww17 ww18 of wild3 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> let {
                             $j :: GHC.Types.Ordering <join 0>
                             = let {
                                 $j1 :: GHC.Types.Ordering <join 0>
                                 = let {
                                     $j2 :: GHC.Types.Ordering <join 0>
                                     = case a6 of wild4 {
                                         GHC.Types.False
                                         -> case b6 of wild5 {
                                              GHC.Types.False
                                              -> MyNetwork.AMQP.Types.$fOrdFieldTable_$ccompare
                                                   a7
                                                   b7
                                              GHC.Types.True -> GHC.Types.LT }
                                         GHC.Types.True
                                         -> case b6 of wild5 {
                                              GHC.Types.False -> GHC.Types.GT
                                              GHC.Types.True
                                              -> MyNetwork.AMQP.Types.$fOrdFieldTable_$ccompare
                                                   a7
                                                   b7 } }
                                   } in
                                   case a5 of wild4 {
                                     GHC.Types.False
                                     -> case b5 of wild5 {
                                          GHC.Types.False -> $j2 GHC.Types.True -> GHC.Types.LT }
                                     GHC.Types.True
                                     -> case b5 of wild5 {
                                          GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j2 } }
                               } in
                               case a4 of wild4 {
                                 GHC.Types.False
                                 -> case b4 of wild5 {
                                      GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.LT }
                                 GHC.Types.True
                                 -> case b4 of wild5 {
                                      GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j1 } }
                           } in
                           case a3 of wild4 {
                             GHC.Types.False
                             -> case b3 of wild5 {
                                  GHC.Types.False -> $j GHC.Types.True -> GHC.Types.LT }
                             GHC.Types.True
                             -> case b3 of wild5 {
                                  GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j } }
                        GHC.Types.GT -> GHC.Types.GT } } }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$cmax ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> MyNetwork.AMQP.ExchangeOpts
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U,U,U,U,U(U))><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U,U,U,U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.ExchangeOpts)
                   (y :: MyNetwork.AMQP.ExchangeOpts) ->
                 case MyNetwork.AMQP.$fOrdExchangeOpts_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
e664c797b038da82f9abd4781da7b4a5
  $fOrdExchangeOpts_$cmin ::
    MyNetwork.AMQP.ExchangeOpts
    -> MyNetwork.AMQP.ExchangeOpts -> MyNetwork.AMQP.ExchangeOpts
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U,U,U,U,U(U))><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U,U,U,U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.ExchangeOpts)
                   (y :: MyNetwork.AMQP.ExchangeOpts) ->
                 case MyNetwork.AMQP.$fOrdExchangeOpts_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts :: GHC.Classes.Ord MyNetwork.AMQP.QueueOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.QueueOpts
                  MyNetwork.AMQP.$fEqQueueOpts
                  MyNetwork.AMQP.$fOrdQueueOpts_$ccompare
                  MyNetwork.AMQP.$fOrdQueueOpts_$c<
                  MyNetwork.AMQP.$fOrdQueueOpts_$c<=
                  MyNetwork.AMQP.$fOrdQueueOpts_$c>
                  MyNetwork.AMQP.$fOrdQueueOpts_$c>=
                  MyNetwork.AMQP.$fOrdQueueOpts_$cmax
                  MyNetwork.AMQP.$fOrdQueueOpts_$cmin -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$c< ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: (\ (a :: MyNetwork.AMQP.QueueOpts)
                   (b :: MyNetwork.AMQP.QueueOpts) ->
                 case a of wild { MyNetwork.AMQP.QueueOpts a1 a2 a3 a4 a5 a6 ->
                 case b of wild1 { MyNetwork.AMQP.QueueOpts b1 b2 b3 b4 b5 b6 ->
                 case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> let {
                        $j :: GHC.Types.Bool <join 0>
                        = let {
                            $j1 :: GHC.Types.Bool <join 0>
                            = let {
                                $j2 :: GHC.Types.Bool <join 0>
                                = case a5 of wild3 {
                                    GHC.Types.False
                                    -> case b5 of wild4 {
                                         GHC.Types.False
                                         -> MyNetwork.AMQP.Types.$fOrdFieldTable_$c< a6 b6
                                         GHC.Types.True -> GHC.Types.True }
                                    GHC.Types.True
                                    -> case b5 of wild4 {
                                         GHC.Types.False -> GHC.Types.False
                                         GHC.Types.True
                                         -> MyNetwork.AMQP.Types.$fOrdFieldTable_$c< a6 b6 } }
                              } in
                              case a4 of wild3 {
                                GHC.Types.False
                                -> case b4 of wild4 {
                                     GHC.Types.False -> $j2 GHC.Types.True -> GHC.Types.True }
                                GHC.Types.True
                                -> case b4 of wild4 {
                                     GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j2 } }
                          } in
                          case a3 of wild3 {
                            GHC.Types.False
                            -> case b3 of wild4 {
                                 GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.True }
                            GHC.Types.True
                            -> case b3 of wild4 {
                                 GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } }
                      } in
                      case a2 of wild3 {
                        GHC.Types.False
                        -> case b2 of wild4 {
                             GHC.Types.False -> $j GHC.Types.True -> GHC.Types.True }
                        GHC.Types.True
                        -> case b2 of wild4 {
                             GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j } }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$c<= ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.QueueOpts)
                   (b :: MyNetwork.AMQP.QueueOpts) ->
                 case MyNetwork.AMQP.$fOrdQueueOpts_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$c> ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.QueueOpts)
                   (b :: MyNetwork.AMQP.QueueOpts) ->
                 MyNetwork.AMQP.$fOrdQueueOpts_$c< b a) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$c>= ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.QueueOpts)
                   (b :: MyNetwork.AMQP.QueueOpts) ->
                 case MyNetwork.AMQP.$fOrdQueueOpts_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$ccompare ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))><S(S(SSS)LLLLL),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U(1*U))>,
     Unfolding: (\ (a :: MyNetwork.AMQP.QueueOpts)
                   (b :: MyNetwork.AMQP.QueueOpts) ->
                 case a of wild { MyNetwork.AMQP.QueueOpts a1 a2 a3 a4 a5 a6 ->
                 case b of wild1 { MyNetwork.AMQP.QueueOpts b1 b2 b3 b4 b5 b6 ->
                 case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> let {
                        $j :: GHC.Types.Ordering <join 0>
                        = let {
                            $j1 :: GHC.Types.Ordering <join 0>
                            = let {
                                $j2 :: GHC.Types.Ordering <join 0>
                                = case a5 of wild3 {
                                    GHC.Types.False
                                    -> case b5 of wild4 {
                                         GHC.Types.False
                                         -> MyNetwork.AMQP.Types.$fOrdFieldTable_$ccompare a6 b6
                                         GHC.Types.True -> GHC.Types.LT }
                                    GHC.Types.True
                                    -> case b5 of wild4 {
                                         GHC.Types.False -> GHC.Types.GT
                                         GHC.Types.True
                                         -> MyNetwork.AMQP.Types.$fOrdFieldTable_$ccompare a6 b6 } }
                              } in
                              case a4 of wild3 {
                                GHC.Types.False
                                -> case b4 of wild4 {
                                     GHC.Types.False -> $j2 GHC.Types.True -> GHC.Types.LT }
                                GHC.Types.True
                                -> case b4 of wild4 {
                                     GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j2 } }
                          } in
                          case a3 of wild3 {
                            GHC.Types.False
                            -> case b3 of wild4 {
                                 GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.LT }
                            GHC.Types.True
                            -> case b3 of wild4 {
                                 GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j1 } }
                      } in
                      case a2 of wild3 {
                        GHC.Types.False
                        -> case b2 of wild4 {
                             GHC.Types.False -> $j GHC.Types.True -> GHC.Types.LT }
                        GHC.Types.True
                        -> case b2 of wild4 {
                             GHC.Types.False -> GHC.Types.GT GHC.Types.True -> $j } }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$cmax ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> MyNetwork.AMQP.QueueOpts
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),U(U(U,U,U),U,U,U,U,U(U))><S(S(SSS)LLLLL),U(U(U,U,U),U,U,U,U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.QueueOpts)
                   (y :: MyNetwork.AMQP.QueueOpts) ->
                 case MyNetwork.AMQP.$fOrdQueueOpts_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fOrdQueueOpts_$cmin ::
    MyNetwork.AMQP.QueueOpts
    -> MyNetwork.AMQP.QueueOpts -> MyNetwork.AMQP.QueueOpts
  {- Arity: 2,
     Strictness: <S(S(SSS)LLLLL),U(U(U,U,U),U,U,U,U,U(U))><S(S(SSS)LLLLL),U(U(U,U,U),U,U,U,U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.QueueOpts)
                   (y :: MyNetwork.AMQP.QueueOpts) ->
                 case MyNetwork.AMQP.$fOrdQueueOpts_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck :: GHC.Read.Read MyNetwork.AMQP.Ack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Ack
                  MyNetwork.AMQP.$fReadAck_$creadsPrec
                  MyNetwork.AMQP.$fReadAck_$creadList
                  MyNetwork.AMQP.$fReadAck1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Ack>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MyNetwork.AMQP.Ack>_R))
                  MyNetwork.AMQP.$fReadAck_$creadListPrec -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Ack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Ack
                   MyNetwork.AMQP.$fReadAck2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <MyNetwork.AMQP.Ack>_R))) -}
62f3d7456767f55a06e8c056edd355f6
  $fReadAck10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.$fReadAck11) -}
4c94c620c86213624f05e37b7596d39f
  $fReadAck11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ack"#) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck12 :: Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Ack]
  {- Unfolding: ((MyNetwork.AMQP.$fReadAck_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Ack]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MyNetwork.AMQP.Ack]>_R)
                   @ [MyNetwork.AMQP.Ack]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Ack])) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP MyNetwork.AMQP.Ack
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ MyNetwork.AMQP.Ack
                   MyNetwork.AMQP.$fReadAck_sps
                   eta) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck3 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)
                   MyNetwork.AMQP.$fReadAck4
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck4 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)
  {- Strictness: m,
     Unfolding: ((MyNetwork.AMQP.$fReadAck6,
                  MyNetwork.AMQP.$fReadAck5
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Ack>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MyNetwork.AMQP.Ack>_R)))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Ack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MyNetwork.AMQP.Ack -> Text.ParserCombinators.ReadP.P b) ->
                 k MyNetwork.AMQP.NoAck) -}
1390ed6feb0579de4cd4f166a8e2cfe4
  $fReadAck6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.$fReadAck7) -}
cd9ed9750b830bf3700522b5baa1bc2c
  $fReadAck7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoAck"#) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)
  {- Strictness: m,
     Unfolding: ((MyNetwork.AMQP.$fReadAck10,
                  MyNetwork.AMQP.$fReadAck9
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Ack>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MyNetwork.AMQP.Ack>_R)))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Ack -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MyNetwork.AMQP.Ack -> Text.ParserCombinators.ReadP.P b) ->
                 k MyNetwork.AMQP.Ack) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MyNetwork.AMQP.Ack]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Ack]
                   MyNetwork.AMQP.$fReadAck12) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MyNetwork.AMQP.Ack]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Ack
                   MyNetwork.AMQP.$fReadAck1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Ack>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <MyNetwork.AMQP.Ack>_R))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MyNetwork.AMQP.Ack
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n1 :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Ack
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Ack
                      MyNetwork.AMQP.$fReadAck2
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <MyNetwork.AMQP.Ack>_R))
                      n1
                      @ MyNetwork.AMQP.Ack
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Ack))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fReadAck_sps ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MyNetwork.AMQP.Ack)
                   MyNetwork.AMQP.$fReadAck8
                   MyNetwork.AMQP.$fReadAck3) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts :: GHC.Read.Read MyNetwork.AMQP.ExchangeOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.ExchangeOpts
                  MyNetwork.AMQP.$fReadExchangeOpts_$creadsPrec
                  MyNetwork.AMQP.$fReadExchangeOpts_$creadList
                  MyNetwork.AMQP.$fReadExchangeOpts1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.ExchangeOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                               <MyNetwork.AMQP.ExchangeOpts>_R))
                  MyNetwork.AMQP.$fReadExchangeOpts_$creadListPrec -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.ExchangeOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.ExchangeOpts
                   MyNetwork.AMQP.$fReadExchangeOpts2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.ExchangeOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                <MyNetwork.AMQP.ExchangeOpts>_R))) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.ExchangeOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.ExchangeOpts
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.$w$creadPrec ww1 @ b w1 }) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts3 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.ExchangeOpts]
  {- Unfolding: ((MyNetwork.AMQP.$fReadExchangeOpts_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.ExchangeOpts]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.ExchangeOpts]>_R)
                   @ [MyNetwork.AMQP.ExchangeOpts]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.ExchangeOpts])) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MyNetwork.AMQP.ExchangeOpts]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.ExchangeOpts]
                   MyNetwork.AMQP.$fReadExchangeOpts3) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.ExchangeOpts]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.ExchangeOpts
                   MyNetwork.AMQP.$fReadExchangeOpts1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.ExchangeOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                <MyNetwork.AMQP.ExchangeOpts>_R))) -}
e664c797b038da82f9abd4781da7b4a5
  $fReadExchangeOpts_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n1 :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.ExchangeOpts
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.ExchangeOpts
                      MyNetwork.AMQP.$fReadExchangeOpts2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.ExchangeOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                   <MyNetwork.AMQP.ExchangeOpts>_R))
                      n1
                      @ MyNetwork.AMQP.ExchangeOpts
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.ExchangeOpts))) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts :: GHC.Read.Read MyNetwork.AMQP.QueueOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.QueueOpts
                  MyNetwork.AMQP.$fReadQueueOpts_$creadsPrec
                  MyNetwork.AMQP.$fReadQueueOpts_$creadList
                  MyNetwork.AMQP.$fReadQueueOpts1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.QueueOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                            <MyNetwork.AMQP.QueueOpts>_R))
                  MyNetwork.AMQP.$fReadQueueOpts_$creadListPrec -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.QueueOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.QueueOpts
                   MyNetwork.AMQP.$fReadQueueOpts2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.QueueOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <MyNetwork.AMQP.QueueOpts>_R))) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.QueueOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.QueueOpts
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.$w$creadPrec1 ww1 @ b w1 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts3 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.QueueOpts]
  {- Unfolding: ((MyNetwork.AMQP.$fReadQueueOpts_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.QueueOpts]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.QueueOpts]>_R)
                   @ [MyNetwork.AMQP.QueueOpts]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.QueueOpts])) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MyNetwork.AMQP.QueueOpts]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.QueueOpts]
                   MyNetwork.AMQP.$fReadQueueOpts3) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MyNetwork.AMQP.QueueOpts]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.QueueOpts
                   MyNetwork.AMQP.$fReadQueueOpts1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.QueueOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                             <MyNetwork.AMQP.QueueOpts>_R))) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fReadQueueOpts_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MyNetwork.AMQP.QueueOpts
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n1 :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.QueueOpts
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.QueueOpts
                      MyNetwork.AMQP.$fReadQueueOpts2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.QueueOpts>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                <MyNetwork.AMQP.QueueOpts>_R))
                      n1
                      @ MyNetwork.AMQP.QueueOpts
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.QueueOpts))) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fShowAck :: GHC.Show.Show MyNetwork.AMQP.Ack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Ack
                  MyNetwork.AMQP.$fShowAck_$cshowsPrec
                  MyNetwork.AMQP.$fShowAck_$cshow
                  MyNetwork.AMQP.$fShowAck_$cshowList -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fShowAck1 :: MyNetwork.AMQP.Ack -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds4 :: MyNetwork.AMQP.Ack) (eta :: GHC.Base.String) ->
                 case ds4 of wild {
                   MyNetwork.AMQP.Ack
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n1 :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n1
                           MyNetwork.AMQP.$fReadAck10)
                        eta
                   MyNetwork.AMQP.NoAck
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n1 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n1 MyNetwork.AMQP.$fReadAck6)
                        eta }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fShowAck_$cshow :: MyNetwork.AMQP.Ack -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Ack) ->
                 case x of wild {
                   MyNetwork.AMQP.Ack -> MyNetwork.AMQP.$fReadAck10
                   MyNetwork.AMQP.NoAck -> MyNetwork.AMQP.$fReadAck6 }) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fShowAck_$cshowList :: [MyNetwork.AMQP.Ack] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Ack]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Ack
                   MyNetwork.AMQP.$fShowAck1
                   ls
                   s) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  $fShowAck_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Ack -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds4 :: GHC.Types.Int)
                   (ds5 :: MyNetwork.AMQP.Ack)
                   (eta :: GHC.Base.String) ->
                 case ds5 of wild {
                   MyNetwork.AMQP.Ack
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n1 :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n1
                           MyNetwork.AMQP.$fReadAck10)
                        eta
                   MyNetwork.AMQP.NoAck
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n1 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n1 MyNetwork.AMQP.$fReadAck6)
                        eta }) -}
e664c797b038da82f9abd4781da7b4a5
  $fShowExchangeOpts :: GHC.Show.Show MyNetwork.AMQP.ExchangeOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.ExchangeOpts
                  MyNetwork.AMQP.$fShowExchangeOpts_$cshowsPrec
                  MyNetwork.AMQP.$fShowExchangeOpts_$cshow
                  MyNetwork.AMQP.$fShowExchangeOpts_$cshowList -}
e664c797b038da82f9abd4781da7b4a5
  $fShowExchangeOpts1 ::
    MyNetwork.AMQP.ExchangeOpts -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U,U,U,U,1*U(1*U))>,
     Unfolding: (\ (w :: MyNetwork.AMQP.ExchangeOpts) ->
                 case w of ww { MyNetwork.AMQP.ExchangeOpts ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 MyNetwork.AMQP.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
d3efd153d78f553665af6984e701ac75
  $fShowExchangeOpts2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e664c797b038da82f9abd4781da7b4a5
  $fShowExchangeOpts_$cshow ::
    MyNetwork.AMQP.ExchangeOpts -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U,U,U,U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.ExchangeOpts) ->
                 MyNetwork.AMQP.$fShowExchangeOpts_$cshowsPrec
                   MyNetwork.AMQP.$fShowExchangeOpts2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e664c797b038da82f9abd4781da7b4a5
  $fShowExchangeOpts_$cshowList ::
    [MyNetwork.AMQP.ExchangeOpts] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.ExchangeOpts]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.ExchangeOpts
                   MyNetwork.AMQP.$fShowExchangeOpts1
                   ls
                   s) -}
e664c797b038da82f9abd4781da7b4a5
  $fShowExchangeOpts_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.ExchangeOpts -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),U,U,U,U,1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.ExchangeOpts ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 MyNetwork.AMQP.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fShowQueueOpts :: GHC.Show.Show MyNetwork.AMQP.QueueOpts
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.QueueOpts
                  MyNetwork.AMQP.$fShowQueueOpts_$cshowsPrec
                  MyNetwork.AMQP.$fShowQueueOpts_$cshow
                  MyNetwork.AMQP.$fShowQueueOpts_$cshowList -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fShowQueueOpts1 :: MyNetwork.AMQP.QueueOpts -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U,U,U,U,1*U(1*U))>,
     Unfolding: (\ (w :: MyNetwork.AMQP.QueueOpts) ->
                 case w of ww { MyNetwork.AMQP.QueueOpts ww1 ww2 ww3 ww4 ww5 ww6 ->
                 MyNetwork.AMQP.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fShowQueueOpts_$cshow ::
    MyNetwork.AMQP.QueueOpts -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U,U,U,U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.QueueOpts) ->
                 MyNetwork.AMQP.$fShowQueueOpts_$cshowsPrec
                   MyNetwork.AMQP.$fShowExchangeOpts2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fShowQueueOpts_$cshowList ::
    [MyNetwork.AMQP.QueueOpts] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.QueueOpts]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.QueueOpts
                   MyNetwork.AMQP.$fShowQueueOpts1
                   ls
                   s) -}
bef81cab6a7bd26b4e5d12948610ec4c
  $fShowQueueOpts_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.QueueOpts -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U,U,U,U,1*U(1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.QueueOpts) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.QueueOpts ww3 ww4 ww5 ww6 ww7 ww8 ->
                 MyNetwork.AMQP.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
fbcb71127e01895e5ac89f70afaed842
  $sdelete_$sgo13 ::
    MyNetwork.AMQP.Types.ConsumerTag
    -> Data.Map.Internal.Map MyNetwork.AMQP.Types.ConsumerTag a1
    -> Data.Map.Internal.Map MyNetwork.AMQP.Types.ConsumerTag a1
  {- Arity: 2, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a1
                   (w :: MyNetwork.AMQP.Types.ConsumerTag)
                   (w1 :: Data.Map.Internal.Map
                            MyNetwork.AMQP.Types.ConsumerTag a1) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 MyNetwork.AMQP.$w$sgo13 @ a1 ww1 ww2 ww3 w1 }) -}
803f96b0e0b23d410d1509127948956e
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds4 :: [(Data.Text.Internal.Text, a)]) ->
                 case ds4 of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds5 ds6
                   -> case ds5 of wild1 { (,) kx x ->
                      case ds6 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds7 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> MyNetwork.AMQP.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> MyNetwork.AMQP.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
a4627ac8460641e11e561cec68317653
  $sfromList1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7d15eea495c1345be2d301194bce7b78
  $tc'Ack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4431200046985188868##
                   7811476035921576907##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tc'Ack2
                   0#
                   MyNetwork.AMQP.$tc'Ack1) -}
bf7d742fa3caacf26b2dd1ae332bffa0
  $tc'Ack1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f5bc7146a1651d23f586bc302596f84b
  $tc'Ack2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tc'Ack3) -}
d16a2634b4511f8361b45e21bceeebf2
  $tc'Ack3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ack"#) -}
943d33267ea3255c07dbf3bfb701d284
  $tc'ExchangeOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3321691278413262259##
                   10689562298563871897##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tc'ExchangeOpts2
                   0#
                   MyNetwork.AMQP.$tc'ExchangeOpts1) -}
716f2f3c35f52022c3517868ffcd3634
  $tc'ExchangeOpts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ed88bf80ee44eaa298a4625cd5d4b22e
  $tc'ExchangeOpts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tc'ExchangeOpts3) -}
d21a7ba44bc9ceda43a3ccfa2f4b308f
  $tc'ExchangeOpts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExchangeOpts"#) -}
7284284f463cd2b71d3ae0aef7e87d41
  $tc'NoAck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9731926326043140809##
                   84623938846067408##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tc'NoAck1
                   0#
                   MyNetwork.AMQP.$tc'Ack1) -}
c0f9658fb7a65be41fbb6197bc9e6554
  $tc'NoAck1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tc'NoAck2) -}
256ce9bc54d9902896a9a6f345f720a8
  $tc'NoAck2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoAck"#) -}
497323c5ed4c1f09b82d16c6fa5c08e7
  $tc'QueueOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1227962435740972806##
                   16988786732713664320##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tc'QueueOpts2
                   0#
                   MyNetwork.AMQP.$tc'QueueOpts1) -}
a4dec7e4b0d4a22b8bf6e6000a1b5591
  $tc'QueueOpts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e6480e610234d746065cbe80415e8f67
  $tc'QueueOpts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tc'QueueOpts3) -}
85aaa36c3f5cb355fcad6f6a1091be08
  $tc'QueueOpts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueueOpts"#) -}
98b1e2062f72a961e8b1c45dd8fccc19
  $tcAck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7676355792237931033##
                   5629923984911564480##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tcAck1
                   0#
                   GHC.Types.krep$*) -}
12003b9a33125e78b83afb732d4b44be
  $tcAck1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$fReadAck11) -}
1080ffc615a4e707252f2cce2f00dd54
  $tcExchangeOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13704590612346268233##
                   1314676946577107575##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tcExchangeOpts1
                   0#
                   GHC.Types.krep$*) -}
c138011d6799b03137021b2e8d9b2b31
  $tcExchangeOpts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tcExchangeOpts2) -}
7f0aba62c2c0f8891b12f357e829288d
  $tcExchangeOpts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExchangeOpts"#) -}
2b18e9068c7040fb20e30045e40a487a
  $tcQueueOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   777092795060002120##
                   17596791097472889024##
                   MyNetwork.AMQP.$trModule
                   MyNetwork.AMQP.$tcQueueOpts1
                   0#
                   GHC.Types.krep$*) -}
c0f194fa2aabfdf1976da17710c9a017
  $tcQueueOpts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$tcQueueOpts2) -}
a4170b550c18b4e18aa0f57e44db96d6
  $tcQueueOpts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueueOpts"#) -}
074fc0eb6e6ba058d28c51454df0aa6d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyNetwork.AMQP.$trModule3
                   MyNetwork.AMQP.$trModule1) -}
bc77725aec37950c00834a738d13570f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$trModule2) -}
ae0a48d042bf07bf3c12589a2079b002
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyNetwork.AMQP"#) -}
831fc17c051f716d13aac8a2444a97d0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.$trModule4) -}
36ce05dbe1036ef1d00c1a94b64032fd
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC"#) -}
e664c797b038da82f9abd4781da7b4a5
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.ExchangeOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
bef81cab6a7bd26b4e5d12948610ec4c
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.QueueOpts -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
3a82a729d712da803c44b8862b04410e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,1*U(1*U)>,
     Inline: [0] -}
a98a6144d4715a915dd2ef2c94794e7c
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,1*U(1*U)>,
     Inline: [0] -}
9ce5f7b9165d4a30b651d1cb6ead948f
  $w$sgo1 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
ff9f8dd8ccef1e5bbc6d9aaaba693f60
  $w$sgo13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map MyNetwork.AMQP.Types.ConsumerTag a1
    -> Data.Map.Internal.Map MyNetwork.AMQP.Types.ConsumerTag a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
26a7051fc90c1a45f57faf847d2074d7
  $waddConfirmationListener ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      [(GHC.Word.Word64, GHC.Types.Bool, MyNetwork.AMQP.Internal.AckType)
       -> GHC.Types.IO ()]
    -> ((GHC.Word.Word64, GHC.Types.Bool,
         MyNetwork.AMQP.Internal.AckType)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            [(GHC.Word.Word64, GHC.Types.Bool, MyNetwork.AMQP.Internal.AckType)
                             -> GHC.Types.IO ()])
                   (w :: (GHC.Word.Word64, GHC.Types.Bool,
                          MyNetwork.AMQP.Internal.AckType)
                         -> GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w1 of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of ds5 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             ww
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ ((GHC.Word.Word64, GHC.Types.Bool,
                                          MyNetwork.AMQP.Internal.AckType)
                                         -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(GHC.Word.Word64, GHC.Types.Bool,
                                         MyNetwork.AMQP.Internal.AckType)
                                        -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                ww
                                s1 of ds6 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ [(GHC.Word.Word64, GHC.Types.Bool,
                                       MyNetwork.AMQP.Internal.AckType)
                                      -> GHC.Types.IO ()]
                                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    (# s,
                                       GHC.Types.:
                                         @ ((GHC.Word.Word64, GHC.Types.Bool,
                                             MyNetwork.AMQP.Internal.AckType)
                                            -> GHC.Types.IO ())
                                         w
                                         ipv3 #)))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ [(GHC.Word.Word64, GHC.Types.Bool,
                                            MyNetwork.AMQP.Internal.AckType)
                                           -> GHC.Types.IO ()]
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [(GHC.Word.Word64, GHC.Types.Bool,
                                       MyNetwork.AMQP.Internal.AckType)
                                      -> GHC.Types.IO ()]
                                   e1
                                   s2# })
                                ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                ww
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             ww
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ ((GHC.Word.Word64, GHC.Types.Bool,
                                          MyNetwork.AMQP.Internal.AckType)
                                         -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(GHC.Word.Word64, GHC.Types.Bool,
                                         MyNetwork.AMQP.Internal.AckType)
                                        -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(GHC.Word.Word64, GHC.Types.Bool,
                                    MyNetwork.AMQP.Internal.AckType)
                                   -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(GHC.Word.Word64, GHC.Types.Bool,
                                 MyNetwork.AMQP.Internal.AckType)
                                -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }) -}
940146836434ed5d15d2b140922b0ff5
  $wamqplain ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> (# Data.Text.Internal.Text, Data.ByteString.Internal.ByteString,
          GHC.Base.Maybe
            (Data.ByteString.Internal.ByteString
             -> GHC.Types.IO Data.ByteString.Internal.ByteString) #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text) ->
                 case MyNetwork.AMQP.amqplain5 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.ByteString.concat
                        (Data.ByteString.Lazy.toChunks_go
                           (Data.ByteString.Lazy.$wdrop'
                              4#
                              (Data.ByteString.Builder.toLazyByteString
                                 (case MyNetwork.AMQP.Types.$w$cput1
                                         (MyNetwork.AMQP.$sfromList
                                            @ MyNetwork.AMQP.Types.FieldValue
                                            (GHC.Types.:
                                               @ (Data.Text.Internal.Text,
                                                  MyNetwork.AMQP.Types.FieldValue)
                                               (MyNetwork.AMQP.amqplain3,
                                                MyNetwork.AMQP.Types.FVString w)
                                               (GHC.Types.:
                                                  @ (Data.Text.Internal.Text,
                                                     MyNetwork.AMQP.Types.FieldValue)
                                                  (MyNetwork.AMQP.amqplain1,
                                                   MyNetwork.AMQP.Types.FVString w1)
                                                  (GHC.Types.[]
                                                     @ (Data.Text.Internal.Text,
                                                        MyNetwork.AMQP.Types.FieldValue))))) of ww2 { (#,#) ww3 ww4 ->
                                  ww4 })))) of dt1 { Data.ByteString.Internal.PS ipv3 ipv4 ipv5 ipv6 ->
                 (# dt, dt1,
                    GHC.Base.Nothing
                      @ (Data.ByteString.Internal.ByteString
                         -> GHC.Types.IO Data.ByteString.Internal.ByteString) #) } }) -}
bfd4c5788b9419e34412707e612f7e6f
  $wconfirmSelect ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar
         (Data.Sequence.Internal.Seq
            (GHC.MVar.MVar MyNetwork.AMQP.Internal.Assembly))
    -> GHC.Word.Word16
    -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Types.Int
    -> MyNetwork.AMQP.Helpers.Lock
    -> GHC.MVar.MVar
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(A,1*U(U))><L,U(U)><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Internal.Connection)
                   (ww1 :: GHC.MVar.MVar
                             (Data.Sequence.Internal.Seq
                                (GHC.MVar.MVar MyNetwork.AMQP.Internal.Assembly)))
                   (ww2 :: GHC.Word.Word16)
                   (ww3 :: GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (ww4 :: MyNetwork.AMQP.Helpers.Lock)
                   (ww5 :: GHC.MVar.MVar
                             (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)))
                   (w :: GHC.Types.Bool)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w1 of ds4 { (#,#) ipv ipv1 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of wild {
                       GHC.Types.False
                       -> case MyNetwork.AMQP.Internal.closeChannel7
                                 (MyNetwork.AMQP.Internal.Channel
                                    ww
                                    MyNetwork.AMQP.confirmSelect21
                                    ww1
                                    ww2
                                    MyNetwork.AMQP.confirmSelect19
                                    (GHC.MVar.MVar @ GHC.Types.Int ww3)
                                    MyNetwork.AMQP.confirmSelect17
                                    MyNetwork.AMQP.confirmSelect17
                                    MyNetwork.AMQP.confirmSelect17
                                    ww4
                                    ww5
                                    MyNetwork.AMQP.confirmSelect15
                                    MyNetwork.AMQP.confirmSelect13
                                    MyNetwork.AMQP.confirmSelect11
                                    MyNetwork.AMQP.confirmSelect9)
                                 MyNetwork.AMQP.confirmSelect7
                                 w2 of ds5 { (#,#) ipv2 ipv3 ->
                          case ipv3 of wild1 {
                            MyNetwork.AMQP.Internal.SimpleMethod ds6
                            -> case ds6 of wild2 {
                                 DEFAULT -> MyNetwork.AMQP.$wfail3 ipv2
                                 MyNetwork.AMQP.Generated.Confirm_select_ok
                                 -> (# ipv2, GHC.Tuple.() #) }
                            MyNetwork.AMQP.Internal.ContentMethod ipv4 ipv5 ipv6
                            -> MyNetwork.AMQP.$wfail3 ipv2 } }
                       GHC.Types.True
                       -> MyNetwork.AMQP.Internal.writeAssembly1
                            (MyNetwork.AMQP.Internal.Channel
                               ww
                               MyNetwork.AMQP.confirmSelect21
                               ww1
                               ww2
                               MyNetwork.AMQP.confirmSelect19
                               (GHC.MVar.MVar @ GHC.Types.Int ww3)
                               MyNetwork.AMQP.confirmSelect17
                               MyNetwork.AMQP.confirmSelect17
                               MyNetwork.AMQP.confirmSelect17
                               ww4
                               ww5
                               MyNetwork.AMQP.confirmSelect15
                               MyNetwork.AMQP.confirmSelect13
                               MyNetwork.AMQP.confirmSelect11
                               MyNetwork.AMQP.confirmSelect9)
                            MyNetwork.AMQP.confirmSelect3
                            w2 }
                 } in
                 case ipv1 of ds5 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ww3
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Int
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ GHC.Types.Int
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    case ipv3 of wild { GHC.Types.I# x ->
                                    case x of wild1 {
                                      DEFAULT -> wild 0# -> MyNetwork.AMQP.confirmSelect2 } } #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ww3
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Int
                                e1
                                s2# })
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ww3
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      $w$j s2# } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.takeMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ww3
                                     s1 of ds6 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.catch#
                                     @ GHC.Types.Int
                                     @ GHC.Exception.SomeException
                                     (GHC.Prim.unmaskAsyncExceptions#
                                        @ GHC.Types.Int
                                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         (# s,
                                            case ipv3 of wild { GHC.Types.I# x ->
                                            case x of wild1 {
                                              DEFAULT -> wild
                                              0# -> MyNetwork.AMQP.confirmSelect2 } } #)))
                                     (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                        (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case GHC.Prim.putMVar#
                                             @ GHC.Prim.RealWorld
                                             @ GHC.Types.Int
                                             ww3
                                             ipv3
                                             s2 of s2# { DEFAULT ->
                                      GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ GHC.Types.Int
                                        e1
                                        s2# })
                                     ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ww3
                                     ipv5
                                     ipv4 of s2# { DEFAULT ->
                              (# s2#, GHC.Tuple.() #) } } })
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      $w$j ipv2 }
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ww3
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Int
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ GHC.Types.Int
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    case ipv3 of wild { GHC.Types.I# x ->
                                    case x of wild1 {
                                      DEFAULT -> wild 0# -> MyNetwork.AMQP.confirmSelect2 } } #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Int
                                     ww3
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Int
                                e1
                                s2# })
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ww3
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      $w$j s2# } } } } }) -}
5e4b27595a92f7a036bd45b1bcd16816
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.bindExchange2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
c69ae7f4a504119c1450eee75020e7a4
  $wfail1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.bindQueue2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
403b921e73ad8d0f1174b65aabfa1817
  $wfail10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.qos2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
fa9fadcea6a080374e8ecb3023c2e5ff
  $wfail11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.recoverMsgs2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
04e05fe697806e4cf0d1c19d7ba6c3a4
  $wfail12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.txCommit2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
b7aee96c5423b77c98f4e0abc98880c2
  $wfail13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.txRollback2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
1599d424189b0bb6e98c739789a17480
  $wfail14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.txSelect2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
d28823a83234c216f087ae0f09611263
  $wfail15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.unbindExchange2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
e68127fff77b24668c97134edd1cfc25
  $wfail16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.unbindQueue2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
174a66239b42407cb1841909e08985ba
  $wfail2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.cancelConsumer2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
093f2fb57a72818df8ec56f1490280a5
  $wfail3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.confirmSelect5)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
fd264e05e75d3f3eae1944dbdfd1b39c
  $wfail4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.declareExchange2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
ddea6d8dffcab26ff36d6d49658a9d7f
  $wfail5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)
                    MyNetwork.AMQP.declareQueue2)
                   `cast`
                 (GHC.Types.N:IO[0]
                      <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_R)
                   w) -}
13306592b06af01fee461a269f06773b
  $wfail6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.deleteExchange2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
8f4e16620bbbb32dcf123bb7466623dc
  $wfail7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word32 #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ GHC.Word.Word32
                    MyNetwork.AMQP.deleteQueue2)
                   `cast`
                 (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                   w) -}
09ab5551c9f8e785261c7ec32fd89a25
  $wfail8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.flow2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
3d8233210b0f25dc334f92c96c6b66cd
  $wfail9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word32 #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ GHC.Word.Word32
                    MyNetwork.AMQP.purgeQueue2)
                   `cast`
                 (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                   w) -}
f76e2e8b2e66c78cd79b4b8ee9e55468
  $wfromURI ::
    GHC.Base.String
    -> (# [(GHC.Base.String, Network.Socket.Types.PortNumber)],
          Data.Text.Internal.Text, [MyNetwork.AMQP.Internal.SASLMechanism],
          GHC.Base.Maybe GHC.Word.Word32, GHC.Base.Maybe GHC.Word.Word16,
          GHC.Base.Maybe GHC.Word.Word16,
          GHC.Base.Maybe MyNetwork.AMQP.Internal.TLSSettings,
          GHC.Base.Maybe Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
3363d4bbda91da54627064522dccb5cc
  $wopenConnection' ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Connection #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,1*U(U,U,U)><L,1*U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Network.Socket.Types.PortNumber)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w2 :: Data.Text.Internal.Text)
                   (w3 :: Data.Text.Internal.Text)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.defaultConnectionOpts of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 MyNetwork.AMQP.Internal.$wopenConnection''
                   (GHC.Types.:
                      @ (GHC.Base.String, Network.Socket.Types.PortNumber)
                      (w, w1)
                      (GHC.Types.[]
                         @ (GHC.Base.String, Network.Socket.Types.PortNumber)))
                   (Data.Text.Internal.Text ww ww1 ww2)
                   (GHC.Types.:
                      @ MyNetwork.AMQP.Internal.SASLMechanism
                      (MyNetwork.AMQP.plain w2 w3)
                      (GHC.Types.[] @ MyNetwork.AMQP.Internal.SASLMechanism))
                   ds7
                   ds8
                   ds9
                   ds10
                   ds11
                   w4 }) -}
d9b3db7bcae551fcfda5d81583652d36
  $wplain ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Text.Internal.Text, Data.ByteString.Internal.ByteString,
          GHC.Base.Maybe
            (Data.ByteString.Internal.ByteString
             -> GHC.Types.IO Data.ByteString.Internal.ByteString) #)
  {- Arity: 6, Strictness: <L,U><S,U><S,U><L,U><S,U><S,U>,
     Inline: [0] -}
d1025e19c67fdadb426ef3dd01c4a4b2
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0d4039132cc332083665958138b78309
  $wrabbitCRdemo ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> (# Data.Text.Internal.Text, Data.ByteString.Internal.ByteString,
          GHC.Base.Maybe
            (Data.ByteString.Internal.ByteString
             -> GHC.Types.IO Data.ByteString.Internal.ByteString) #)
  {- Arity: 4, Strictness: <S,U><S,U><S,1*U><L,1*U(U,U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.Text.Internal.Text) ->
                 case MyNetwork.AMQP.rabbitCRdemo3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Encoding.$wencodeUtf8
                        ww
                        ww1
                        ww2 of dt1 { Data.ByteString.Internal.PS ipv3 ipv4 ipv5 ipv6 ->
                 let {
                   lvl77 :: Data.ByteString.Internal.ByteString
                   = GHC.Base.mappend
                       @ Data.ByteString.Internal.ByteString
                       Data.ByteString.Internal.$fMonoidByteString
                       MyNetwork.AMQP.rabbitCRdemo1
                       (case w of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                        Data.Text.Encoding.$wencodeUtf8 ww4 ww5 ww6 })
                 } in
                 (# dt, dt1,
                    GHC.Base.Just
                      @ (Data.ByteString.Internal.ByteString
                         -> GHC.Types.IO Data.ByteString.Internal.ByteString)
                      (\ (ds4 :: Data.ByteString.Internal.ByteString)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# eta, lvl77 #))
                        `cast`
                      (<Data.ByteString.Internal.ByteString>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Data.ByteString.Internal.ByteString>_R)) #) } }) -}
c2b5068f81b85d6c3a169606fc9352a7
  $wwaitForConfirms ::
    GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.ConfirmationResult #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (ww1 :: GHC.Prim.TVar#
                             GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (ww2 :: GHC.Prim.TVar#
                             GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.atomically#
                   @ MyNetwork.AMQP.Types.ConfirmationResult
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case GHC.Prim.readTVar#
                           @ GHC.Prim.RealWorld
                           @ Data.IntSet.Internal.IntSet
                           ww
                           s of ds6 { (#,#) ipv ipv1 ->
                    case ipv1 of wild {
                      DEFAULT
                      -> case GHC.Prim.retry# @ () ipv
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   MyNetwork.AMQP.Types.ConfirmationResult #)
                         of {}
                      Data.IntSet.Internal.Nil
                      -> case GHC.Prim.readTVar#
                                @ GHC.Prim.RealWorld
                                @ Data.IntSet.Internal.IntSet
                                ww1
                                ipv of ds7 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.writeTVar#
                                @ GHC.Prim.RealWorld
                                @ Data.IntSet.Internal.IntSet
                                ww1
                                Data.IntSet.Internal.Nil
                                ipv2 of s2# { DEFAULT ->
                         case GHC.Prim.readTVar#
                                @ GHC.Prim.RealWorld
                                @ Data.IntSet.Internal.IntSet
                                ww2
                                s2# of ds8 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.writeTVar#
                                @ GHC.Prim.RealWorld
                                @ Data.IntSet.Internal.IntSet
                                ww2
                                Data.IntSet.Internal.Nil
                                ipv4 of s2#1 { DEFAULT ->
                         (# s2#1, MyNetwork.AMQP.Types.Complete (ipv3, ipv5) #) } } } } } })
                   w) -}
1ca0e2eb2d1c1869bc2ceb2487541b6e
  data Ack = Ack | NoAck
e664c797b038da82f9abd4781da7b4a5
  data ExchangeOpts
    = ExchangeOpts {exchangeName :: Data.Text.Internal.Text,
                    exchangeType :: Data.Text.Internal.Text,
                    exchangePassive :: GHC.Types.Bool,
                    exchangeDurable :: GHC.Types.Bool,
                    exchangeAutoDelete :: GHC.Types.Bool,
                    exchangeInternal :: GHC.Types.Bool,
                    exchangeArguments :: MyNetwork.AMQP.Types.FieldTable}
bef81cab6a7bd26b4e5d12948610ec4c
  data QueueOpts
    = QueueOpts {queueName :: Data.Text.Internal.Text,
                 queuePassive :: GHC.Types.Bool,
                 queueDurable :: GHC.Types.Bool,
                 queueExclusive :: GHC.Types.Bool,
                 queueAutoDelete :: GHC.Types.Bool,
                 queueHeaders :: MyNetwork.AMQP.Types.FieldTable}
a0e985ced3dc4812114adf95512abeae
  ackEnv :: MyNetwork.AMQP.Internal.Envelope -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <L,U(1*U(U),A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.ackEnv1
                  `cast`
                (<MyNetwork.AMQP.Internal.Envelope>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1a7ec6f847b6c6dcf734c43fdb4c4e3e
  ackEnv1 ::
    MyNetwork.AMQP.Internal.Envelope
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <L,U(1*U(U),A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (env :: MyNetwork.AMQP.Internal.Envelope)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.Internal.writeAssembly1
                   (MyNetwork.AMQP.Internal.envChannel env)
                   (MyNetwork.AMQP.Internal.SimpleMethod
                      (MyNetwork.AMQP.Generated.Basic_ack
                         (MyNetwork.AMQP.Internal.envDeliveryTag env)
                         GHC.Types.False))
                   eta) -}
03338b0d2ef7bede8d01c8418ba41ccc
  ackMsg ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.LongLongInt
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.ackMsg1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Types.LongLongInt>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7aa5f63c21ce58b7c41c5128c8d678dd
  ackMsg1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.LongLongInt
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (deliveryTag :: MyNetwork.AMQP.Types.LongLongInt)
                   (multiple :: GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.Internal.writeAssembly1
                   chan
                   (MyNetwork.AMQP.Internal.SimpleMethod
                      (MyNetwork.AMQP.Generated.Basic_ack deliveryTag multiple))
                   eta) -}
16a445045d774def1b7d275191238557
  addConfirmationListener ::
    MyNetwork.AMQP.Internal.Channel
    -> ((GHC.Word.Word64, GHC.Types.Bool,
         MyNetwork.AMQP.Internal.AckType)
        -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLS(S)L),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.addConfirmationListener1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <(GHC.Word.Word64, GHC.Types.Bool,
                        MyNetwork.AMQP.Internal.AckType)
                       -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc559481562d83d413a5630b4fa3887a
  addConfirmationListener1 ::
    MyNetwork.AMQP.Internal.Channel
    -> ((GHC.Word.Word64, GHC.Types.Bool,
         MyNetwork.AMQP.Internal.AckType)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLS(S)L),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: (GHC.Word.Word64, GHC.Types.Bool,
                           MyNetwork.AMQP.Internal.AckType)
                          -> GHC.Types.IO ())
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww14 of ww16 { GHC.MVar.MVar ww17 ->
                 MyNetwork.AMQP.$waddConfirmationListener ww17 w1 w2 } }) -}
c1fcf3b0736e9d70c1bfebc115ed8023
  amqplain ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text) ->
                 case MyNetwork.AMQP.$wamqplain w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 MyNetwork.AMQP.Internal.SASLMechanism ww1 ww2 ww3 }) -}
448ebccdeb05802edcbea5b91bd8ed3b
  amqplain1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   MyNetwork.AMQP.amqplain2) -}
adef6d223074409353bc003f76fc000e
  amqplain2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PASSWORD"#) -}
37733764777314350be4c3062b82c049
  amqplain3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   MyNetwork.AMQP.amqplain4) -}
59ec62696b573562319c8d46d09707c5
  amqplain4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LOGIN"#) -}
ae9e3b2dcffef9798baee9f4734b3ee2
  amqplain5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   MyNetwork.AMQP.amqplain6) -}
1cc75e3dfaa173d902453e3c0c018d82
  amqplain6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AMQPLAIN"#) -}
3503abde57d0613a8a955a6b25a10c85
  bindExchange ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.bindExchange1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b7dbf6147bb59abd81aa063987e9228a
  bindExchange' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.bindExchange'1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Types.FieldTable>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
638e35464c3da47cce14180183a950b4
  bindExchange'1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (destinationName :: Data.Text.Internal.Text)
                   (sourceName :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (args :: MyNetwork.AMQP.Types.FieldTable)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_bind
                              MyNetwork.AMQP.bindExchange5
                              destinationName
                                `cast`
                              (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              sourceName `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              args))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail ipv
                        MyNetwork.AMQP.Generated.Exchange_bind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail ipv } }) -}
ba841fa22ed686702a308c1b20984940
  bindExchange1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (destinationName :: Data.Text.Internal.Text)
                   (sourceName :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_bind
                              MyNetwork.AMQP.bindExchange5
                              destinationName
                                `cast`
                              (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              sourceName `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              MyNetwork.AMQP.bindExchange4))
                        eta of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail ipv
                        MyNetwork.AMQP.Generated.Exchange_bind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail ipv } }) -}
369f8f347903e80a258834a8afd47c9a
  bindExchange2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.bindExchange3) -}
db2b00e014030f79a311f0c780d3d8d2
  bindExchange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:219:5-35"#) -}
045a25e9db8cc761dd3a48e05fed9a05
  bindExchange4 :: MyNetwork.AMQP.Types.FieldTable
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (MyNetwork.AMQP.Types.FieldTable
                   (Data.Map.Internal.Tip
                      @ Data.Text.Internal.Text
                      @ MyNetwork.AMQP.Types.FieldValue)) -}
0bf071a2a716070631436c285ea43e79
  bindExchange5 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W16# 1##) -}
25ae8cb8e2c5ba7712f135053d7b65be
  bindQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.bindQueue1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
db70dfa146cb17a4c6168d3f05beedce
  bindQueue' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.bindQueue'1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Types.FieldTable>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
43cb338e6d7f41e17e1d8a6cb735f796
  bindQueue'1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (exchange :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (args :: MyNetwork.AMQP.Types.FieldTable)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_bind
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              exchange `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              args))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail1 ipv
                        MyNetwork.AMQP.Generated.Queue_bind_ok -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail1 ipv } }) -}
afae0e50f42f43d86864cf6e3ae302ea
  bindQueue1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (exchange :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_bind
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              exchange `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              MyNetwork.AMQP.bindExchange4))
                        eta of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail1 ipv
                        MyNetwork.AMQP.Generated.Queue_bind_ok -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail1 ipv } }) -}
5758e559e5878ddacdd2db1f47e21242
  bindQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.bindQueue3) -}
84d012139e9bcb6dd2b92efb1c17e1eb
  bindQueue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:303:5-32"#) -}
2721dae9b192f1c4544a0040a334bbbc
  cancelConsumer ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),1*U(U),A,A,A)><L,U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.cancelConsumer1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Types.ConsumerTag>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8247d6d81f2c028b50f973168dfbcafb
  cancelConsumer1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.ConsumerTag
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),1*U(U),A,A,A)><L,U(U,U,U)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (consumerTag :: MyNetwork.AMQP.Types.ConsumerTag)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Basic_cancel
                              consumerTag `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail2 ipv
                        MyNetwork.AMQP.Generated.Basic_cancel_ok ds6
                        -> case GHC.Prim.getMaskingState# ipv of ds7 { (#,#) ipv2 ipv3 ->
                           case ipv3 of ds8 {
                             DEFAULT
                             -> case chan of wild2 { MyNetwork.AMQP.Internal.Channel ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                                case ds20 of wild3 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       mvar#
                                       ipv2 of ds24 { (#,#) ipv4 ipv5 ->
                                case GHC.Prim.catch#
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       @ GHC.Exception.SomeException
                                       (GHC.Prim.maskAsyncExceptions#
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           (# s1,
                                              MyNetwork.AMQP.$sdelete_$sgo13
                                                @ ((MyNetwork.AMQP.Internal.Message,
                                                    MyNetwork.AMQP.Internal.Envelope)
                                                   -> GHC.Types.IO (),
                                                   MyNetwork.AMQP.Types.ConsumerTag
                                                   -> GHC.Types.IO ())
                                                consumerTag
                                                ipv5 #)))
                                       (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                          (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ (Data.Map.Internal.Map
                                                    Data.Text.Internal.Text
                                                    ((MyNetwork.AMQP.Internal.Message,
                                                      MyNetwork.AMQP.Internal.Envelope)
                                                     -> GHC.Types.IO (),
                                                     MyNetwork.AMQP.Types.ConsumerTag
                                                     -> GHC.Types.IO ()))
                                               mvar#
                                               ipv5
                                               s1 of s2# { DEFAULT ->
                                        GHC.Prim.raiseIO#
                                          @ GHC.Exception.SomeException
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          e1
                                          s2# })
                                       ipv4 of ds25 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       mvar#
                                       ipv7
                                       ipv6 of s2# { DEFAULT ->
                                (# s2#, GHC.Tuple.() #) } } } } }
                             0#
                             -> GHC.Prim.maskAsyncExceptions#
                                  @ ()
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case chan of wild2 { MyNetwork.AMQP.Internal.Channel ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                                   case ds20 of wild3 { GHC.MVar.MVar mvar# ->
                                   case GHC.Prim.takeMVar#
                                          @ GHC.Prim.RealWorld
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          mvar#
                                          s1 of ds24 { (#,#) ipv4 ipv5 ->
                                   case GHC.Prim.catch#
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          @ GHC.Exception.SomeException
                                          (GHC.Prim.unmaskAsyncExceptions#
                                             @ (Data.Map.Internal.Map
                                                  Data.Text.Internal.Text
                                                  ((MyNetwork.AMQP.Internal.Message,
                                                    MyNetwork.AMQP.Internal.Envelope)
                                                   -> GHC.Types.IO (),
                                                   MyNetwork.AMQP.Types.ConsumerTag
                                                   -> GHC.Types.IO ()))
                                             (\ (s2 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              (# s2,
                                                 MyNetwork.AMQP.$sdelete_$sgo13
                                                   @ ((MyNetwork.AMQP.Internal.Message,
                                                       MyNetwork.AMQP.Internal.Envelope)
                                                      -> GHC.Types.IO (),
                                                      MyNetwork.AMQP.Types.ConsumerTag
                                                      -> GHC.Types.IO ())
                                                   consumerTag
                                                   ipv5 #)))
                                          (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                             (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.putMVar#
                                                  @ GHC.Prim.RealWorld
                                                  @ (Data.Map.Internal.Map
                                                       Data.Text.Internal.Text
                                                       ((MyNetwork.AMQP.Internal.Message,
                                                         MyNetwork.AMQP.Internal.Envelope)
                                                        -> GHC.Types.IO (),
                                                        MyNetwork.AMQP.Types.ConsumerTag
                                                        -> GHC.Types.IO ()))
                                                  mvar#
                                                  ipv5
                                                  s2 of s2# { DEFAULT ->
                                           GHC.Prim.raiseIO#
                                             @ GHC.Exception.SomeException
                                             @ (Data.Map.Internal.Map
                                                  Data.Text.Internal.Text
                                                  ((MyNetwork.AMQP.Internal.Message,
                                                    MyNetwork.AMQP.Internal.Envelope)
                                                   -> GHC.Types.IO (),
                                                   MyNetwork.AMQP.Types.ConsumerTag
                                                   -> GHC.Types.IO ()))
                                             e1
                                             s2# })
                                          ipv4 of ds25 { (#,#) ipv6 ipv7 ->
                                   case GHC.Prim.putMVar#
                                          @ GHC.Prim.RealWorld
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          mvar#
                                          ipv7
                                          ipv6 of s2# { DEFAULT ->
                                   (# s2#, GHC.Tuple.() #) } } } } })
                                  ipv2
                             1#
                             -> case chan of wild2 { MyNetwork.AMQP.Internal.Channel ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                                case ds20 of wild3 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       mvar#
                                       ipv2 of ds24 { (#,#) ipv4 ipv5 ->
                                case GHC.Prim.catch#
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       @ GHC.Exception.SomeException
                                       (GHC.Prim.maskUninterruptible#
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           (# s1,
                                              MyNetwork.AMQP.$sdelete_$sgo13
                                                @ ((MyNetwork.AMQP.Internal.Message,
                                                    MyNetwork.AMQP.Internal.Envelope)
                                                   -> GHC.Types.IO (),
                                                   MyNetwork.AMQP.Types.ConsumerTag
                                                   -> GHC.Types.IO ())
                                                consumerTag
                                                ipv5 #)))
                                       (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                          (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ (Data.Map.Internal.Map
                                                    Data.Text.Internal.Text
                                                    ((MyNetwork.AMQP.Internal.Message,
                                                      MyNetwork.AMQP.Internal.Envelope)
                                                     -> GHC.Types.IO (),
                                                     MyNetwork.AMQP.Types.ConsumerTag
                                                     -> GHC.Types.IO ()))
                                               mvar#
                                               ipv5
                                               s1 of s2# { DEFAULT ->
                                        GHC.Prim.raiseIO#
                                          @ GHC.Exception.SomeException
                                          @ (Data.Map.Internal.Map
                                               Data.Text.Internal.Text
                                               ((MyNetwork.AMQP.Internal.Message,
                                                 MyNetwork.AMQP.Internal.Envelope)
                                                -> GHC.Types.IO (),
                                                MyNetwork.AMQP.Types.ConsumerTag
                                                -> GHC.Types.IO ()))
                                          e1
                                          s2# })
                                       ipv4 of ds25 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.Map.Internal.Map
                                            Data.Text.Internal.Text
                                            ((MyNetwork.AMQP.Internal.Message,
                                              MyNetwork.AMQP.Internal.Envelope)
                                             -> GHC.Types.IO (),
                                             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
                                       mvar#
                                       ipv7
                                       ipv6 of s2# { DEFAULT ->
                                (# s2#, GHC.Tuple.() #) } } } } } } } }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail2 ipv } }) -}
3ef2dc15fe03568c478125084c6777ad
  cancelConsumer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.cancelConsumer3) -}
942187328068959a29da8321d2c2dab4
  cancelConsumer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:399:5-38"#) -}
0786a2399d5688588814af45c997a96c
  confirmSelect ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLLS(S)LLLLLLLLL),1*U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,1*U(U),1*U(U),A,1*U(U),A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.confirmSelect1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bae27399f4d44754020eba841f24e3c3
  confirmSelect1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLLS(S)LLLLLLLLL),1*U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,1*U(U),1*U(U),A,1*U(U),A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><S,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww6 of ww16 { GHC.MVar.MVar ww17 ->
                 MyNetwork.AMQP.$wconfirmSelect
                   ww1
                   ww3
                   ww4
                   ww17
                   ww10
                   ww11
                   w1
                   w2 } }) -}
f9842d06b1bdd9f04a09698709b2771a
  confirmSelect10 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ww MVar [SomeException -> IO ()]"#) -}
3a9b929f30ad249b615b5ea56234cb59
  confirmSelect11 ::
    GHC.MVar.MVar
      [(GHC.Word.Word64, GHC.Types.Bool, MyNetwork.AMQP.Internal.AckType)
       -> GHC.Types.IO ()]
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.MVar.MVar
                        [(GHC.Word.Word64, GHC.Types.Bool, MyNetwork.AMQP.Internal.AckType)
                         -> GHC.Types.IO ()])
                   MyNetwork.AMQP.confirmSelect12) -}
c9a83f20d3b3f095d5442bba49683ac7
  confirmSelect12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ww MVar [(Word64, Bool, AckType) -> IO ()]"#) -}
02f66d468c42cd18ae5257bd0dd000ec
  confirmSelect13 ::
    GHC.MVar.MVar
      [(MyNetwork.AMQP.Internal.Message,
        MyNetwork.AMQP.Internal.PublishError)
       -> GHC.Types.IO ()]
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.MVar.MVar
                        [(MyNetwork.AMQP.Internal.Message,
                          MyNetwork.AMQP.Internal.PublishError)
                         -> GHC.Types.IO ()])
                   MyNetwork.AMQP.confirmSelect14) -}
ed862261eb34e0d1cb9ae4ce226db51d
  confirmSelect14 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ww MVar [(Message, PublishError) -> IO ()]"#) -}
676bc1bd61b6c31e1d2345a27f7a8061
  confirmSelect15 ::
    GHC.MVar.MVar
      (Data.Map.Internal.Map
         Data.Text.Internal.Text
         ((MyNetwork.AMQP.Internal.Message,
           MyNetwork.AMQP.Internal.Envelope)
          -> GHC.Types.IO (),
          MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.MVar.MVar
                        (Data.Map.Internal.Map
                           Data.Text.Internal.Text
                           ((MyNetwork.AMQP.Internal.Message,
                             MyNetwork.AMQP.Internal.Envelope)
                            -> GHC.Types.IO (),
                            MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ())))
                   MyNetwork.AMQP.confirmSelect16) -}
4b92f6fcee41f40b115bd128d3add152
  confirmSelect16 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("ww MVar\n\
                 \     (Map Text ((Message, Envelope) -> IO (), ConsumerTag -> IO ()))"#) -}
c31c9be5c8cb58019fc3ad48e846df22
  confirmSelect17 :: GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet)
                   MyNetwork.AMQP.confirmSelect18) -}
54a9feda8be3d8ddc8a18e384e0be353
  confirmSelect18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww TVar IntSet"#) -}
cc849ba97157a0c077f0a70959e49589
  confirmSelect19 :: GHC.MVar.MVar GHC.Types.Int
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.MVar.MVar GHC.Types.Int)
                   MyNetwork.AMQP.confirmSelect20) -}
c8c9e280a6de4f4fb2ecb10856370930
  confirmSelect2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
39b4621033b27a209cce81be9d07ed84
  confirmSelect20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww MVar Int"#) -}
d9d190590c61061443b5f25082244830
  confirmSelect21 ::
    Control.Concurrent.Chan.Chan MyNetwork.AMQP.Protocol.FramePayload
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (Control.Concurrent.Chan.Chan
                        MyNetwork.AMQP.Protocol.FramePayload)
                   MyNetwork.AMQP.confirmSelect22) -}
fcfb3fc3cdf72e6e9c51252d2b9b78cb
  confirmSelect22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww Chan FramePayload"#) -}
67225ed8490ba002e2e163f73f296d76
  confirmSelect3 :: MyNetwork.AMQP.Internal.Assembly
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.confirmSelect4) -}
288f954d39499818c1b7c8c681a8c4f6
  confirmSelect4 :: MyNetwork.AMQP.Generated.MethodPayload
  {- HasNoCafRefs, Strictness: m61,
     Unfolding: (MyNetwork.AMQP.Generated.Confirm_select
                   GHC.Types.True) -}
d00cd53a88901dfbe860ce2f087e1d1e
  confirmSelect5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.confirmSelect6) -}
69a0138ce5fbf59f624399fc8efa4ae0
  confirmSelect6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:544:13-44"#) -}
8b74c06df92b7294cee87b4656d976b8
  confirmSelect7 :: MyNetwork.AMQP.Internal.Assembly
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.confirmSelect8) -}
a7effd282de9bef955fcdf03c0cd373f
  confirmSelect8 :: MyNetwork.AMQP.Generated.MethodPayload
  {- HasNoCafRefs, Strictness: m61,
     Unfolding: (MyNetwork.AMQP.Generated.Confirm_select
                   GHC.Types.False) -}
a8a856f69467f600de1aaa3450ed9613
  confirmSelect9 ::
    GHC.MVar.MVar [GHC.Exception.SomeException -> GHC.Types.IO ()]
  {- Unfolding: (Control.Exception.Base.absentError
                   @ (GHC.MVar.MVar [GHC.Exception.SomeException -> GHC.Types.IO ()])
                   MyNetwork.AMQP.confirmSelect10) -}
cad87496bf56288a50a566a0f238b370
  consumeMsgs ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Ack
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.Envelope)
        -> GHC.Types.IO ())
    -> GHC.Types.IO MyNetwork.AMQP.Types.ConsumerTag
  {- Arity: 5,
     Strictness: <S(LLLLS(S)LLLLLLS(S)LLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),U(U),A,A,A,A,U(A,U(U)),U(U),U(U),A,A,A)><L,U><L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.consumeMsgs1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Ack>_R
                 ->_R <(MyNetwork.AMQP.Internal.Message,
                        MyNetwork.AMQP.Internal.Envelope)
                       -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Types.ConsumerTag>_R)) -}
28ce562d545d4488bcb15ff68da29b76
  consumeMsgs' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Ack
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.Envelope)
        -> GHC.Types.IO ())
    -> (MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ())
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Types.IO MyNetwork.AMQP.Types.ConsumerTag
  {- Arity: 7,
     Strictness: <S(LLLLS(S)LLLLLLS(S)LLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),1*U(U),A,A,A,A,U(A,U(U)),U(U),1*U(U),A,A,A)><L,U><L,1*U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.consumeMsgs3
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Ack>_R
                 ->_R <(MyNetwork.AMQP.Internal.Message,
                        MyNetwork.AMQP.Internal.Envelope)
                       -> GHC.Types.IO ()>_R
                 ->_R <MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()>_R
                 ->_R <MyNetwork.AMQP.Types.FieldTable>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Types.ConsumerTag>_R)) -}
0240e90fd0c38102cba0c2176f74ba95
  consumeMsgs1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Ack
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.Envelope)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.ConsumerTag #)
  {- Arity: 5,
     Strictness: <S(LLLLS(S)LLLLLLS(S)LLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),U(U),A,A,A,A,U(A,U(U)),U(U),U(U),A,A,A)><L,U><L,1*U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (ack :: MyNetwork.AMQP.Ack)
                   (callback :: (MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.Envelope)
                                -> GHC.Types.IO ())
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.consumeMsgs3
                   chan
                   queue
                   ack
                   callback
                   MyNetwork.AMQP.consumeMsgs2
                     `cast`
                   (<MyNetwork.AMQP.Types.ConsumerTag>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   MyNetwork.AMQP.bindExchange4
                   eta) -}
58efa942b781613116f682da0bbac6c4
  consumeMsgs2 ::
    MyNetwork.AMQP.Types.ConsumerTag
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds4 :: MyNetwork.AMQP.Types.ConsumerTag)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Tuple.() #)) -}
69b25517ebd703e0839a062fe1c36739
  consumeMsgs3 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Ack
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.Envelope)
        -> GHC.Types.IO ())
    -> (MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ())
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.ConsumerTag #)
  {- Arity: 7,
     Strictness: <S(LLLLS(S)LLLLLLS(S)LLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),1*U(U),A,A,A,A,U(A,U(U)),U(U),1*U(U),A,A,A)><L,U><L,1*U><L,U><L,U><L,U><S,U> -}
7c02f988796dc08ec1fcee3e08e79680
  declareExchange ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.ExchangeOpts -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.declareExchange1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.ExchangeOpts>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
89d337339723472908c3b45215aa307a
  declareExchange1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.ExchangeOpts
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (exchg :: MyNetwork.AMQP.ExchangeOpts)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_declare
                              MyNetwork.AMQP.bindExchange5
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds4 `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0])) })
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds5 `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0])) })
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds6 })
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds7 })
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds8 })
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds9 })
                              GHC.Types.False
                              (case exchg of wild { MyNetwork.AMQP.ExchangeOpts ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               ds10 })))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail4 ipv
                        MyNetwork.AMQP.Generated.Exchange_declare_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail4 ipv } }) -}
97142fe7aa70c6fecd7cc87caf4ea78f
  declareExchange2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.declareExchange3) -}
30ac902e7034f6691bd649519da2876c
  declareExchange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:199:5-38"#) -}
bb17d2250cba9414c5d46b5eeb28c035
  declareQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.QueueOpts
    -> GHC.Types.IO
         (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.declareQueue1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.QueueOpts>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_R)) -}
e93d6b591893b0378f0485ea9b8b2b26
  declareQueue1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.QueueOpts
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U(1*U,1*U,1*U,1*U,1*U,1*U)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: MyNetwork.AMQP.QueueOpts)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_declare
                              MyNetwork.AMQP.bindExchange5
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds4 `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0])) })
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds5 })
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds6 })
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds7 })
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds8 })
                              GHC.Types.False
                              (case queue of wild { MyNetwork.AMQP.QueueOpts ds4 ds5 ds6 ds7 ds8 ds9 ->
                               ds9 })))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail5 ipv
                        MyNetwork.AMQP.Generated.Queue_declare_ok ds6 messageCount consumerCount
                        -> (# ipv,
                              (ds6 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]),
                               case messageCount of wild2 { GHC.Word.W32# x# ->
                               GHC.Types.I# (GHC.Prim.word2Int# x#) },
                               case consumerCount of wild2 { GHC.Word.W32# x# ->
                               GHC.Types.I# (GHC.Prim.word2Int# x#) }) #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail5 ipv } }) -}
78a31b8ec2d8f45492fd0f437ebfa26e
  declareQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.declareQueue3) -}
25ae8a79c4ee72195f15b07406215929
  declareQueue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:285:5-84"#) -}
f563f0ffa3ec6c09184913b83538298f
  defaultConnectionOpts :: MyNetwork.AMQP.Internal.ConnectionOpts
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        MyNetwork.AMQP.defaultConnectionOpts11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 MyNetwork.AMQP.Internal.ConnectionOpts
                   MyNetwork.AMQP.defaultConnectionOpts6
                   dt
                   MyNetwork.AMQP.defaultConnectionOpts3
                   MyNetwork.AMQP.defaultConnectionOpts1
                   (GHC.Base.Nothing @ GHC.Word.Word16)
                   (GHC.Base.Nothing @ GHC.Word.Word16)
                   (GHC.Base.Nothing @ MyNetwork.AMQP.Internal.TLSSettings)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text) }) -}
135f42f1a76a121686e8493fbf8d8a8d
  defaultConnectionOpts1 :: GHC.Base.Maybe GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Word.Word32
                   MyNetwork.AMQP.defaultConnectionOpts2) -}
b968312e5cfdfbcc33f301818b776942
  defaultConnectionOpts10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("localhost"#) -}
cc464fc3e4f964a839c29ac122f3af74
  defaultConnectionOpts11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
062f4f159bd1e2f2237d784f8b93af16
  defaultConnectionOpts2 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W32# 131072##) -}
76720db90d810f0eb71084ebd217d742
  defaultConnectionOpts3 :: [MyNetwork.AMQP.Internal.SASLMechanism]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ MyNetwork.AMQP.Internal.SASLMechanism
                   MyNetwork.AMQP.defaultConnectionOpts4
                   (GHC.Types.[] @ MyNetwork.AMQP.Internal.SASLMechanism)) -}
31bb6c3802b4ca7f2f43535a071abfc6
  defaultConnectionOpts4 :: MyNetwork.AMQP.Internal.SASLMechanism
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        MyNetwork.AMQP.defaultConnectionOpts5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case MyNetwork.AMQP.$wplain
                        ww1
                        ww2
                        ww3
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 MyNetwork.AMQP.Internal.SASLMechanism ww5 ww6 ww7 } }) -}
1d095fed31a389830f3b02495e1547ab
  defaultConnectionOpts5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("guest"#) -}
b3390844665eca339c3c10a6d9aff90a
  defaultConnectionOpts6 ::
    [(GHC.Base.String, Network.Socket.Types.PortNumber)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Network.Socket.Types.PortNumber)
                   MyNetwork.AMQP.defaultConnectionOpts7
                   (GHC.Types.[]
                      @ (GHC.Base.String, Network.Socket.Types.PortNumber))) -}
043d697da87b44247e1e0ca0f92c8a53
  defaultConnectionOpts7 ::
    ([GHC.Types.Char], Network.Socket.Types.PortNumber)
  {- Strictness: m,
     Unfolding: ((MyNetwork.AMQP.defaultConnectionOpts9,
                  MyNetwork.AMQP.defaultConnectionOpts8)) -}
e211ac7029084d085fd04750d334b66b
  defaultConnectionOpts8 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.6 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        5672##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds4 ds5 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds5))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
28745d14bac1264d998dac610c532db0
  defaultConnectionOpts9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.defaultConnectionOpts10) -}
6e7c055d77626db2222cf42fe128c5e8
  deleteExchange ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.deleteExchange1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
84640ff4084b6bf02bcf50d1c2d7300c
  deleteExchange1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (exchange :: Data.Text.Internal.Text)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_delete
                              MyNetwork.AMQP.bindExchange5
                              exchange `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              GHC.Types.False))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail6 ipv
                        MyNetwork.AMQP.Generated.Exchange_delete_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail6 ipv } }) -}
fe865623cf32e35c30c56d4d7865c487
  deleteExchange2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.deleteExchange3) -}
53d9b9d31558f3d3acc6b3707c4187ab
  deleteExchange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:249:5-37"#) -}
8e66fc60eb8d369da064a79bcb579cb4
  deleteQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text -> GHC.Types.IO GHC.Word.Word32
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.deleteQueue1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)) -}
5e7248a12b792161a3a651ce1502c48b
  deleteQueue1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word32 #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_delete
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              GHC.Types.False
                              GHC.Types.False))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail7 ipv
                        MyNetwork.AMQP.Generated.Queue_delete_ok msgCount
                        -> (# ipv, msgCount #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail7 ipv } }) -}
309d14f6a0b3517267b99208d6fed181
  deleteQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.deleteQueue3) -}
11b42685d37b3e9fdc78752194744029
  deleteQueue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:342:5-45"#) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeArguments ::
    MyNetwork.AMQP.ExchangeOpts -> MyNetwork.AMQP.Types.FieldTable
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds11 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeAutoDelete :: MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds9 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeDurable :: MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds8 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeInternal :: MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds10 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeName ::
    MyNetwork.AMQP.ExchangeOpts -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds5 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangePassive :: MyNetwork.AMQP.ExchangeOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds7 }) -}
e664c797b038da82f9abd4781da7b4a5
  exchangeType ::
    MyNetwork.AMQP.ExchangeOpts -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.ExchangeOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.ExchangeOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.ExchangeOpts ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds6 }) -}
a30760d1adf111595abae5d51041b237
  flow ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.flow1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d025c31b1e535035f5446b209b312818
  flow1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (active :: GHC.Types.Bool)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Channel_flow active))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail8 ipv
                        MyNetwork.AMQP.Generated.Channel_flow_ok ds6
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail8 ipv } }) -}
878f924f2b4b065eb78c6db093468cbd
  flow2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# MyNetwork.AMQP.flow3) -}
cf2164451793ecddd1e090d4b9a1cc33
  flow3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:597:5-38"#) -}
bd896332a4e29bfbb44646dd2723118c
  fromURI ::
    GHC.Base.String -> MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case MyNetwork.AMQP.$wfromURI
                        w of ww { (#,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 MyNetwork.AMQP.Internal.ConnectionOpts
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
1cfbaf9dc05fcafac6146c1bce3c5dc2
  getMsg ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Ack
    -> Data.Text.Internal.Text
    -> GHC.Types.IO
         (GHC.Base.Maybe
            (MyNetwork.AMQP.Internal.Message,
             MyNetwork.AMQP.Internal.Envelope))
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),U,U),U,U(U),U(U),U(U),U,U(U),U,U,U,U(U),U),U,U(U),U(U),U,U,U,U,U,U(U,U(U)),U(U),U,U,U,U)><L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.getMsg1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Ack>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe
                                  (MyNetwork.AMQP.Internal.Message,
                                   MyNetwork.AMQP.Internal.Envelope)>_R)) -}
750d08c9ab4557a400ab27f731aeb435
  getMsg1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Ack
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (MyNetwork.AMQP.Internal.Message,
             MyNetwork.AMQP.Internal.Envelope) #)
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),U,U),U,U(U),U(U),U(U),U,U(U),U,U,U,U(U),U),U,U(U),U(U),U,U,U,U,U,U(U,U(U)),U(U),U,U,U,U)><L,1*U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (ack :: MyNetwork.AMQP.Ack)
                   (queue :: Data.Text.Internal.Text)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Basic_get
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              (case ack of wild {
                                 MyNetwork.AMQP.Ack -> GHC.Types.False
                                 MyNetwork.AMQP.NoAck -> GHC.Types.True })))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ipv2
                   -> (# ipv,
                         GHC.Base.Nothing
                           @ (MyNetwork.AMQP.Internal.Message,
                              MyNetwork.AMQP.Internal.Envelope) #)
                   MyNetwork.AMQP.Internal.ContentMethod ds5 properties body
                   -> case ds5 of wild1 {
                        DEFAULT
                        -> (# ipv,
                              GHC.Base.Nothing
                                @ (MyNetwork.AMQP.Internal.Message,
                                   MyNetwork.AMQP.Internal.Envelope) #)
                        MyNetwork.AMQP.Generated.Basic_get_ok deliveryTag redelivered ds6 ds7 ds8
                        -> (# ipv,
                              GHC.Base.Just
                                @ (MyNetwork.AMQP.Internal.Message,
                                   MyNetwork.AMQP.Internal.Envelope)
                                (MyNetwork.AMQP.Internal.msgFromContentHeaderProperties
                                   properties
                                   body,
                                 MyNetwork.AMQP.Internal.Envelope
                                   deliveryTag
                                   redelivered
                                   ds6 `cast` (MyNetwork.AMQP.Types.N:ShortString[0])
                                   ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0])
                                   chan) #) } } }) -}
df47703af54fcc744715d9112bbcf5f9
  newExchange :: MyNetwork.AMQP.ExchangeOpts
  {- Strictness: m,
     Unfolding: (MyNetwork.AMQP.ExchangeOpts
                   Data.Text.Internal.empty_
                   Data.Text.Internal.empty_
                   GHC.Types.False
                   GHC.Types.True
                   GHC.Types.False
                   GHC.Types.False
                   MyNetwork.AMQP.bindExchange4) -}
c98838b81f7141e22d1776f50d2f09f8
  newMsg :: MyNetwork.AMQP.Internal.Message
  {- HasNoCafRefs,
     Unfolding: (MyNetwork.AMQP.Internal.Message
                   Data.ByteString.Lazy.Internal.Empty
                   (GHC.Base.Nothing @ MyNetwork.AMQP.Internal.DeliveryMode)
                   (GHC.Base.Nothing @ MyNetwork.AMQP.Types.Timestamp)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ MyNetwork.AMQP.Types.Octet)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ MyNetwork.AMQP.Types.FieldTable)) -}
3ddf2aedb27c7c7182fe09f77ab63343
  newQueue :: MyNetwork.AMQP.QueueOpts
  {- Strictness: m,
     Unfolding: (MyNetwork.AMQP.QueueOpts
                   Data.Text.Internal.empty_
                   GHC.Types.False
                   GHC.Types.True
                   GHC.Types.False
                   GHC.Types.False
                   MyNetwork.AMQP.bindExchange4) -}
5782152ef25fcb24dd2532be13a0e1cd
  openConnection ::
    GHC.Base.String
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Connection
  {- Arity: 5, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.openConnection1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Connection>_R)) -}
bc2b8f94931043b59fb28f094e680dfe
  openConnection' ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Connection
  {- Arity: 6,
     Strictness: <L,U><L,U><S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.openConnection3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Connection>_R)) -}
9673c220dc5fd40e27385be32fb1fb55
  openConnection1 ::
    GHC.Base.String
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Connection #)
  {- Arity: 5, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (host :: GHC.Base.String) ->
                 MyNetwork.AMQP.openConnection3
                   host
                   MyNetwork.AMQP.openConnection2
                     `cast`
                   (Sym (Network.Socket.Types.N:PortNumber[0]))) -}
200d36aaaf639938ea93e998ca86e844
  openConnection2 :: GHC.Word.Word16
  {- Unfolding: (case {__pkg_ccall network-2.6.3.6 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        5672##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds4 ds5 ->
                 GHC.Word.W16# (GHC.Prim.narrow16Word# ds5) }) -}
ae0ee94e207b8e933b9d25f434de0fc0
  openConnection3 ::
    GHC.Base.String
    -> Network.Socket.Types.PortNumber
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Connection #)
  {- Arity: 6,
     Strictness: <L,U><L,U><S(SSS),1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Network.Socket.Types.PortNumber)
                   (w2 :: Data.Text.Internal.Text)
                   (w3 :: Data.Text.Internal.Text)
                   (w4 :: Data.Text.Internal.Text)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 MyNetwork.AMQP.$wopenConnection' w w1 ww1 ww2 ww3 w3 w4 w5 }) -}
f715007dca41af0b0ad3d64e75ad6d12
  plain ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 2, Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case MyNetwork.AMQP.$wplain
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 MyNetwork.AMQP.Internal.SASLMechanism ww9 ww10 ww11 } } }) -}
35f3cfe118073f38d129bc03830377bd
  publishMsg ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Internal.Message
    -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,U(U),U(U),A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.publishMsg1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Internal.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Types.Int>_R)) -}
2158106ab915b7e164d944bfab8d955c
  publishMsg' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> MyNetwork.AMQP.Internal.Message
    -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
  {- Arity: 6,
     Strictness: <S(LLLLLS(S)LLLLLLLLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,1*U(U),1*U(U),A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.publishMsg2
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <MyNetwork.AMQP.Internal.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Types.Int>_R)) -}
26124dfc1f875e1b2672a6eb4f9e2a16
  publishMsg1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Internal.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe GHC.Types.Int #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,U(U),U(U),A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (exchange :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (msg :: MyNetwork.AMQP.Internal.Message) ->
                 MyNetwork.AMQP.publishMsg2
                   chan
                   exchange
                   routingKey
                   GHC.Types.False
                   msg) -}
253479622feb2cc486fee9c6a865de63
  publishMsg2 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> MyNetwork.AMQP.Internal.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe GHC.Types.Int #)
  {- Arity: 6,
     Strictness: <S(LLLLLS(S)LLLLLLLLL),U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,1*U(U),1*U(U),A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S,U> -}
a92a84eb209b32ada433184941a69535
  purgeQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text -> GHC.Types.IO GHC.Word.Word32
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.purgeQueue1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)) -}
73ebcc8577d1c8c9afe20f65d1be1db4
  purgeQueue1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word32 #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_purge
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail9 ipv
                        MyNetwork.AMQP.Generated.Queue_purge_ok msgCount
                        -> (# ipv, msgCount #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail9 ipv } }) -}
cee7b7647650d7c6b149378520fd66a6
  purgeQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.purgeQueue3) -}
f77b63553acec11887692ee9489299f8
  purgeQueue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:332:5-44"#) -}
14a0c22f04883d7ae70df08d15781823
  qos ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Word.Word32
    -> GHC.Word.Word16
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.qos1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Word.Word32>_R
                 ->_R <GHC.Word.Word16>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c80d9196d589084d3bd6ab19ebe41ebf
  qos1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Word.Word32
    -> GHC.Word.Word16
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (prefetchSize :: GHC.Word.Word32)
                   (prefetchCount :: GHC.Word.Word16)
                   (global :: GHC.Types.Bool)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Basic_qos
                              prefetchSize
                              prefetchCount
                              global))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail10 ipv
                        MyNetwork.AMQP.Generated.Basic_qos_ok -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail10 ipv } }) -}
b11838f08a0c1b78d743058638bc074e
  qos2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# MyNetwork.AMQP.qos3) -}
a802ceda7b22653a7fee7a4bba2d68d0
  qos3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:663:5-31"#) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queueAutoDelete :: MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds9 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queueDurable :: MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds7 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queueExclusive :: MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds8 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queueHeaders ::
    MyNetwork.AMQP.QueueOpts -> MyNetwork.AMQP.Types.FieldTable
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds10 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queueName :: MyNetwork.AMQP.QueueOpts -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds5 }) -}
bef81cab6a7bd26b4e5d12948610ec4c
  queuePassive :: MyNetwork.AMQP.QueueOpts -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.QueueOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: MyNetwork.AMQP.QueueOpts) ->
                 case ds4 of wild { MyNetwork.AMQP.QueueOpts ds5 ds6 ds7 ds8 ds9 ds10 ->
                 ds6 }) -}
90a03bccb79206ac924f49ddd482396f
  rabbitCRdemo ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 2, Strictness: <S(SSS),1*U(U,U,1*U)><L,1*U(U,U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case MyNetwork.AMQP.$wrabbitCRdemo
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 MyNetwork.AMQP.Internal.SASLMechanism ww5 ww6 ww7 } }) -}
966d736e56789787b008aae4d4fef890
  rabbitCRdemo1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        MyNetwork.AMQP.rabbitCRdemo2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8881246f4438e63ec36bcd91d72557f8
  rabbitCRdemo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("My password is "#) -}
098a67d9fe611dcc71ed0b1cc176d7f8
  rabbitCRdemo3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   MyNetwork.AMQP.rabbitCRdemo4) -}
8e89d865bb332d278e8a3fe7fbf089a3
  rabbitCRdemo4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RABBIT-CR-DEMO"#) -}
484f7a627c7e6471c3cf78060f3c8c7f
  recoverMsgs ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.recoverMsgs1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a4b1a068daf577339679227a1a37df51
  recoverMsgs1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (requeue :: GHC.Types.Bool)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Basic_recover requeue))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail11 ipv
                        MyNetwork.AMQP.Generated.Basic_recover_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail11 ipv } }) -}
875cff472ece0fbb75baec978dca1a0c
  recoverMsgs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.recoverMsgs3) -}
94bd83318282a0159aba2a37870b644a
  recoverMsgs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:502:5-33"#) -}
649da3e213f1bf31b3e4729a6edaeac6
  rejectEnv ::
    MyNetwork.AMQP.Internal.Envelope
    -> GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(1*U(U),A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.rejectEnv1
                  `cast`
                (<MyNetwork.AMQP.Internal.Envelope>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
81dc8f1ec9b917311f6dae1ff96ec266
  rejectEnv1 ::
    MyNetwork.AMQP.Internal.Envelope
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(1*U(U),A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: MyNetwork.AMQP.Internal.Envelope)
                   (requeue :: GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.Internal.writeAssembly1
                   (MyNetwork.AMQP.Internal.envChannel env)
                   (MyNetwork.AMQP.Internal.SimpleMethod
                      (MyNetwork.AMQP.Generated.Basic_reject
                         (MyNetwork.AMQP.Internal.envDeliveryTag env)
                         requeue))
                   eta) -}
8a8ffd6efbe38cc00702aacf2cb37615
  rejectMsg ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.LongLongInt
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.rejectMsg1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Types.LongLongInt>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9344c9292379b773509f7cee57c85343
  rejectMsg1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.LongLongInt
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (deliveryTag :: MyNetwork.AMQP.Types.LongLongInt)
                   (requeue :: GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.Internal.writeAssembly1
                   chan
                   (MyNetwork.AMQP.Internal.SimpleMethod
                      (MyNetwork.AMQP.Generated.Basic_reject deliveryTag requeue))
                   eta) -}
bcc0fe96ec1ade452907f64b3a6f71fd
  txCommit :: MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.txCommit1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
667dfeb21003db7138a0f51eea532da3
  txCommit1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        MyNetwork.AMQP.txCommit4
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail12 ipv
                        MyNetwork.AMQP.Generated.Tx_commit_ok -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail12 ipv } }) -}
0ce60d61eb0b5a0194fda7708a378fe6
  txCommit2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.txCommit3) -}
96a47475a6f8639963b4bc71e4acefd5
  txCommit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:518:5-31"#) -}
0493ec7e35a80ce29b3da5fe52a8ddb0
  txCommit4 :: MyNetwork.AMQP.Internal.Assembly
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.Generated.Tx_commit) -}
dc69621ca8a14c4f85fb86d28bc18ba6
  txRollback :: MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.txRollback1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bfc95d6b31418ea436d343a83786cf67
  txRollback1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        MyNetwork.AMQP.txRollback4
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail13 ipv
                        MyNetwork.AMQP.Generated.Tx_rollback_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail13 ipv } }) -}
d31c4abce3e108f4f59f7fe436f5b44e
  txRollback2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.txRollback3) -}
eaf78b23f300ca7f182da8b40acb6098
  txRollback3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:524:5-33"#) -}
8941babd5811bb57f54bfcfe2cdbf861
  txRollback4 :: MyNetwork.AMQP.Internal.Assembly
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.Generated.Tx_rollback) -}
b50140746a92e967c8a25b17baadb787
  txSelect :: MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.txSelect1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3f69d6c2148baecb2da83a4f8a26dee0
  txSelect1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        MyNetwork.AMQP.txSelect4
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail14 ipv
                        MyNetwork.AMQP.Generated.Tx_select_ok -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail14 ipv } }) -}
bd3adf9029a58111707d09eff6790bc7
  txSelect2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.txSelect3) -}
ba3f06600340fe1e7c45e315453ae5e6
  txSelect3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:512:5-31"#) -}
790d23874bf2431c5c1dfbd62291f23d
  txSelect4 :: MyNetwork.AMQP.Internal.Assembly
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.Generated.Tx_select) -}
b9328af66fbf303f2580b9f57da0fb3a
  unbindExchange ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.unbindExchange1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4dea056f16a99168c95d9780fadac321
  unbindExchange' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.unbindExchange'1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Types.FieldTable>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
66c33e9767bd88d8d1e28d89021adb47
  unbindExchange'1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (destinationName :: Data.Text.Internal.Text)
                   (sourceName :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (args :: MyNetwork.AMQP.Types.FieldTable)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_unbind
                              MyNetwork.AMQP.bindExchange5
                              destinationName
                                `cast`
                              (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              sourceName `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              args))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail15 ipv
                        MyNetwork.AMQP.Generated.Exchange_unbind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail15 ipv } }) -}
2793bb78a0594465a8179a17e57ff166
  unbindExchange1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (destinationName :: Data.Text.Internal.Text)
                   (sourceName :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Exchange_unbind
                              MyNetwork.AMQP.bindExchange5
                              destinationName
                                `cast`
                              (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              sourceName `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              GHC.Types.False
                              MyNetwork.AMQP.bindExchange4))
                        eta of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail15 ipv
                        MyNetwork.AMQP.Generated.Exchange_unbind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail15 ipv } }) -}
70d5e9d434b505d3c96cada88985e663
  unbindExchange2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.unbindExchange3) -}
7af9a0a87d7c98d43c5029dfa7be19b9
  unbindExchange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:237:5-35"#) -}
e3cd81a60af6576f1ee6eaccaf207bd5
  unbindQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.unbindQueue1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
37c08f80da483b641cd18d7722ade0fc
  unbindQueue' ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.unbindQueue'1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <MyNetwork.AMQP.Types.FieldTable>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4e1b632bb25a46c467af6576a4147083
  unbindQueue'1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Types.FieldTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (exchange :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (args :: MyNetwork.AMQP.Types.FieldTable)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_unbind
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              exchange `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              args))
                        s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail16 ipv
                        MyNetwork.AMQP.Generated.Queue_unbind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail16 ipv } }) -}
db4b4039998f992eefbe97c2097b6cee
  unbindQueue1 ::
    MyNetwork.AMQP.Internal.Channel
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (queue :: Data.Text.Internal.Text)
                   (exchange :: Data.Text.Internal.Text)
                   (routingKey :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        chan
                        (MyNetwork.AMQP.Internal.SimpleMethod
                           (MyNetwork.AMQP.Generated.Queue_unbind
                              MyNetwork.AMQP.bindExchange5
                              queue `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              exchange `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              routingKey `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                              MyNetwork.AMQP.bindExchange4))
                        eta of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds5
                   -> case ds5 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.$wfail16 ipv
                        MyNetwork.AMQP.Generated.Queue_unbind_ok
                        -> (# ipv, GHC.Tuple.() #) }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.$wfail16 ipv } }) -}
2b9027956e6f860abfc68ac301f61013
  unbindQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.unbindQueue3) -}
758bbdf55f84e67a8448cf994b43bbcc
  unbindQueue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP.hs:321:5-32"#) -}
e1a74383cb758d714a0e8b95d56b03fb
  waitForConfirms ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.IO MyNetwork.AMQP.Types.ConfirmationResult
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLS(S)S(S)S(S)LLLLLL),1*U(A,A,A,A,A,A,1*U(U),1*U(U),1*U(U),A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.waitForConfirms1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Types.ConfirmationResult>_R)) -}
bebd79505f35573e4c45e74f651037a5
  waitForConfirms1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.ConfirmationResult #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLS(S)S(S)S(S)LLLLLL),1*U(A,A,A,A,A,A,1*U(U),1*U(U),1*U(U),A,A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww7 of ww16 { GHC.Conc.Sync.TVar ww17 ->
                 case ww8 of ww18 { GHC.Conc.Sync.TVar ww19 ->
                 case ww9 of ww20 { GHC.Conc.Sync.TVar ww21 ->
                 MyNetwork.AMQP.$wwaitForConfirms ww17 ww19 ww21 w1 } } } }) -}
85ceef73e975cff22beff33ae6da2f43
  waitForConfirmsUntil ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Int
    -> GHC.Types.IO MyNetwork.AMQP.Types.ConfirmationResult
  {- Arity: 3,
     Strictness: <L,U(A,A,A,A,A,A,U(U),U(U),U(U),A,A,A,A,A,A)><L,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.waitForConfirmsUntil1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Types.ConfirmationResult>_R)) -}
0baf4d6b58a86593757b69276a0545cb
  waitForConfirmsUntil1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.ConfirmationResult #)
  {- Arity: 3,
     Strictness: <L,U(A,A,A,A,A,A,U(U),U(U),U(U),A,A,A,A,A,A)><L,1*U(U)><L,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (timeout :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.11.1.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        GHC.Prim.realWorld# of wild { (#,#) ds4 ds5 ->
                 case ds5 of wild1 {
                   DEFAULT
                   -> case GHC.Event.Thread.registerDelay1
                             timeout
                             s of ds6 { (#,#) ipv ipv1 ->
                      GHC.Prim.atomically#
                        @ MyNetwork.AMQP.Types.ConfirmationResult
                        (GHC.Prim.catchRetry#
                           @ MyNetwork.AMQP.Types.ConfirmationResult
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case chan of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                            case ww7 of ww16 { GHC.Conc.Sync.TVar ww17 ->
                            case ww8 of ww18 { GHC.Conc.Sync.TVar ww19 ->
                            case ww9 of ww20 { GHC.Conc.Sync.TVar ww21 ->
                            case GHC.Prim.readTVar#
                                   @ GHC.Prim.RealWorld
                                   @ Data.IntSet.Internal.IntSet
                                   ww17
                                   s1 of ds7 { (#,#) ipv2 ipv3 ->
                            case ipv3 of wild2 {
                              DEFAULT
                              -> case GHC.Prim.retry# @ () ipv2
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           MyNetwork.AMQP.Types.ConfirmationResult #)
                                 of {}
                              Data.IntSet.Internal.Nil
                              -> case GHC.Prim.readTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        ww19
                                        ipv2 of ds8 { (#,#) ipv4 ipv5 ->
                                 case GHC.Prim.writeTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        ww19
                                        Data.IntSet.Internal.Nil
                                        ipv4 of s2# { DEFAULT ->
                                 case GHC.Prim.readTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        ww21
                                        s2# of ds9 { (#,#) ipv6 ipv7 ->
                                 case GHC.Prim.writeTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        ww21
                                        Data.IntSet.Internal.Nil
                                        ipv6 of s2#1 { DEFAULT ->
                                 (# s2#1,
                                    MyNetwork.AMQP.Types.Complete
                                      (ipv5, ipv7) #) } } } } } } } } } })
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case ipv1 of wild2 { GHC.Conc.Sync.TVar tvar# ->
                            case GHC.Prim.readTVar#
                                   @ GHC.Prim.RealWorld
                                   @ GHC.Types.Bool
                                   tvar#
                                   s1 of ds7 { (#,#) ipv2 ipv3 ->
                            case ipv3 of wild3 {
                              GHC.Types.False
                              -> GHC.Prim.retry# @ MyNetwork.AMQP.Types.ConfirmationResult ipv2
                              GHC.Types.True
                              -> case chan of wild4 { MyNetwork.AMQP.Internal.Channel ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                 case ds15 of wild5 { GHC.Conc.Sync.TVar tvar#1 ->
                                 case GHC.Prim.readTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        tvar#1
                                        ipv2 of ds23 { (#,#) ipv4 ipv5 ->
                                 case GHC.Prim.writeTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        tvar#1
                                        Data.IntSet.Internal.Nil
                                        ipv4 of s2# { DEFAULT ->
                                 case ds16 of wild6 { GHC.Conc.Sync.TVar tvar#2 ->
                                 case GHC.Prim.readTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        tvar#2
                                        s2# of ds24 { (#,#) ipv6 ipv7 ->
                                 case GHC.Prim.writeTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        tvar#2
                                        Data.IntSet.Internal.Nil
                                        ipv6 of s2#1 { DEFAULT ->
                                 case ds14 of wild7 { GHC.Conc.Sync.TVar tvar#3 ->
                                 case GHC.Prim.readTVar#
                                        @ GHC.Prim.RealWorld
                                        @ Data.IntSet.Internal.IntSet
                                        tvar#3
                                        s2#1 of ds25 { (#,#) ipv8 ipv9 ->
                                 (# ipv8,
                                    MyNetwork.AMQP.Types.Partial
                                      (ipv5, ipv7, ipv9) #) } } } } } } } } } } } }))
                        ipv }
                   0#
                   -> case GHC.Conc.IO.registerDelay2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                MyNetwork.AMQP.Types.ConfirmationResult #)
                      of {} } }) -}
instance GHC.Classes.Eq [MyNetwork.AMQP.Ack]
  = MyNetwork.AMQP.$fEqAck
instance GHC.Classes.Eq [MyNetwork.AMQP.ExchangeOpts]
  = MyNetwork.AMQP.$fEqExchangeOpts
instance GHC.Classes.Eq [MyNetwork.AMQP.QueueOpts]
  = MyNetwork.AMQP.$fEqQueueOpts
instance GHC.Classes.Ord [MyNetwork.AMQP.Ack]
  = MyNetwork.AMQP.$fOrdAck
instance GHC.Classes.Ord [MyNetwork.AMQP.ExchangeOpts]
  = MyNetwork.AMQP.$fOrdExchangeOpts
instance GHC.Classes.Ord [MyNetwork.AMQP.QueueOpts]
  = MyNetwork.AMQP.$fOrdQueueOpts
instance GHC.Read.Read [MyNetwork.AMQP.Ack]
  = MyNetwork.AMQP.$fReadAck
instance GHC.Read.Read [MyNetwork.AMQP.ExchangeOpts]
  = MyNetwork.AMQP.$fReadExchangeOpts
instance GHC.Read.Read [MyNetwork.AMQP.QueueOpts]
  = MyNetwork.AMQP.$fReadQueueOpts
instance GHC.Show.Show [MyNetwork.AMQP.Ack]
  = MyNetwork.AMQP.$fShowAck
instance GHC.Show.Show [MyNetwork.AMQP.ExchangeOpts]
  = MyNetwork.AMQP.$fShowExchangeOpts
instance GHC.Show.Show [MyNetwork.AMQP.QueueOpts]
  = MyNetwork.AMQP.$fShowQueueOpts
"SPEC/MyNetwork.AMQP fromList @ Text _" [orphan] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord
                                                                    Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = MyNetwork.AMQP.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

