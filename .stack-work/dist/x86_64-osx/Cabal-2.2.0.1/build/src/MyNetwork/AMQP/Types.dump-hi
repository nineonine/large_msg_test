
==================== FINAL INTERFACE ====================
2019-09-26 17:12:03.598246 UTC

interface largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC:MyNetwork.AMQP.Types 8044
  interface hash: 69f1f81c0b4e573c7447fc194eadb786
  ABI hash: b8f148f2de1f7b1663f31cc0624f4831
  export-list hash: 79710897a339f37e0aa0cd0013badcb8
  orphan hash: 996ca286ebe0a74da7d4501d44a5e831
  flag hash: 78bf37fd824af918e6dcaf1533397d9c
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyNetwork.AMQP.Types.AMQPException{MyNetwork.AMQP.Types.AllChannelsAllocatedException MyNetwork.AMQP.Types.ChannelClosedException MyNetwork.AMQP.Types.ConnectionClosedException}
  MyNetwork.AMQP.Types.Bit
  MyNetwork.AMQP.Types.ChannelID
  MyNetwork.AMQP.Types.CloseType{MyNetwork.AMQP.Types.Abnormal MyNetwork.AMQP.Types.Normal}
  MyNetwork.AMQP.Types.ConfirmationResult{MyNetwork.AMQP.Types.Complete MyNetwork.AMQP.Types.Partial}
  MyNetwork.AMQP.Types.ConsumerTag
  MyNetwork.AMQP.Types.DecimalValue{MyNetwork.AMQP.Types.DecimalValue}
  MyNetwork.AMQP.Types.Decimals
  MyNetwork.AMQP.Types.FieldTable{MyNetwork.AMQP.Types.FieldTable}
  MyNetwork.AMQP.Types.FieldValue{MyNetwork.AMQP.Types.FVBool MyNetwork.AMQP.Types.FVByteArray MyNetwork.AMQP.Types.FVDecimal MyNetwork.AMQP.Types.FVDouble MyNetwork.AMQP.Types.FVFieldArray MyNetwork.AMQP.Types.FVFieldTable MyNetwork.AMQP.Types.FVFloat MyNetwork.AMQP.Types.FVInt16 MyNetwork.AMQP.Types.FVInt32 MyNetwork.AMQP.Types.FVInt64 MyNetwork.AMQP.Types.FVInt8 MyNetwork.AMQP.Types.FVString MyNetwork.AMQP.Types.FVTimestamp MyNetwork.AMQP.Types.FVVoid}
  MyNetwork.AMQP.Types.LongInt
  MyNetwork.AMQP.Types.LongLongInt
  MyNetwork.AMQP.Types.LongString{MyNetwork.AMQP.Types.LongString}
  MyNetwork.AMQP.Types.Octet
  MyNetwork.AMQP.Types.PayloadSize
  MyNetwork.AMQP.Types.ShortInt
  MyNetwork.AMQP.Types.ShortString{MyNetwork.AMQP.Types.ShortString}
  MyNetwork.AMQP.Types.Timestamp
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 data-binary-ieee754-0.4.4
                      deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 text-1.2.3.1
orphans: text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Int f5d427cd3860d8572d1a4d519e117c0b
import  -/  base-4.11.1.0:Data.Typeable 9548bf378a98cc2492ab02d9a516a250
import  -/  base-4.11.1.0:Data.Typeable.Internal 0b0201144a992d956fd13a21fc2d4b48
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Char df8a8e058e3141ae6822492094eb6689
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.Int dbb9fa419302fe275e335328af678cb6
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Read b9e6d20d40da8c8a12b566d22e1160e0
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Word bc9bdf9b61a0f9352e5a1baeee5690a5
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.ParserCombinators.ReadPrec d0ebf984ed486435a97481288b73febb
import  -/  base-4.11.1.0:Text.Read.Lex f8ad6f9ae74ae325ba69a4fa5c82aaca
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Get 128c6b1e04dcd8453c5a7a652083702b
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal 1a063dbb1b51807d783806a64525f1eb
import  -/  binary-0.8.5.1:Data.Binary.Put 46413a3745068b8c82c5993962a4bce7
import  -/  bytestring-0.10.8.2:Data.ByteString 273248cbc494640ee3139e6d00588e9f
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal dc7d0c96ef45c703ca21607112260299
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Internal af245ead1f52eca50149d040b0b86693
import  -/  containers-0.5.11.0:Data.IntSet 2a2e516563abb136f0f0c2d3ef065529
import  -/  containers-0.5.11.0:Data.IntSet.Internal c967b4a43794bb3ae1eb622413871039
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  data-binary-ieee754-0.4.4:Data.Binary.IEEE754 9372a3f9f480c387c91e0029d9c15b22
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  text-1.2.3.1:Data.Text e8581f8e8ebc78d94a3747f354f0ee37
import  -/  text-1.2.3.1:Data.Text.Encoding 4f307d162133b7e1268d26d0f05f94d5
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
dcffc60a4c50a74e1c1768672520a6ba
  $fBinaryDecimalValue ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Types.DecimalValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.DecimalValue
                  MyNetwork.AMQP.Types.$fBinaryDecimalValue_$cput
                  MyNetwork.AMQP.Types.$fBinaryDecimalValue1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Types.DecimalValue>_R))
                  MyNetwork.AMQP.Types.$fBinaryDecimalValue_$sdefaultPutList -}
dcffc60a4c50a74e1c1768672520a6ba
  $fBinaryDecimalValue1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.DecimalValue r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Types.DecimalValue r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
b770c4225da70ed717a60426260e6ea8
  $fBinaryDecimalValue2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
fe92e14788c01313bd84e9d32f8a57a0
  $fBinaryDecimalValue3 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt2 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt2
                   MyNetwork.AMQP.Types.$fBinaryDecimalValue4 }) -}
de31d6c4269198b62c5795250780c941
  $fBinaryDecimalValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fBinaryDecimalValue5) -}
643fa1c40be8e9422aee11dad72e1af0
  $fBinaryDecimalValue5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
3610497d06cbc8d3d22f0e6b16c579b2
  $fBinaryDecimalValue6 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
bae541786a2185441e67c4b331cdda8f
  $fBinaryDecimalValue7 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt5 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt5))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
e04a9314c8195730b5582f216cce3f78
  $fBinaryDecimalValue8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fBinaryDecimalValue_$cput ::
    MyNetwork.AMQP.Types.DecimalValue -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case MyNetwork.AMQP.Types.$w$cput ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fBinaryDecimalValue_$sdefaultPutList ::
    [MyNetwork.AMQP.Types.DecimalValue] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Types.DecimalValue]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Types.DecimalValue
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Types.DecimalValue)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Types.DecimalValue
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Types.DecimalValue) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Types.$fBinaryDecimalValue_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Types.DecimalValue]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Types.FieldTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldTable
                  MyNetwork.AMQP.Types.$fBinaryFieldTable_$cput
                  MyNetwork.AMQP.Types.$fBinaryFieldTable4
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Types.FieldTable>_R))
                  MyNetwork.AMQP.Types.$fBinaryFieldTable_$sdefaultPutList -}
9b80f7cc2920e7cce09ecef4662a7f2d
  $fBinaryFieldTable1 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BufferRange
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U(U,U)><S,U> -}
56f6df8aa4481c2ecf9b1b2332131bfd
  $fBinaryFieldTable2 :: Data.Binary.Put.PairS ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Binary.Put.PairS
                   @ ()
                   GHC.Tuple.()
                   MyNetwork.AMQP.Types.$fBinaryFieldTable3
                     `cast`
                   (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) -}
f60d1c1b4e6d090cc173ecfcaa29274d
  $fBinaryFieldTable3 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ r
                   (cont :: Data.ByteString.Builder.Internal.BuildStep r)
                   (range :: Data.ByteString.Builder.Internal.BufferRange) ->
                 cont range) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable4 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.FieldTable r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Types.FieldTable r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cget1 @ r ww1 ww2 ww3 ww4 w1 }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable5 :: MyNetwork.AMQP.Types.FieldTable
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (MyNetwork.AMQP.Types.FieldTable
                   (Data.Map.Internal.Tip
                      @ Data.Text.Internal.Text
                      @ MyNetwork.AMQP.Types.FieldValue)) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable6 ::
    (MyNetwork.AMQP.Types.ShortString, MyNetwork.AMQP.Types.FieldValue)
    -> (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (MyNetwork.AMQP.Types.ShortString,
                           MyNetwork.AMQP.Types.FieldValue)) ->
                 case ds of wild { (,) ds1 b ->
                 (ds1 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]), b) }) -}
2b5866f1a73f66737e034df01468f894
  $fBinaryFieldTable7 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable8 ::
    Data.Binary.Get.Decoder
      [(MyNetwork.AMQP.Types.ShortString,
        MyNetwork.AMQP.Types.FieldValue)]
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ [(MyNetwork.AMQP.Types.ShortString,
                       MyNetwork.AMQP.Types.FieldValue)]
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ [(MyNetwork.AMQP.Types.ShortString,
                          MyNetwork.AMQP.Types.FieldValue)]
                      (MyNetwork.AMQP.Types.$wreadMany'
                         @ (MyNetwork.AMQP.Types.ShortString,
                            MyNetwork.AMQP.Types.FieldValue)
                         MyNetwork.AMQP.Types.$fBinaryFieldTable9
                         (GHC.Types.[]
                            @ (MyNetwork.AMQP.Types.ShortString,
                               MyNetwork.AMQP.Types.FieldValue))
                         0#
                         @ [(MyNetwork.AMQP.Types.ShortString,
                             MyNetwork.AMQP.Types.FieldValue)]
                         Data.ByteString.empty
                         (Data.Binary.Get.Internal.$WDone
                            @ [(MyNetwork.AMQP.Types.ShortString,
                                MyNetwork.AMQP.Types.FieldValue)])))
                   0#) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable9 ::
    Data.Binary.Class.Binary
      (MyNetwork.AMQP.Types.ShortString, MyNetwork.AMQP.Types.FieldValue)
  {- Unfolding: (Data.Binary.Class.$fBinary(,)
                   @ MyNetwork.AMQP.Types.ShortString
                   @ MyNetwork.AMQP.Types.FieldValue
                   MyNetwork.AMQP.Types.$fBinaryShortString
                   MyNetwork.AMQP.Types.$fBinaryFieldValue) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable_$cput ::
    MyNetwork.AMQP.Types.FieldTable -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.FieldTable) ->
                 case w of ww { MyNetwork.AMQP.Types.FieldTable ww1 ->
                 case MyNetwork.AMQP.Types.$w$cput1 ww1 of ww2 { (#,#) ww3 ww4 ->
                 (Data.Binary.Put.PairS @ () ww3 ww4)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable_$sdefaultPutList ::
    [MyNetwork.AMQP.Types.FieldTable] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Types.FieldTable]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Types.FieldTable
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Types.FieldTable)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Types.FieldTable
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Types.FieldTable) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Types.$fBinaryFieldTable_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Types.FieldTable]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
f7343d28e69c54346bd62d3902a7ab47
  $fBinaryFieldTable_$sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt2
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> MyNetwork.AMQP.Types.$fBinaryFieldTable7
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> MyNetwork.AMQP.Types.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldTable_go13 ::
    Data.Binary.Put.PutM ()
    -> Data.Map.Internal.Map
         Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> Data.Binary.Put.PutM ()
  {- Arity: 2, Strictness: <L,1*U(U,U)><S,1*U> -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldValue ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Types.FieldValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldValue
                  MyNetwork.AMQP.Types.$fBinaryFieldValue_$cput
                  MyNetwork.AMQP.Types.$fBinaryFieldValue1
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Types.FieldValue>_R))
                  MyNetwork.AMQP.Types.$fBinaryFieldValue_$sdefaultPutList -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldValue1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.FieldValue r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Types.FieldValue r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cget2 @ r ww1 ww2 ww3 ww4 w1 }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldValue_$cput ::
    MyNetwork.AMQP.Types.FieldValue -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$w$cput2 w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fBinaryFieldValue_$sdefaultPutList ::
    [MyNetwork.AMQP.Types.FieldValue] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Types.FieldValue]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Types.FieldValue
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Types.FieldValue)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Types.FieldValue
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Types.FieldValue) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Types.$fBinaryFieldValue_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Types.FieldValue]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
8934302af8d2d461daa104bfea132d7b
  $fBinaryLongString ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Types.LongString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.LongString
                  MyNetwork.AMQP.Types.$fBinaryLongString1
                    `cast`
                  (<MyNetwork.AMQP.Types.LongString>_R
                   ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                  MyNetwork.AMQP.Types.$fBinaryLongString2
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Types.LongString>_R))
                  MyNetwork.AMQP.Types.$fBinaryLongString_$sdefaultPutList -}
8934302af8d2d461daa104bfea132d7b
  $fBinaryLongString1 ::
    MyNetwork.AMQP.Types.LongString -> Data.Binary.Put.PairS ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.LongString) ->
                 case MyNetwork.AMQP.Types.$w$cput4 w of ww { (#,#) ww1 ww2 ->
                 Data.Binary.Put.PairS @ () ww1 ww2 }) -}
8934302af8d2d461daa104bfea132d7b
  $fBinaryLongString2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.LongString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Types.LongString r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cget4 @ r ww1 ww2 ww3 ww4 w1 }) -}
8934302af8d2d461daa104bfea132d7b
  $fBinaryLongString_$sdefaultPutList ::
    [MyNetwork.AMQP.Types.LongString] -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Types.LongString]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Types.LongString
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Types.LongString)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Types.LongString
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Types.LongString) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Types.$fBinaryLongString1 x)
                                    `cast`
                                  (Sym (Data.Binary.Put.N:PutM[0]) <()>_N))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Types.LongString]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
38cae7775dddc9d1315af9405a40993b
  $fBinaryShortString ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Types.ShortString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ShortString
                  MyNetwork.AMQP.Types.$fBinaryShortString_$cput
                  MyNetwork.AMQP.Types.$fBinaryShortString2
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Types.ShortString>_R))
                  MyNetwork.AMQP.Types.$fBinaryShortString_$sdefaultPutList -}
e01f74b705824324e80c0ff79172f065
  $fBinaryShortString1 :: Data.Binary.Put.Put
  {- Strictness: x -}
38cae7775dddc9d1315af9405a40993b
  $fBinaryShortString2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.ShortString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Types.ShortString r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cget3 @ r ww1 ww2 ww3 ww4 w1 }) -}
c3ad1130d5e667bec2864e56987d05d9
  $fBinaryShortString3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Encoding.$wdecodeUtf8With
                   Data.Text.Encoding.Error.strictDecode
                   __NULL
                   Data.ByteString.Internal.$fMonoidByteString1
                   0#
                   0#) -}
38cae7775dddc9d1315af9405a40993b
  $fBinaryShortString_$cput ::
    MyNetwork.AMQP.Types.ShortString -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.ShortString) ->
                 case w `cast`
                      (MyNetwork.AMQP.Types.N:ShortString[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case MyNetwork.AMQP.Types.$w$cput3
                        ww1
                        ww2
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 (Data.Binary.Put.PairS @ () ww5 ww6)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
38cae7775dddc9d1315af9405a40993b
  $fBinaryShortString_$sdefaultPutList ::
    [MyNetwork.AMQP.Types.ShortString] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Types.ShortString]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Types.ShortString
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Types.ShortString)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Types.ShortString
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Types.ShortString) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Types.$fBinaryShortString_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Types.ShortString]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fEqAMQPException ::
    GHC.Classes.Eq MyNetwork.AMQP.Types.AMQPException
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.AMQPException
                  MyNetwork.AMQP.Types.$fEqAMQPException_$c==
                  MyNetwork.AMQP.Types.$fEqAMQPException_$c/= -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fEqAMQPException_$c/= ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Types.AMQPException)
                   (y :: MyNetwork.AMQP.Types.AMQPException) ->
                 case MyNetwork.AMQP.Types.$fEqAMQPException_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fEqAMQPException_$c== ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MyNetwork.AMQP.Types.AMQPException)
                   (ds1 :: MyNetwork.AMQP.Types.AMQPException) ->
                 case ds of wild {
                   MyNetwork.AMQP.Types.ChannelClosedException a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Types.ChannelClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Base.eqString a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Base.eqString a2 b2 } } }
                   MyNetwork.AMQP.Types.ConnectionClosedException a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Types.ConnectionClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Base.eqString a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Base.eqString a2 b2 } } }
                   MyNetwork.AMQP.Types.AllChannelsAllocatedException a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Types.AllChannelsAllocatedException b1
                        -> GHC.Classes.eqInt a1 b1 } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fEqCloseType :: GHC.Classes.Eq MyNetwork.AMQP.Types.CloseType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.CloseType
                  MyNetwork.AMQP.Types.$fEqCloseType_$c==
                  MyNetwork.AMQP.Types.$fEqCloseType_$c/= -}
aa6a03fa60860e76928efb63e27e0f5b
  $fEqCloseType_$c/= ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Types.CloseType)
                   (y :: MyNetwork.AMQP.Types.CloseType) ->
                 case x of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case y of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.True }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case y of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.True
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fEqCloseType_$c== ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: MyNetwork.AMQP.Types.CloseType)
                   (ds1 :: MyNetwork.AMQP.Types.CloseType) ->
                 case ds of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case ds1 of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.True
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case ds1 of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.True } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fEqDecimalValue ::
    GHC.Classes.Eq MyNetwork.AMQP.Types.DecimalValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.DecimalValue
                  MyNetwork.AMQP.Types.$fEqDecimalValue_$c==
                  MyNetwork.AMQP.Types.$fEqDecimalValue_$c/= -}
dcffc60a4c50a74e1c1768672520a6ba
  $fEqDecimalValue_$c/= ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Types.DecimalValue)
                   (y :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case x of wild { MyNetwork.AMQP.Types.DecimalValue a1 a2 ->
                 case y of wild1 { MyNetwork.AMQP.Types.DecimalValue b1 b2 ->
                 case GHC.Word.eqWord8 a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Word.eqWord32 a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fEqDecimalValue_$c== ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 MyNetwork.AMQP.Types.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldTable :: GHC.Classes.Eq MyNetwork.AMQP.Types.FieldTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldTable
                  MyNetwork.AMQP.Types.$fEqFieldTable_$c==
                  MyNetwork.AMQP.Types.$fEqFieldTable_$c/= -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldTable_$c/= ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldTable)
                   (y :: MyNetwork.AMQP.Types.FieldTable) ->
                 case x of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case y of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ Data.Text.Internal.Text
                        @ MyNetwork.AMQP.Types.FieldValue
                        Data.Text.$fEqText
                        MyNetwork.AMQP.Types.$fEqFieldValue
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldTable_$c== ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: MyNetwork.AMQP.Types.FieldTable)
                   (ds1 :: MyNetwork.AMQP.Types.FieldTable) ->
                 case ds of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case ds1 of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 Data.Map.Internal.$fEqMap_$c==
                   @ Data.Text.Internal.Text
                   @ MyNetwork.AMQP.Types.FieldValue
                   Data.Text.$fEqText
                   MyNetwork.AMQP.Types.$fEqFieldValue
                   a1
                   b1 } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldValue :: GHC.Classes.Eq MyNetwork.AMQP.Types.FieldValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldValue
                  MyNetwork.AMQP.Types.$fEqFieldValue_$c==
                  MyNetwork.AMQP.Types.$fEqFieldValue_$c/= -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldValue_$c/= ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fEqFieldValue_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fEqFieldValue_$c== ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
8934302af8d2d461daa104bfea132d7b
  $fEqLongString :: GHC.Classes.Eq MyNetwork.AMQP.Types.LongString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.LongString
                  Data.ByteString.Internal.eq
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.ByteString.Internal.$fEqByteString_$c/=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R) -}
38cae7775dddc9d1315af9405a40993b
  $fEqShortString :: GHC.Classes.Eq MyNetwork.AMQP.Types.ShortString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ShortString
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException ::
    GHC.Exception.Exception MyNetwork.AMQP.Types.AMQPException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.AMQPException
                  MyNetwork.AMQP.Types.$fExceptionAMQPException3
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <MyNetwork.AMQP.Types.AMQPException>_N)
                  MyNetwork.AMQP.Types.$fShowAMQPException
                  MyNetwork.AMQP.Types.$fExceptionAMQPException_$ctoException
                  MyNetwork.AMQP.Types.$fExceptionAMQPException_$cfromException
                  MyNetwork.AMQP.Types.$fExceptionAMQPException_$cshow -}
27a3a1dd92c01988a058863b352ab970
  $fExceptionAMQPException1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ MyNetwork.AMQP.Types.AMQPException
                   MyNetwork.AMQP.Types.$fExceptionAMQPException3) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException3 ::
    Data.Typeable.Internal.TypeRep MyNetwork.AMQP.Types.AMQPException
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ MyNetwork.AMQP.Types.AMQPException
                        9577524936865705113##
                        2806689259075012##
                        MyNetwork.AMQP.Types.$trModule
                        MyNetwork.AMQP.Types.$fExceptionAMQPException4
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ MyNetwork.AMQP.Types.AMQPException
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
c33bf9e98ba89a39017d67fcc8dcc03a
  $fExceptionAMQPException4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$fExceptionAMQPException5) -}
324acad23c41c091b3f51cceeb7fe59e
  $fExceptionAMQPException5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AMQPException"#) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe MyNetwork.AMQP.Types.AMQPException
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: GHC.Exception.SomeException) ->
                 case ds of wild { GHC.Exception.SomeException e1 $dException1 e2 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e1
                        (GHC.Exception.$p1Exception @ e1 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case MyNetwork.AMQP.Types.$fExceptionAMQPException2 of wild2 { GHC.Fingerprint.Type.Fingerprint dt4 dt5 ->
                 case GHC.Prim.eqWord# dt2 dt4 of lwild {
                   DEFAULT -> GHC.Base.Nothing @ MyNetwork.AMQP.Types.AMQPException
                   1#
                   -> case GHC.Prim.eqWord# dt3 dt5 of lwild1 {
                        DEFAULT -> GHC.Base.Nothing @ MyNetwork.AMQP.Types.AMQPException
                        1#
                        -> (GHC.Base.Just @ e1 e2)
                             `cast`
                           (GHC.Base.Maybe
                              (UnsafeCo representational e1 MyNetwork.AMQP.Types.AMQPException))_R } } } } }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException_$cshow ::
    MyNetwork.AMQP.Types.AMQPException -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Types.AMQPException) ->
                 MyNetwork.AMQP.Types.$fExceptionAMQPException_$cshowsPrec
                   MyNetwork.AMQP.Types.$fExceptionAMQPException1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Types.AMQPException)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec ww1 w1 w2 }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fExceptionAMQPException_$ctoException ::
    MyNetwork.AMQP.Types.AMQPException -> GHC.Exception.SomeException
  {- Arity: 1 -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException ::
    GHC.Classes.Ord MyNetwork.AMQP.Types.AMQPException
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.AMQPException
                  MyNetwork.AMQP.Types.$fEqAMQPException
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$ccompare
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$c<
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$c<=
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$c>
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$c>=
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$cmax
                  MyNetwork.AMQP.Types.$fOrdAMQPException_$cmin -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$c< ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MyNetwork.AMQP.Types.AMQPException)
                   (b :: MyNetwork.AMQP.Types.AMQPException) ->
                 case a of wild {
                   MyNetwork.AMQP.Types.ChannelClosedException a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        MyNetwork.AMQP.Types.ChannelClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Classes.$fOrd[]_$s$c<1 a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.True }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                                  MyNetwork.AMQP.Types.Abnormal
                                  -> GHC.Classes.$fOrd[]_$s$c<1 a2 b2 } } }
                   MyNetwork.AMQP.Types.ConnectionClosedException a1 a2
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.ChannelClosedException ds ds1
                        -> GHC.Types.False
                        MyNetwork.AMQP.Types.ConnectionClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Classes.$fOrd[]_$s$c<1 a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.True }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                                  MyNetwork.AMQP.Types.Abnormal
                                  -> GHC.Classes.$fOrd[]_$s$c<1 a2 b2 } }
                        MyNetwork.AMQP.Types.AllChannelsAllocatedException ipv
                        -> GHC.Types.True }
                   MyNetwork.AMQP.Types.AllChannelsAllocatedException a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Types.AllChannelsAllocatedException b1
                        -> GHC.Classes.ltInt a1 b1 } }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$c<= ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.AMQPException)
                   (b :: MyNetwork.AMQP.Types.AMQPException) ->
                 case MyNetwork.AMQP.Types.$fOrdAMQPException_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$c> ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Types.AMQPException)
                   (b :: MyNetwork.AMQP.Types.AMQPException) ->
                 MyNetwork.AMQP.Types.$fOrdAMQPException_$c< b a) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$c>= ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.AMQPException)
                   (b :: MyNetwork.AMQP.Types.AMQPException) ->
                 case MyNetwork.AMQP.Types.$fOrdAMQPException_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$ccompare ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MyNetwork.AMQP.Types.AMQPException)
                   (b :: MyNetwork.AMQP.Types.AMQPException) ->
                 case a of wild {
                   MyNetwork.AMQP.Types.ChannelClosedException a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        MyNetwork.AMQP.Types.ChannelClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal
                                  -> GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.LT }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.GT
                                  MyNetwork.AMQP.Types.Abnormal
                                  -> GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2 } } }
                   MyNetwork.AMQP.Types.ConnectionClosedException a1 a2
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.ChannelClosedException ds ds1 -> GHC.Types.GT
                        MyNetwork.AMQP.Types.ConnectionClosedException b1 b2
                        -> case a1 of wild2 {
                             MyNetwork.AMQP.Types.Normal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal
                                  -> GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2
                                  MyNetwork.AMQP.Types.Abnormal -> GHC.Types.LT }
                             MyNetwork.AMQP.Types.Abnormal
                             -> case b1 of wild3 {
                                  MyNetwork.AMQP.Types.Normal -> GHC.Types.GT
                                  MyNetwork.AMQP.Types.Abnormal
                                  -> GHC.Classes.$fOrd[]_$s$ccompare1 a2 b2 } }
                        MyNetwork.AMQP.Types.AllChannelsAllocatedException ipv
                        -> GHC.Types.LT }
                   MyNetwork.AMQP.Types.AllChannelsAllocatedException a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        MyNetwork.AMQP.Types.AllChannelsAllocatedException b1
                        -> GHC.Classes.compareInt a1 b1 } }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$cmax ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.AMQPException)
                   (y :: MyNetwork.AMQP.Types.AMQPException) ->
                 case MyNetwork.AMQP.Types.$fOrdAMQPException_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fOrdAMQPException_$cmin ::
    MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException
    -> MyNetwork.AMQP.Types.AMQPException
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.AMQPException)
                   (y :: MyNetwork.AMQP.Types.AMQPException) ->
                 case MyNetwork.AMQP.Types.$fOrdAMQPException_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType :: GHC.Classes.Ord MyNetwork.AMQP.Types.CloseType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.CloseType
                  MyNetwork.AMQP.Types.$fEqCloseType
                  MyNetwork.AMQP.Types.$fOrdCloseType_$ccompare
                  MyNetwork.AMQP.Types.$fOrdCloseType_$c<
                  MyNetwork.AMQP.Types.$fOrdCloseType_$c<=
                  MyNetwork.AMQP.Types.$fOrdCloseType_$c>
                  MyNetwork.AMQP.Types.$fOrdCloseType_$c>=
                  MyNetwork.AMQP.Types.$fOrdCloseType_$cmax
                  MyNetwork.AMQP.Types.$fOrdCloseType_$cmin -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$c< ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.CloseType)
                   (b :: MyNetwork.AMQP.Types.CloseType) ->
                 case a of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.False
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.True }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$c<= ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.CloseType)
                   (b :: MyNetwork.AMQP.Types.CloseType) ->
                 case b of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case a of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.True
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$c> ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Types.CloseType)
                   (b :: MyNetwork.AMQP.Types.CloseType) ->
                 MyNetwork.AMQP.Types.$fOrdCloseType_$c< b a) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$c>= ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.CloseType)
                   (b :: MyNetwork.AMQP.Types.CloseType) ->
                 case a of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.True
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.False }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$ccompare ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.CloseType)
                   (b :: MyNetwork.AMQP.Types.CloseType) ->
                 case a of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.EQ
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.LT }
                   MyNetwork.AMQP.Types.Abnormal
                   -> case b of wild1 {
                        MyNetwork.AMQP.Types.Normal -> GHC.Types.GT
                        MyNetwork.AMQP.Types.Abnormal -> GHC.Types.EQ } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$cmax ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> MyNetwork.AMQP.Types.CloseType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.CloseType)
                   (y :: MyNetwork.AMQP.Types.CloseType) ->
                 case y of wild {
                   MyNetwork.AMQP.Types.Normal -> x
                   MyNetwork.AMQP.Types.Abnormal
                   -> case x of wild1 { DEFAULT ->
                      MyNetwork.AMQP.Types.Abnormal } }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fOrdCloseType_$cmin ::
    MyNetwork.AMQP.Types.CloseType
    -> MyNetwork.AMQP.Types.CloseType -> MyNetwork.AMQP.Types.CloseType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.CloseType)
                   (y :: MyNetwork.AMQP.Types.CloseType) ->
                 case y of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> case x of wild1 { DEFAULT -> MyNetwork.AMQP.Types.Normal }
                   MyNetwork.AMQP.Types.Abnormal -> x }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue ::
    GHC.Classes.Ord MyNetwork.AMQP.Types.DecimalValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.DecimalValue
                  MyNetwork.AMQP.Types.$fEqDecimalValue
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$ccompare
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$c<
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$c<=
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$c>
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$c>=
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$cmax
                  MyNetwork.AMQP.Types.$fOrdDecimalValue_$cmin -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$c< ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 MyNetwork.AMQP.Types.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$c<= ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 MyNetwork.AMQP.Types.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$c> ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Types.DecimalValue)
                   (b :: MyNetwork.AMQP.Types.DecimalValue) ->
                 MyNetwork.AMQP.Types.$fOrdDecimalValue_$c< b a) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$c>= ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 MyNetwork.AMQP.Types.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$ccompare ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 MyNetwork.AMQP.Types.$w$ccompare ww4 ww2 ww9 ww7 } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$cmax ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 case GHC.Prim.eqWord# ww9 ww4 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww9 ww4 of lwild1 {
                        DEFAULT -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww9) ww7
                        1# -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww4) ww2 }
                   1#
                   -> case ww7 of wild { GHC.Word.W32# x ->
                      case ww2 of wild1 { GHC.Word.W32# y ->
                      case GHC.Prim.ltWord# x y of lwild1 {
                        DEFAULT
                        -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww9) wild
                        1#
                        -> MyNetwork.AMQP.Types.DecimalValue
                             (GHC.Word.W8# ww4)
                             wild1 } } } } } } } }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fOrdDecimalValue_$cmin ::
    MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue
    -> MyNetwork.AMQP.Types.DecimalValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 case ww1 of ww3 { GHC.Word.W8# ww4 ->
                 case w1 of ww5 { MyNetwork.AMQP.Types.DecimalValue ww6 ww7 ->
                 case ww6 of ww8 { GHC.Word.W8# ww9 ->
                 case GHC.Prim.eqWord# ww9 ww4 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww9 ww4 of lwild1 {
                        DEFAULT -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww4) ww2
                        1# -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww9) ww7 }
                   1#
                   -> case ww7 of wild { GHC.Word.W32# x ->
                      case ww2 of wild1 { GHC.Word.W32# y ->
                      case GHC.Prim.ltWord# x y of lwild1 {
                        DEFAULT
                        -> MyNetwork.AMQP.Types.DecimalValue (GHC.Word.W8# ww4) wild1
                        1#
                        -> MyNetwork.AMQP.Types.DecimalValue
                             (GHC.Word.W8# ww9)
                             wild } } } } } } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable :: GHC.Classes.Ord MyNetwork.AMQP.Types.FieldTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldTable
                  MyNetwork.AMQP.Types.$fEqFieldTable
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$ccompare
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$c<
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$c<=
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$c>
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$c>=
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$cmax
                  MyNetwork.AMQP.Types.$fOrdFieldTable_$cmin -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable1 ::
    GHC.Classes.Ord
      (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ Data.Text.Internal.Text
                   @ MyNetwork.AMQP.Types.FieldValue
                   Data.Text.$fOrdText
                   MyNetwork.AMQP.Types.$fOrdFieldValue) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$c< ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.FieldTable)
                   (b :: MyNetwork.AMQP.Types.FieldTable) ->
                 case a of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case b of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 Data.Map.Internal.$fOrdMap_$c<
                   @ Data.Text.Internal.Text
                   @ MyNetwork.AMQP.Types.FieldValue
                   Data.Text.$fOrdText
                   MyNetwork.AMQP.Types.$fOrdFieldValue
                   a1
                   b1 } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$c<= ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.FieldTable)
                   (b :: MyNetwork.AMQP.Types.FieldTable) ->
                 case b of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case a of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 case Data.Map.Internal.$fOrdMap_$c<
                        @ Data.Text.Internal.Text
                        @ MyNetwork.AMQP.Types.FieldValue
                        Data.Text.$fOrdText
                        MyNetwork.AMQP.Types.$fOrdFieldValue
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$c> ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Types.FieldTable)
                   (b :: MyNetwork.AMQP.Types.FieldTable) ->
                 MyNetwork.AMQP.Types.$fOrdFieldTable_$c< b a) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$c>= ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Types.FieldTable)
                   (b :: MyNetwork.AMQP.Types.FieldTable) ->
                 case a of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case b of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 case Data.Map.Internal.$fOrdMap_$c<
                        @ Data.Text.Internal.Text
                        @ MyNetwork.AMQP.Types.FieldValue
                        Data.Text.$fOrdText
                        MyNetwork.AMQP.Types.$fOrdFieldValue
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$ccompare ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Types.FieldTable)
                   (w1 :: MyNetwork.AMQP.Types.FieldTable) ->
                 case w of ww { MyNetwork.AMQP.Types.FieldTable ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Types.FieldTable ww3 ->
                 MyNetwork.AMQP.Types.$w$ccompare1 ww1 ww3 } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$cmax ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldTable)
                   (y :: MyNetwork.AMQP.Types.FieldTable) ->
                 case y of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case x of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 case Data.Map.Internal.$fOrdMap_$c<
                        @ Data.Text.Internal.Text
                        @ MyNetwork.AMQP.Types.FieldValue
                        Data.Text.$fOrdText
                        MyNetwork.AMQP.Types.$fOrdFieldValue
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldTable_$cmin ::
    MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable
    -> MyNetwork.AMQP.Types.FieldTable
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldTable)
                   (y :: MyNetwork.AMQP.Types.FieldTable) ->
                 case y of wild { MyNetwork.AMQP.Types.FieldTable a1 ->
                 case x of wild1 { MyNetwork.AMQP.Types.FieldTable b1 ->
                 case Data.Map.Internal.$fOrdMap_$c<
                        @ Data.Text.Internal.Text
                        @ MyNetwork.AMQP.Types.FieldValue
                        Data.Text.$fOrdText
                        MyNetwork.AMQP.Types.$fOrdFieldValue
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue :: GHC.Classes.Ord MyNetwork.AMQP.Types.FieldValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldValue
                  MyNetwork.AMQP.Types.$fEqFieldValue
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$c<
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$c<=
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$c>
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$c>=
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$cmax
                  MyNetwork.AMQP.Types.$fOrdFieldValue_$cmin -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$c< ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$c<= ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$c> ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$c>= ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$ccompare ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$cmax ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fOrdFieldValue_$cmin ::
    MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue
    -> MyNetwork.AMQP.Types.FieldValue
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue)
                   (y :: MyNetwork.AMQP.Types.FieldValue) ->
                 case MyNetwork.AMQP.Types.$fOrdFieldValue_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
8934302af8d2d461daa104bfea132d7b
  $fOrdLongString :: GHC.Classes.Ord MyNetwork.AMQP.Types.LongString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.LongString
                  MyNetwork.AMQP.Types.$fEqLongString
                  Data.ByteString.Internal.compareBytes
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Data.ByteString.Internal.$fOrdByteString_$c<
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.ByteString.Internal.$fOrdByteString_$c<=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.ByteString.Internal.$fOrdByteString_$c>
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.ByteString.Internal.$fOrdByteString_$c>=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.ByteString.Internal.$fOrdByteString_$cmax
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0]))
                  Data.ByteString.Internal.$fOrdByteString_$cmin
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:LongString[0])) -}
38cae7775dddc9d1315af9405a40993b
  $fOrdShortString ::
    GHC.Classes.Ord MyNetwork.AMQP.Types.ShortString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ShortString
                  MyNetwork.AMQP.Types.$fEqShortString
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])
                   ->_R Sym (MyNetwork.AMQP.Types.N:ShortString[0])) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue ::
    GHC.Read.Read MyNetwork.AMQP.Types.DecimalValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.DecimalValue
                  MyNetwork.AMQP.Types.$fReadDecimalValue_$creadsPrec
                  MyNetwork.AMQP.Types.$fReadDecimalValue_$creadList
                  MyNetwork.AMQP.Types.$fReadDecimalValue1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Types.DecimalValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <MyNetwork.AMQP.Types.DecimalValue>_R))
                  MyNetwork.AMQP.Types.$fReadDecimalValue_$creadListPrec -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.DecimalValue
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Types.DecimalValue
                   MyNetwork.AMQP.Types.$fReadDecimalValue2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.DecimalValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                      <MyNetwork.AMQP.Types.DecimalValue>_R))) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.DecimalValue
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$creadPrec ww1 @ b w1 }) -}
21aa1bd244424b4ef917a51f2b9c7533
  $fReadDecimalValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fReadDecimalValue4) -}
fc207d3db3e7b3f0eb850ea70ba6dedc
  $fReadDecimalValue4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DecimalValue"#) -}
bd992a439c06dee90878025dfbbb427e
  $fReadDecimalValue5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   MyNetwork.AMQP.Types.$fReadDecimalValue6
                   @ GHC.Types.Int
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ GHC.Types.Int)) -}
fd0262789566782415c21c99c3a2553b
  $fReadDecimalValue6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue7 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Types.DecimalValue]
  {- Unfolding: ((MyNetwork.AMQP.Types.$fReadDecimalValue_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Types.DecimalValue]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Types.DecimalValue]>_R)
                   @ [MyNetwork.AMQP.Types.DecimalValue]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Types.DecimalValue])) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Types.DecimalValue]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Types.DecimalValue]
                   MyNetwork.AMQP.Types.$fReadDecimalValue7) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Types.DecimalValue]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Types.DecimalValue
                   MyNetwork.AMQP.Types.$fReadDecimalValue1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.DecimalValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                      <MyNetwork.AMQP.Types.DecimalValue>_R))) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fReadDecimalValue_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Types.DecimalValue
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Types.DecimalValue
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Types.DecimalValue
                      MyNetwork.AMQP.Types.$fReadDecimalValue2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Types.DecimalValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                         <MyNetwork.AMQP.Types.DecimalValue>_R))
                      n
                      @ MyNetwork.AMQP.Types.DecimalValue
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Types.DecimalValue))) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable :: GHC.Read.Read MyNetwork.AMQP.Types.FieldTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldTable
                  MyNetwork.AMQP.Types.$fReadFieldTable_$creadsPrec
                  MyNetwork.AMQP.Types.$fReadFieldTable_$creadList
                  MyNetwork.AMQP.Types.$fReadFieldTable1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Types.FieldTable>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                   <MyNetwork.AMQP.Types.FieldTable>_R))
                  MyNetwork.AMQP.Types.$fReadFieldTable_$creadListPrec -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.FieldTable
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Types.FieldTable
                   MyNetwork.AMQP.Types.$fReadFieldTable2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.FieldTable>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.FieldTable>_R))) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.FieldTable
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Types.FieldTable
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$creadPrec1 ww1 @ b w1 }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable3 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Types.FieldTable]
  {- Unfolding: ((MyNetwork.AMQP.Types.$fReadFieldTable_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Types.FieldTable]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Types.FieldTable]>_R)
                   @ [MyNetwork.AMQP.Types.FieldTable]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Types.FieldTable])) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Types.FieldTable]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Types.FieldTable]
                   MyNetwork.AMQP.Types.$fReadFieldTable3) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Types.FieldTable]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Types.FieldTable
                   MyNetwork.AMQP.Types.$fReadFieldTable1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.FieldTable>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.FieldTable>_R))) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldTable_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Types.FieldTable
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Types.FieldTable
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Types.FieldTable
                      MyNetwork.AMQP.Types.$fReadFieldTable2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Types.FieldTable>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                       <MyNetwork.AMQP.Types.FieldTable>_R))
                      n
                      @ MyNetwork.AMQP.Types.FieldTable
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Types.FieldTable))) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue :: GHC.Read.Read MyNetwork.AMQP.Types.FieldValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldValue
                  MyNetwork.AMQP.Types.$fReadFieldValue_$creadsPrec
                  MyNetwork.AMQP.Types.$fReadFieldValue_$creadList
                  MyNetwork.AMQP.Types.$fReadFieldValue1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Types.FieldValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                   <MyNetwork.AMQP.Types.FieldValue>_R))
                  MyNetwork.AMQP.Types.$fReadFieldValue_$creadListPrec -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.FieldValue
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2 -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue2 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Types.FieldValue]
  {- Unfolding: ((MyNetwork.AMQP.Types.$fReadFieldValue_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Types.FieldValue]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Types.FieldValue]>_R)
                   @ [MyNetwork.AMQP.Types.FieldValue]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Types.FieldValue])) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Types.FieldValue]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Types.FieldValue]
                   MyNetwork.AMQP.Types.$fReadFieldValue2) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Types.FieldValue]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Types.FieldValue
                   MyNetwork.AMQP.Types.$fReadFieldValue1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.FieldValue>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.FieldValue>_R))) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fReadFieldValue_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Types.FieldValue
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Types.FieldValue
                   (MyNetwork.AMQP.Types.$fReadFieldValue1
                      n
                      @ MyNetwork.AMQP.Types.FieldValue
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Types.FieldValue))) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString :: GHC.Read.Read MyNetwork.AMQP.Types.LongString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.LongString
                  MyNetwork.AMQP.Types.$fReadLongString_$creadsPrec
                  MyNetwork.AMQP.Types.$fReadLongString_$creadList
                  MyNetwork.AMQP.Types.$fReadLongString1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Types.LongString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                   <MyNetwork.AMQP.Types.LongString>_R))
                  MyNetwork.AMQP.Types.$fReadLongString_$creadListPrec -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.LongString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Types.LongString
                   MyNetwork.AMQP.Types.$fReadLongString2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.LongString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.LongString>_R))) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.LongString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Types.LongString
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$creadPrec2 ww1 @ b w1 }) -}
61abee62f4b2dc03295d851a66e8ab1f
  $fReadLongString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fReadLongString4) -}
fadeea299cd87a080b7027da82370959
  $fReadLongString4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LongString"#) -}
3c6d758a5f851f7f2215e962607914b4
  $fReadLongString5 ::
    Text.ParserCombinators.ReadP.P [GHC.Types.Char]
  {- Unfolding: (GHC.Read.$fRead()6
                   @ GHC.Base.String
                   GHC.Read.$fReadChar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <GHC.Base.String>_R))
                   MyNetwork.AMQP.Types.$fReadDecimalValue6
                   @ [GHC.Types.Char]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [GHC.Types.Char])) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString6 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Types.LongString]
  {- Unfolding: ((MyNetwork.AMQP.Types.$fReadLongString_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Types.LongString]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Types.LongString]>_R)
                   @ [MyNetwork.AMQP.Types.LongString]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Types.LongString])) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Types.LongString]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Types.LongString]
                   MyNetwork.AMQP.Types.$fReadLongString6) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Types.LongString]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Types.LongString
                   MyNetwork.AMQP.Types.$fReadLongString1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.LongString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.LongString>_R))) -}
8934302af8d2d461daa104bfea132d7b
  $fReadLongString_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Types.LongString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Types.LongString
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Types.LongString
                      MyNetwork.AMQP.Types.$fReadLongString2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Types.LongString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                       <MyNetwork.AMQP.Types.LongString>_R))
                      n
                      @ MyNetwork.AMQP.Types.LongString
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Types.LongString))) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString :: GHC.Read.Read MyNetwork.AMQP.Types.ShortString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ShortString
                  MyNetwork.AMQP.Types.$fReadShortString_$creadsPrec
                  MyNetwork.AMQP.Types.$fReadShortString_$creadList
                  MyNetwork.AMQP.Types.$fReadShortString1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Types.ShortString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Types.ShortString>_R))
                  MyNetwork.AMQP.Types.$fReadShortString_$creadListPrec -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.ShortString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Types.ShortString
                   MyNetwork.AMQP.Types.$fReadShortString2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.ShortString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <MyNetwork.AMQP.Types.ShortString>_R))) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Types.ShortString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Types.ShortString
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$creadPrec3 ww1 @ b w1 }) -}
23b7c03afef82aa43646928dd23f2943
  $fReadShortString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fReadShortString4) -}
26470f204edb96cf9675b360f15d02ec
  $fReadShortString4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ShortString"#) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString5 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Types.ShortString]
  {- Unfolding: ((MyNetwork.AMQP.Types.$fReadShortString_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Types.ShortString]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Types.ShortString]>_R)
                   @ [MyNetwork.AMQP.Types.ShortString]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Types.ShortString])) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Types.ShortString]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Types.ShortString]
                   MyNetwork.AMQP.Types.$fReadShortString5) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Types.ShortString]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Types.ShortString
                   MyNetwork.AMQP.Types.$fReadShortString1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Types.ShortString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                     <MyNetwork.AMQP.Types.ShortString>_R))) -}
38cae7775dddc9d1315af9405a40993b
  $fReadShortString_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Types.ShortString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Types.ShortString
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Types.ShortString
                      MyNetwork.AMQP.Types.$fReadShortString2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Types.ShortString>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <MyNetwork.AMQP.Types.ShortString>_R))
                      n
                      @ MyNetwork.AMQP.Types.ShortString
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Types.ShortString))) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fShowAMQPException ::
    GHC.Show.Show MyNetwork.AMQP.Types.AMQPException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.AMQPException
                  MyNetwork.AMQP.Types.$fExceptionAMQPException_$cshowsPrec
                  MyNetwork.AMQP.Types.$fExceptionAMQPException_$cshow
                  MyNetwork.AMQP.Types.$fShowAMQPException_$cshowList -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fShowAMQPException1 ::
    MyNetwork.AMQP.Types.AMQPException -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.AMQPException)
                   (w1 :: GHC.Base.String) ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec 0# w w1) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $fShowAMQPException_$cshowList ::
    [MyNetwork.AMQP.Types.AMQPException] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.AMQPException])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.AMQPException
                   MyNetwork.AMQP.Types.$fShowAMQPException1
                   ls
                   s) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fShowCloseType :: GHC.Show.Show MyNetwork.AMQP.Types.CloseType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.CloseType
                  MyNetwork.AMQP.Types.$fShowCloseType_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowCloseType_$cshow
                  MyNetwork.AMQP.Types.$fShowCloseType_$cshowList -}
aa6a03fa60860e76928efb63e27e0f5b
  $fShowCloseType1 ::
    MyNetwork.AMQP.Types.CloseType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: MyNetwork.AMQP.Types.CloseType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Types.$fShowCloseType4)
                        eta
                   MyNetwork.AMQP.Types.Abnormal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Types.$fShowCloseType2)
                        eta }) -}
2d9358c718d48edc385eac11941ffe13
  $fShowCloseType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fShowCloseType3) -}
ae0ce2dff44673f258379af727b662c2
  $fShowCloseType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Abnormal"#) -}
ad8f25c87e758feedb75cf8f3c02c2e8
  $fShowCloseType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fShowCloseType5) -}
58198b16e86b0e152942b77291de4407
  $fShowCloseType5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Normal"#) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fShowCloseType_$cshow ::
    MyNetwork.AMQP.Types.CloseType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Types.CloseType) ->
                 case x of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> MyNetwork.AMQP.Types.$fShowCloseType4
                   MyNetwork.AMQP.Types.Abnormal
                   -> MyNetwork.AMQP.Types.$fShowCloseType2 }) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fShowCloseType_$cshowList ::
    [MyNetwork.AMQP.Types.CloseType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.CloseType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.CloseType
                   MyNetwork.AMQP.Types.$fShowCloseType1
                   ls
                   s) -}
aa6a03fa60860e76928efb63e27e0f5b
  $fShowCloseType_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Types.CloseType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: MyNetwork.AMQP.Types.CloseType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   MyNetwork.AMQP.Types.Normal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Types.$fShowCloseType4)
                        eta
                   MyNetwork.AMQP.Types.Abnormal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Types.$fShowCloseType2)
                        eta }) -}
f4d3a18c700ab8b31645d417c7e08348
  $fShowConfirmationResult ::
    GHC.Show.Show MyNetwork.AMQP.Types.ConfirmationResult
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ConfirmationResult
                  MyNetwork.AMQP.Types.$fShowConfirmationResult_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowConfirmationResult_$cshow
                  MyNetwork.AMQP.Types.$fShowConfirmationResult_$cshowList -}
f4d3a18c700ab8b31645d417c7e08348
  $fShowConfirmationResult1 ::
    MyNetwork.AMQP.Types.ConfirmationResult -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.ConfirmationResult)
                   (w1 :: GHC.Base.String) ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec1 0# w w1) -}
f4d3a18c700ab8b31645d417c7e08348
  $fShowConfirmationResult_$cshow ::
    MyNetwork.AMQP.Types.ConfirmationResult -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Types.ConfirmationResult) ->
                 MyNetwork.AMQP.Types.$fShowConfirmationResult_$cshowsPrec
                   MyNetwork.AMQP.Types.$fExceptionAMQPException1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f4d3a18c700ab8b31645d417c7e08348
  $fShowConfirmationResult_$cshowList ::
    [MyNetwork.AMQP.Types.ConfirmationResult] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.ConfirmationResult])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.ConfirmationResult
                   MyNetwork.AMQP.Types.$fShowConfirmationResult1
                   ls
                   s) -}
f4d3a18c700ab8b31645d417c7e08348
  $fShowConfirmationResult_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Types.ConfirmationResult -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Types.ConfirmationResult)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec1 ww1 w1 w2 }) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fShowDecimalValue ::
    GHC.Show.Show MyNetwork.AMQP.Types.DecimalValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.DecimalValue
                  MyNetwork.AMQP.Types.$fShowDecimalValue_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowDecimalValue_$cshow
                  MyNetwork.AMQP.Types.$fShowDecimalValue_$cshowList -}
dcffc60a4c50a74e1c1768672520a6ba
  $fShowDecimalValue1 ::
    MyNetwork.AMQP.Types.DecimalValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U),1*U(U))><L,U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.DecimalValue)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { MyNetwork.AMQP.Types.DecimalValue ww1 ww2 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
e15014c6c981932fd54ad47d2a65eb60
  $fShowDecimalValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fShowDecimalValue3) -}
4c54fadacd8f8cddb049ec561539b094
  $fShowDecimalValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DecimalValue "#) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fShowDecimalValue_$cshow ::
    MyNetwork.AMQP.Types.DecimalValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Types.DecimalValue) ->
                 MyNetwork.AMQP.Types.$fShowDecimalValue_$cshowsPrec
                   MyNetwork.AMQP.Types.$fExceptionAMQPException1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fShowDecimalValue_$cshowList ::
    [MyNetwork.AMQP.Types.DecimalValue] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.DecimalValue])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.DecimalValue
                   MyNetwork.AMQP.Types.$fShowDecimalValue1
                   ls
                   s) -}
dcffc60a4c50a74e1c1768672520a6ba
  $fShowDecimalValue_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Types.DecimalValue -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Types.DecimalValue)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Types.DecimalValue ww3 ww4 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldTable :: GHC.Show.Show MyNetwork.AMQP.Types.FieldTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldTable
                  MyNetwork.AMQP.Types.$fShowFieldTable_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowFieldTable_$cshow
                  MyNetwork.AMQP.Types.$fShowFieldTable_$cshowList -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldTable1 ::
    MyNetwork.AMQP.Types.FieldTable -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.FieldTable) ->
                 case w of ww { MyNetwork.AMQP.Types.FieldTable ww1 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec3 0# ww1 }) -}
b27dce366f3abc06d782f8755574a191
  $fShowFieldTable2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Types.$fShowFieldTable3) -}
6abf5f307fb1ed11c48c2345d871c54e
  $fShowFieldTable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldTable "#) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldTable_$cshow ::
    MyNetwork.AMQP.Types.FieldTable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.FieldTable) ->
                 case w of ww { MyNetwork.AMQP.Types.FieldTable ww1 ->
                 MyNetwork.AMQP.Types.$w$cshow ww1 }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldTable_$cshowList ::
    [MyNetwork.AMQP.Types.FieldTable] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.FieldTable])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.FieldTable
                   MyNetwork.AMQP.Types.$fShowFieldTable1
                   ls
                   s) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldTable_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Types.FieldTable -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.Types.FieldTable) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Types.FieldTable ww3 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec3 ww1 ww3 } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldValue :: GHC.Show.Show MyNetwork.AMQP.Types.FieldValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.FieldValue
                  MyNetwork.AMQP.Types.$fShowFieldValue_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowFieldValue_$cshow
                  MyNetwork.AMQP.Types.$fShowFieldValue_$cshowList -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldValue1 ::
    MyNetwork.AMQP.Types.FieldValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (MyNetwork.AMQP.Types.$fShowFieldValue_$cshowsPrec
                   MyNetwork.AMQP.Types.$fExceptionAMQPException1) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldValue_$cshow ::
    MyNetwork.AMQP.Types.FieldValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Types.FieldValue) ->
                 MyNetwork.AMQP.Types.$fShowFieldValue_$cshowsPrec
                   MyNetwork.AMQP.Types.$fExceptionAMQPException1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldValue_$cshowList ::
    [MyNetwork.AMQP.Types.FieldValue] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.FieldValue])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.FieldValue
                   MyNetwork.AMQP.Types.$fShowFieldValue1
                   ls
                   s) -}
e2dab219ac237204a5b8f05eb2c223b2
  $fShowFieldValue_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Types.FieldValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
8934302af8d2d461daa104bfea132d7b
  $fShowLongString :: GHC.Show.Show MyNetwork.AMQP.Types.LongString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.LongString
                  MyNetwork.AMQP.Types.$fShowLongString_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowLongString_$cshow
                  MyNetwork.AMQP.Types.$fShowLongString_$cshowList -}
8934302af8d2d461daa104bfea132d7b
  $fShowLongString1 ::
    MyNetwork.AMQP.Types.LongString -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.LongString) ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec4 0# w) -}
8dbb072b91ebc0fe356f34ee0703f7a3
  $fShowLongString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LongString "#) -}
e56e764958942d18d2bfde1f81c30081
  $fShowLongString3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8934302af8d2d461daa104bfea132d7b
  $fShowLongString_$cshow ::
    MyNetwork.AMQP.Types.LongString -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: (\ (x :: MyNetwork.AMQP.Types.LongString) ->
                 GHC.CString.unpackAppendCString#
                   MyNetwork.AMQP.Types.$fShowLongString2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (case x `cast`
                            (MyNetwork.AMQP.Types.N:LongString[0]) of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                       GHC.Show.showLitString
                         (Data.ByteString.Internal.$wunpackAppendCharsLazy
                            ww1
                            ww2
                            ww3
                            ww4
                            (GHC.Types.[] @ GHC.Types.Char))
                         MyNetwork.AMQP.Types.$fShowLongString3 }))) -}
8934302af8d2d461daa104bfea132d7b
  $fShowLongString_$cshowList ::
    [MyNetwork.AMQP.Types.LongString] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.LongString])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.LongString
                   MyNetwork.AMQP.Types.$fShowLongString1
                   ls
                   s) -}
8934302af8d2d461daa104bfea132d7b
  $fShowLongString_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Types.LongString -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.Types.LongString) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec4 ww1 w1 }) -}
38cae7775dddc9d1315af9405a40993b
  $fShowShortString :: GHC.Show.Show MyNetwork.AMQP.Types.ShortString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Types.ShortString
                  MyNetwork.AMQP.Types.$fShowShortString_$cshowsPrec
                  MyNetwork.AMQP.Types.$fShowShortString_$cshow
                  MyNetwork.AMQP.Types.$fShowShortString_$cshowList -}
38cae7775dddc9d1315af9405a40993b
  $fShowShortString1 ::
    MyNetwork.AMQP.Types.ShortString -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.ShortString)
                   (w1 :: GHC.Base.String) ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec5 0# w w1) -}
578444a58a316cf6dfb6a0e8ee666e8a
  $fShowShortString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ShortString "#) -}
38cae7775dddc9d1315af9405a40993b
  $fShowShortString_$cshow ::
    MyNetwork.AMQP.Types.ShortString -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (x :: MyNetwork.AMQP.Types.ShortString) ->
                 GHC.CString.unpackAppendCString#
                   MyNetwork.AMQP.Types.$fShowShortString2
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (MyNetwork.AMQP.Types.N:ShortString[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
38cae7775dddc9d1315af9405a40993b
  $fShowShortString_$cshowList ::
    [MyNetwork.AMQP.Types.ShortString] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Types.ShortString])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Types.ShortString
                   MyNetwork.AMQP.Types.$fShowShortString1
                   ls
                   s) -}
38cae7775dddc9d1315af9405a40993b
  $fShowShortString_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Types.ShortString -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Types.ShortString)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Types.$w$cshowsPrec5 ww1 w1 w2 }) -}
bc81e308d5a1077bb53b554ec6dd4d40
  $tc'Abnormal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11049537821071342368##
                   15462938416671864341##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'Abnormal2
                   0#
                   MyNetwork.AMQP.Types.$tc'Abnormal1) -}
0da0dad88123be30f662a704e32a7cad
  $tc'Abnormal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
2c6767675a5b161d97e640ca44e9f3b7
  $tc'Abnormal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'Abnormal3) -}
3f707f963840a37db16bd53825ec29aa
  $tc'Abnormal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Abnormal"#) -}
9cc05155400cd855ea2d6dfe61e9556c
  $tc'AllChannelsAllocatedException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5308082888756318156##
                   17755203082663692521##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'AllChannelsAllocatedException2
                   0#
                   MyNetwork.AMQP.Types.$tc'AllChannelsAllocatedException1) -}
9170ffca909f07e5148b5a67d4451a31
  $tc'AllChannelsAllocatedException1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
99d45f59d35012e3d0d3b58741c196a6
  $tc'AllChannelsAllocatedException2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'AllChannelsAllocatedException3) -}
c1510aa1224c3fad4e9791b777a9ba73
  $tc'AllChannelsAllocatedException3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AllChannelsAllocatedException"#) -}
21f4243624e456e81c2a52ec92a1477e
  $tc'ChannelClosedException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10404708005937710239##
                   2537747501829583935##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'ChannelClosedException2
                   0#
                   MyNetwork.AMQP.Types.$tc'ChannelClosedException1) -}
55069e1bae6ac44a85d09467bf76f0e0
  $tc'ChannelClosedException1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0bd222648abd909e7da1eecca09b1682
  $tc'ChannelClosedException2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'ChannelClosedException3) -}
4d1dd2fdaad8e123e0e65c8149f21987
  $tc'ChannelClosedException3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ChannelClosedException"#) -}
f6ca1082de5cd763b126b0cc5ad6c95e
  $tc'Complete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15811744482854613938##
                   13122803859481503504##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'Complete2
                   0#
                   MyNetwork.AMQP.Types.$tc'Complete1) -}
fc394da17aa32c51f1274248078e8fc0
  $tc'Complete1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3e42a6522945a0c304c11d428fda7bf8
  $tc'Complete2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'Complete3) -}
79225db71cf13b34c4f50acf619ce8e7
  $tc'Complete3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Complete"#) -}
045ed995e70ed5f2e3f2dc9b12a0ba10
  $tc'ConnectionClosedException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2130390044482184674##
                   14053714102022209306##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'ConnectionClosedException1
                   0#
                   MyNetwork.AMQP.Types.$tc'ChannelClosedException1) -}
bf5b5399561e53f65e4b6ad0bd193187
  $tc'ConnectionClosedException1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'ConnectionClosedException2) -}
673cdf87531a9622c353a8bd12ca6596
  $tc'ConnectionClosedException2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConnectionClosedException"#) -}
d18ac67dcefc1746f3e67ffe4a7b9c30
  $tc'DecimalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2993646848326075780##
                   14673515295048926993##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'DecimalValue2
                   0#
                   MyNetwork.AMQP.Types.$tc'DecimalValue1) -}
56743b1e761ce4165100068db25095b4
  $tc'DecimalValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ae94fb307839790813a2347e46846b1d
  $tc'DecimalValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'DecimalValue3) -}
48addd86a297250674f1b236d4b21ac2
  $tc'DecimalValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DecimalValue"#) -}
1aca76857722d243bfff5e62d39bdaf0
  $tc'FVBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14261454377367125226##
                   11637102170004365650##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVBool2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVBool1) -}
3a8c77a4ee18f7f5d760f91a6f79fa6b
  $tc'FVBool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
74a515ef830578bff2c6a83649fbf084
  $tc'FVBool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVBool3) -}
96269479245a06af7f46d45544822071
  $tc'FVBool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVBool"#) -}
454bc596f67ec2418d20708647b96b78
  $tc'FVByteArray :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14582523525390025676##
                   11598807542521155663##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVByteArray2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVByteArray1) -}
be2c76cb9721291e6d1e4ab6a4430043
  $tc'FVByteArray1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd386f074b82e3b837c269f8f9dcdd40
  $tc'FVByteArray2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVByteArray3) -}
7f0ec1f8342db407028048ec16f6193a
  $tc'FVByteArray3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVByteArray"#) -}
e2a7c32a60b5ac8cabf50631ffdd1bc6
  $tc'FVDecimal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18109316447413646371##
                   14661103536056026883##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVDecimal2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVDecimal1) -}
5b01e2e1dc5482751c7e174939a126e0
  $tc'FVDecimal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ee3c008ebecc848bf83839d9d5b0ba5
  $tc'FVDecimal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVDecimal3) -}
7a788e18007c1f5211d221a3be08c33b
  $tc'FVDecimal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVDecimal"#) -}
df5cc407b150bedaeb8008914428ec2e
  $tc'FVDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4452136627933402993##
                   6612181364533503386##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVDouble2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVDouble1) -}
37532a6fabab879abc5d0df0e1513a56
  $tc'FVDouble1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0d476295e946fe42fa4efc06aff9a3b0
  $tc'FVDouble2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVDouble3) -}
188aaf2dc5ac55e230a336b131d3044d
  $tc'FVDouble3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVDouble"#) -}
4f190f6350bfa829433f72edd6ae5d1a
  $tc'FVFieldArray :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11856781241241066441##
                   1193253345875543265##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVFieldArray2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVFieldArray1) -}
690458078972b125d5d8e135a696dfd2
  $tc'FVFieldArray1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
791cd3faa90de4956ad1e957ea0bfff2
  $tc'FVFieldArray2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVFieldArray3) -}
87633255ce1503cb6ad81de7a3718a82
  $tc'FVFieldArray3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVFieldArray"#) -}
825bd76cd0e37cb4b78be7b737e9d3a7
  $tc'FVFieldTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16877228246077753546##
                   4101008921270123169##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVFieldTable2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVFieldTable1) -}
ac0dd5ce8d293096a50035ab129914db
  $tc'FVFieldTable1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5c511cfbb2c98b3f99212a6f33ee22be
  $tc'FVFieldTable2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVFieldTable3) -}
7d10ea71305dbd289f556d00a20ca0ce
  $tc'FVFieldTable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVFieldTable"#) -}
b222f1211ca82c562d0f307180ea927b
  $tc'FVFloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12312617916432713751##
                   10122386959899180458##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVFloat2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVFloat1) -}
fd06df2d598d6d68746d414d21b3a3ae
  $tc'FVFloat1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1ffeb3831e2996c2f0d9903d4d5eda7e
  $tc'FVFloat2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVFloat3) -}
8424d5592f730b061cb20ba42ce9f7be
  $tc'FVFloat3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVFloat"#) -}
8ef15d2acbd0f4bbed9a648d03358d0c
  $tc'FVInt1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
909dc86830f121c2df5a1aa7c91dbd2e
  $tc'FVInt10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVInt64"#) -}
48cac7bd85a2b772f2ac5fbabd45a520
  $tc'FVInt11 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5698314aed870378eb2d851faf0e0fd3
  $tc'FVInt12 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVInt13) -}
78d7b9ea6a4f903284735cc4310968ae
  $tc'FVInt13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVInt8"#) -}
bff78a19adbfa20bc3f2fae0f6bf4c02
  $tc'FVInt16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13399864802945435005##
                   9944298069757890554##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVInt2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVInt1) -}
6572d4195c925e3a198771e154a5fad4
  $tc'FVInt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVInt3) -}
3e6e06fa83c32860ff50400a34d2f940
  $tc'FVInt3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVInt16"#) -}
a75995c46e5e3ee49ca569b0c34a24e8
  $tc'FVInt32 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10793698171141738512##
                   6498109605110217373##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVInt5
                   0#
                   MyNetwork.AMQP.Types.$tc'FVInt4) -}
d7cf380db13f14be9238c6070da963b1
  $tc'FVInt4 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
01d00797e4654b3e2355455b75cef1d2
  $tc'FVInt5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVInt6) -}
1f44248752ca23370fb1df5548d3c9b0
  $tc'FVInt6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVInt32"#) -}
0287d687561edb44b67b7c66b15f586a
  $tc'FVInt64 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15909019702931695460##
                   6835245282683971038##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVInt9
                   0#
                   MyNetwork.AMQP.Types.$tc'FVInt7) -}
dddb63845bc854ed899cb32177dead2d
  $tc'FVInt7 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b682123204737e791ff22f5a8dc9ab32
  $tc'FVInt8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14680301553452191654##
                   15959592207133996536##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVInt12
                   0#
                   MyNetwork.AMQP.Types.$tc'FVInt11) -}
bc6b6735088dd5e34182a1ce664d5422
  $tc'FVInt9 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVInt10) -}
d5f1a81cca4d20cd7ec85cc0b4d4f4e5
  $tc'FVString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8944610578597002387##
                   13533060165715919970##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVString2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVString1) -}
727589074c35ed4329fcd6c08ed47b83
  $tc'FVString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ca0d38ecbce6ccd641ee5f81c08b957
  $tc'FVString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVString3) -}
71ea484a06be7aa39e69f0fc886a45c5
  $tc'FVString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVString"#) -}
33aa68e152596035afb9db560e78d56f
  $tc'FVTimestamp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15771597055526230986##
                   8574567603655286772##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVTimestamp2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVTimestamp1) -}
5c9a186b914efabcd3d6840e11e5cb35
  $tc'FVTimestamp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ba3e13c455c24b660452d2a69c4003d
  $tc'FVTimestamp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FVTimestamp3) -}
ef26c0ded2ecbb2b94112076c86b856e
  $tc'FVTimestamp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVTimestamp"#) -}
729bca8839725ed411fb74df8074d794
  $tc'FVVoid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11374558108310856341##
                   13931701024244513902##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FVVoid2
                   0#
                   MyNetwork.AMQP.Types.$tc'FVVoid1) -}
7bca53feebb54a2b0329d800c2176518
  $tc'FVVoid1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
24c608d317d612898d56426b6abeb803
  $tc'FVVoid2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'FVVoid3) -}
3a6f4f419ec03e7ebabd513830a88c71
  $tc'FVVoid3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FVVoid"#) -}
2028917d7a0284e4ffa32dc7a44ae48b
  $tc'FieldTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14200000086485305811##
                   17083342548129553305##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'FieldTable2
                   0#
                   MyNetwork.AMQP.Types.$tc'FieldTable1) -}
f55f03db67c8b99154c1520fb6d90f3c
  $tc'FieldTable1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2550809a3abbaa3b49dcc417b10b2aad
  $tc'FieldTable2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'FieldTable3) -}
c666f99993141dd30c57dd120b81ea40
  $tc'FieldTable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FieldTable"#) -}
b2eb02b46952e07dbe052c29246f589f
  $tc'LongString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1747247099425708035##
                   14305212472940336079##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'LongString2
                   0#
                   MyNetwork.AMQP.Types.$tc'LongString1) -}
29056749cf2f69d4122a66769b37f56b
  $tc'LongString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c93cf5ff256ffb807cb887c7aea7648f
  $tc'LongString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'LongString3) -}
ba07462d490da4a769b2bbd4ad23ff8d
  $tc'LongString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LongString"#) -}
dbdaab7c4451623f3e12ea7e3a1396e2
  $tc'Normal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8508596028021792152##
                   439420539585634956##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'Normal1
                   0#
                   MyNetwork.AMQP.Types.$tc'Abnormal1) -}
956fe96163da0cb49e87498ed328e162
  $tc'Normal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'Normal2) -}
7fbc6e1894390cb33633d7b3657517e0
  $tc'Normal2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Normal"#) -}
c6cd784b359b61b916d3da6ef06290dc
  $tc'Partial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12509722523917558910##
                   9466099125779120654##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'Partial2
                   0#
                   MyNetwork.AMQP.Types.$tc'Partial1) -}
e2f83a4e16e2d5d133d98d03bc322fe2
  $tc'Partial1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
db21eaa4ecdbf8cb7b5e6923c6322442
  $tc'Partial2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$tc'Partial3) -}
40216fcac1185b83955063b7097032ec
  $tc'Partial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Partial"#) -}
3a75d2bb7888c648f66434b88a84852a
  $tc'ShortString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9755700950442113589##
                   8763162196954558895##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tc'ShortString2
                   0#
                   MyNetwork.AMQP.Types.$tc'ShortString1) -}
346fbdcffcb70f1254c7d06a76f631a2
  $tc'ShortString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6bb4f0ba7cf79045e650e0d91073130b
  $tc'ShortString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tc'ShortString3) -}
898f4ee69cf566bdf73210a0b8fc792e
  $tc'ShortString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShortString"#) -}
021fb0ff756ea0cbe73bb08cbc25e6d9
  $tcAMQPException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9577524936865705113##
                   2806689259075012##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$fExceptionAMQPException4
                   0#
                   GHC.Types.krep$*) -}
89f91e3be5ee1ba53177a265a171f974
  $tcCloseType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17523418931547377252##
                   15711967926523417778##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcCloseType1
                   0#
                   GHC.Types.krep$*) -}
91202c2f5b09cc027df7eb93b49a8861
  $tcCloseType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tcCloseType2) -}
c777ce03708c92e4955c521c517aa28f
  $tcCloseType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CloseType"#) -}
d37655436c8f25c93656757de32fbfb3
  $tcConfirmationResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10388217175792507608##
                   14967766428170398937##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcConfirmationResult1
                   0#
                   GHC.Types.krep$*) -}
b118a437737bfb4d53bbaf2330ecc519
  $tcConfirmationResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tcConfirmationResult2) -}
de8cca2cca14b4ff4245c646e6b739c1
  $tcConfirmationResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConfirmationResult"#) -}
a701aa0f1173d7cfae7d22d65710a635
  $tcDecimalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14989797503471326920##
                   4416089733914542485##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcDecimalValue1
                   0#
                   GHC.Types.krep$*) -}
eccd75e11c55f68f6c7e3c7d79fab0ae
  $tcDecimalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$fReadDecimalValue4) -}
9a674d31fc2cfc6775fd4d7113ed558e
  $tcFieldTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11539775721070149901##
                   3398943897735245322##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcFieldTable1
                   0#
                   GHC.Types.krep$*) -}
0fa6e2c5bb203a86d54a43eb741b8cc1
  $tcFieldTable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tcFieldTable2) -}
e2064f59eb168dc1752a2f11c8817606
  $tcFieldTable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldTable"#) -}
661386f212ffe443652edf590b9133e7
  $tcFieldValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7490775032787257692##
                   7751000787494687891##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcFieldValue1
                   0#
                   GHC.Types.krep$*) -}
1451c1e83b8f27be8143a50a33b07aa2
  $tcFieldValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$tcFieldValue2) -}
514afa629986c2e824c32826eacf2e5a
  $tcFieldValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldValue"#) -}
f418649b2cada7632f8874729f92caf5
  $tcLongString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17761568949765619658##
                   12333597116509742525##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcLongString1
                   0#
                   GHC.Types.krep$*) -}
ac03c147dd5409496344202b6341028a
  $tcLongString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$fReadLongString4) -}
b3f9fed858c9ec3ed00ff182a09db421
  $tcShortString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9079466716857971727##
                   4345199804426737617##
                   MyNetwork.AMQP.Types.$trModule
                   MyNetwork.AMQP.Types.$tcShortString1
                   0#
                   GHC.Types.krep$*) -}
b9445edc6d5ff2d4a09988684742ac64
  $tcShortString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Types.$fReadShortString4) -}
59e4b1ad2d8b54873823b5e9579e3a32
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyNetwork.AMQP.Types.$trModule3
                   MyNetwork.AMQP.Types.$trModule1) -}
f6a8f4a5438f1f602a448b897147eb87
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$trModule2) -}
f79c188b8cf37ef9c4cdcdc22e84b8cf
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyNetwork.AMQP.Types"#) -}
c310bf8b1275ee0592f2e7e14bb4a8d0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Types.$trModule4) -}
2fcb96614c3169da9c0e27a3541aced7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC"#) -}
f87aebdc6422d8ecd8f8f6613201f99c
  $w$c< ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: MyNetwork.AMQP.Types.LongInt) ->
                 case GHC.Prim.eqWord# ww ww2 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww ww2 of lwild1 {
                        DEFAULT -> GHC.Types.False 1# -> GHC.Types.True }
                   1# -> GHC.Word.ltWord32 ww1 ww3 }) -}
474cd5b63c0558ee7310aa1278be4139
  $w$c<= ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: MyNetwork.AMQP.Types.LongInt) ->
                 case GHC.Prim.eqWord# ww2 ww of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww2 ww of lwild1 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                   1#
                   -> case ww3 of wild { GHC.Word.W32# x ->
                      case ww1 of wild1 { GHC.Word.W32# y ->
                      case GHC.Prim.ltWord# x y of lwild1 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } }) -}
48c1930034bbc98f2e5746705d348c46
  $w$c== ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: MyNetwork.AMQP.Types.LongInt) ->
                 case GHC.Prim.eqWord# ww ww2 of lwild {
                   DEFAULT -> GHC.Types.False 1# -> GHC.Word.eqWord32 ww1 ww3 }) -}
04c4d68756f9f970b7514f332c7f484a
  $w$c>= ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: MyNetwork.AMQP.Types.LongInt) ->
                 case GHC.Prim.eqWord# ww ww2 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww ww2 of lwild1 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                   1#
                   -> case ww1 of wild { GHC.Word.W32# x ->
                      case ww3 of wild1 { GHC.Word.W32# y ->
                      case GHC.Prim.ltWord# x y of lwild1 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } }) -}
c749709c140c4347722f23e1f8b2f85e
  $w$ccompare ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: MyNetwork.AMQP.Types.LongInt) ->
                 case GHC.Prim.eqWord# ww ww2 of lwild {
                   DEFAULT
                   -> case GHC.Prim.leWord# ww ww2 of lwild1 {
                        DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT }
                   1# -> GHC.Word.$fOrdWord32_$ccompare ww1 ww3 }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$ccompare1 ::
    Data.Map.Internal.Map
      Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> Data.Map.Internal.Map
         Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Internal.Map
                            Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue)
                   (ww1 :: Data.Map.Internal.Map
                             Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue) ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue)
                   MyNetwork.AMQP.Types.$fOrdFieldTable1
                   (Data.Map.Internal.$fDataMap_go
                      @ Data.Text.Internal.Text
                      @ MyNetwork.AMQP.Types.FieldValue
                      (GHC.Types.[]
                         @ (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue))
                      ww)
                   (Data.Map.Internal.$fDataMap_go
                      @ Data.Text.Internal.Text
                      @ MyNetwork.AMQP.Types.FieldValue
                      (GHC.Types.[]
                         @ (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue))
                      ww1)) -}
dcffc60a4c50a74e1c1768672520a6ba
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.DecimalValue r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           MyNetwork.AMQP.Types.DecimalValue r) ->
                 let {
                   $wks :: GHC.Prim.Addr#
                           -> GHC.ForeignPtr.ForeignPtrContents
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Word.Word8
                           -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,U>, Inline: [0] -}
                   = \ (ww4 :: GHC.Prim.Addr#)
                       (ww5 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (ww6 :: GHC.Prim.Int#)[OneShot]
                       (ww7 :: GHC.Prim.Int#)[OneShot]
                       (w1 :: GHC.Word.Word8)[OneShot] ->
                     case GHC.Prim.>=# ww7 4# of lwild {
                       DEFAULT
                       -> Data.Binary.Get.Internal.readN1
                            @ GHC.Types.Int
                            @ Data.ByteString.Internal.ByteString
                            MyNetwork.AMQP.Types.$fBinaryDecimalValue8
                            MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                            MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                            MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                              `cast`
                            (<[Data.ByteString.Internal.ByteString]>_R
                             ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                           <Data.ByteString.Internal.ByteString>_R))
                            @ r
                            (Data.ByteString.Internal.PS ww4 ww5 ww6 ww7)
                            (\ (i' :: Data.ByteString.Internal.ByteString)
                               (a1 :: Data.ByteString.Internal.ByteString) ->
                             case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt2 dt4)
                                    0#
                                    GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt3
                                    ipv of s' { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 1#))
                                    0#
                                    GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt3
                                    ipv2 of s'1 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 2#))
                                    0#
                                    GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt3
                                    ipv4 of s'2 { DEFAULT ->
                             case GHC.Prim.readWord8OffAddr#
                                    @ GHC.Prim.RealWorld
                                    (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 3#))
                                    0#
                                    GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                             case GHC.Prim.touch#
                                    @ 'GHC.Types.LiftedRep
                                    @ GHC.ForeignPtr.ForeignPtrContents
                                    dt3
                                    ipv6 of s'3 { DEFAULT ->
                             w (Data.ByteString.Internal.PS
                                  dt2
                                  dt3
                                  (GHC.Prim.+# dt4 4#)
                                  (GHC.Prim.-# dt5 4#))
                               (MyNetwork.AMQP.Types.DecimalValue
                                  w1
                                  (GHC.Word.W32#
                                     (GHC.Prim.or#
                                        (GHC.Prim.or#
                                           (GHC.Prim.or#
                                              (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                              (GHC.Prim.uncheckedShiftL# ipv3 16#))
                                           (GHC.Prim.uncheckedShiftL# ipv5 8#))
                                        ipv7))) } } } } } } } } })
                       1#
                       -> case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ww4 ww6)
                                 0#
                                 GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 ww5
                                 ipv of s' { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ww4 (GHC.Prim.+# ww6 1#))
                                 0#
                                 GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 ww5
                                 ipv2 of s'1 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ww4 (GHC.Prim.+# ww6 2#))
                                 0#
                                 GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 ww5
                                 ipv4 of s'2 { DEFAULT ->
                          case GHC.Prim.readWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ww4 (GHC.Prim.+# ww6 3#))
                                 0#
                                 GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                          case GHC.Prim.touch#
                                 @ 'GHC.Types.LiftedRep
                                 @ GHC.ForeignPtr.ForeignPtrContents
                                 ww5
                                 ipv6 of s'3 { DEFAULT ->
                          w (Data.ByteString.Internal.PS
                               ww4
                               ww5
                               (GHC.Prim.+# ww6 4#)
                               (GHC.Prim.-# ww7 4#))
                            (MyNetwork.AMQP.Types.DecimalValue
                               w1
                               (GHC.Word.W32#
                                  (GHC.Prim.or#
                                     (GHC.Prim.or#
                                        (GHC.Prim.or#
                                           (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                           (GHC.Prim.uncheckedShiftL# ipv3 16#))
                                        (GHC.Prim.uncheckedShiftL# ipv5 8#))
                                     ipv7))) } } } } } } } } }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue2
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         $wks
                           dt2
                           dt3
                           (GHC.Prim.+# dt4 1#)
                           (GHC.Prim.-# dt5 1#)
                           (GHC.Word.W8# ipv1) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#)
                        (GHC.Word.W8# ipv1) } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cget1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.FieldTable r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           MyNetwork.AMQP.Types.FieldTable r) ->
                 let {
                   lvl37 :: Data.ByteString.Internal.ByteString
                            -> Data.ByteString.Lazy.Internal.ByteString
                            -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (i' :: Data.ByteString.Internal.ByteString)
                       (a1 :: Data.ByteString.Lazy.Internal.ByteString) ->
                     case Data.Binary.Get.runGet3
                            @ [(MyNetwork.AMQP.Types.ShortString,
                                MyNetwork.AMQP.Types.FieldValue)]
                            MyNetwork.AMQP.Types.$fBinaryFieldTable8
                            a1 of fields { DEFAULT ->
                     w i'
                       (MyNetwork.AMQP.Types.FieldTable
                          (MyNetwork.AMQP.Types.$fBinaryFieldTable_$sfromList
                             @ MyNetwork.AMQP.Types.FieldValue
                             (GHC.Base.map
                                @ (MyNetwork.AMQP.Types.ShortString,
                                   MyNetwork.AMQP.Types.FieldValue)
                                @ (Data.Text.Internal.Text, MyNetwork.AMQP.Types.FieldValue)
                                MyNetwork.AMQP.Types.$fBinaryFieldTable6
                                fields))) }
                 } in
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     case GHC.Prim.gtWord# ww4 0## of lwild {
                       DEFAULT -> w w1 MyNetwork.AMQP.Types.$fBinaryFieldTable5
                       1#
                       -> Data.Binary.Get.Internal.readN1
                            @ GHC.Int.Int64
                            @ Data.ByteString.Lazy.Internal.ByteString
                            (GHC.Int.I64# (GHC.Prim.word2Int# ww4))
                            Data.Binary.Get.consumeBytes
                            Data.ByteString.Lazy.fromChunks
                            (Data.Binary.Get.Internal.failOnEOF1
                               @ Data.ByteString.Lazy.Internal.ByteString)
                              `cast`
                            (<[Data.ByteString.Internal.ByteString]>_R
                             ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                           <Data.ByteString.Lazy.Internal.ByteString>_R))
                            @ r
                            w1
                            lvl37 }
                 } in
                 case GHC.Prim.>=# ww3 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue8
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv6 of s'3 { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt2
                              dt3
                              (GHC.Prim.+# dt4 4#)
                              (GHC.Prim.-# dt5 4#))
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                    (GHC.Prim.uncheckedShiftL# ipv3 16#))
                                 (GHC.Prim.uncheckedShiftL# ipv5 8#))
                              ipv7) } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 4#)
                           (GHC.Prim.-# ww3 4#))
                        (GHC.Prim.or#
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                 (GHC.Prim.uncheckedShiftL# ipv3 16#))
                              (GHC.Prim.uncheckedShiftL# ipv5 8#))
                           ipv7) } } } } } } } } }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cget2 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.FieldValue r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
38cae7775dddc9d1315af9405a40993b
  $w$cget3 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.ShortString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           MyNetwork.AMQP.Types.ShortString r) ->
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,U>, Inline: [0] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       x :: GHC.Prim.Int# = GHC.Prim.word2Int# ww4
                     } in
                     case GHC.Prim.># x 0# of lwild {
                       DEFAULT
                       -> w w1
                            MyNetwork.AMQP.Types.$fBinaryShortString3
                              `cast`
                            (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                       1#
                       -> case w1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                          case GHC.Prim.>=# dt5 x of lwild1 {
                            DEFAULT
                            -> Data.Binary.Get.Internal.readN1
                                 @ GHC.Types.Int
                                 @ Data.ByteString.Internal.ByteString
                                 (GHC.Types.I# x)
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                                   `cast`
                                 (<[Data.ByteString.Internal.ByteString]>_R
                                  ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                                <Data.ByteString.Internal.ByteString>_R))
                                 @ r
                                 wild
                                 (\ (i' :: Data.ByteString.Internal.ByteString)
                                    (a1 :: Data.ByteString.Internal.ByteString) ->
                                  case a1 of wild1 { Data.ByteString.Internal.PS dt6 dt7 dt8 dt9 ->
                                  w (Data.ByteString.Internal.PS
                                       dt6
                                       dt7
                                       (GHC.Prim.+# dt8 x)
                                       (GHC.Prim.-# dt9 x))
                                    (Data.Text.Encoding.$wdecodeUtf8With
                                       Data.Text.Encoding.Error.strictDecode
                                       dt6
                                       dt7
                                       dt8
                                       x)
                                      `cast`
                                    (Sym (MyNetwork.AMQP.Types.N:ShortString[0])) })
                            1#
                            -> w (Data.ByteString.Internal.PS
                                    dt2
                                    dt3
                                    (GHC.Prim.+# dt4 x)
                                    (GHC.Prim.-# dt5 x))
                                 (Data.Text.Encoding.$wdecodeUtf8With
                                    Data.Text.Encoding.Error.strictDecode
                                    dt2
                                    dt3
                                    dt4
                                    x)
                                   `cast`
                                 (Sym (MyNetwork.AMQP.Types.N:ShortString[0])) } } }
                 } in
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue2
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt2
                              dt3
                              (GHC.Prim.+# dt4 1#)
                              (GHC.Prim.-# dt5 1#))
                           ipv1 } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
8934302af8d2d461daa104bfea132d7b
  $w$cget4 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success
         MyNetwork.AMQP.Types.LongString r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success
                           MyNetwork.AMQP.Types.LongString r) ->
                 let {
                   $wks :: Data.ByteString.Internal.ByteString
                           -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,U>, Inline: [0] -}
                   = \ (w1 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     let {
                       x :: GHC.Prim.Int# = GHC.Prim.word2Int# ww4
                     } in
                     case GHC.Prim.># x 0# of lwild {
                       DEFAULT
                       -> w w1
                            Data.ByteString.empty
                              `cast`
                            (Sym (MyNetwork.AMQP.Types.N:LongString[0]))
                       1#
                       -> case w1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                          case GHC.Prim.>=# dt5 x of lwild1 {
                            DEFAULT
                            -> Data.Binary.Get.Internal.readN1
                                 @ GHC.Types.Int
                                 @ Data.ByteString.Internal.ByteString
                                 (GHC.Types.I# x)
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                                 MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                                   `cast`
                                 (<[Data.ByteString.Internal.ByteString]>_R
                                  ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                                <Data.ByteString.Internal.ByteString>_R))
                                 @ r
                                 wild
                                 (\ (i' :: Data.ByteString.Internal.ByteString)
                                    (a1 :: Data.ByteString.Internal.ByteString) ->
                                  case a1 of wild1 { Data.ByteString.Internal.PS dt6 dt7 dt8 dt9 ->
                                  w (Data.ByteString.Internal.PS
                                       dt6
                                       dt7
                                       (GHC.Prim.+# dt8 x)
                                       (GHC.Prim.-# dt9 x))
                                    (Data.ByteString.Internal.PS dt6 dt7 dt8 x)
                                      `cast`
                                    (Sym (MyNetwork.AMQP.Types.N:LongString[0])) })
                            1#
                            -> w (Data.ByteString.Internal.PS
                                    dt2
                                    dt3
                                    (GHC.Prim.+# dt4 x)
                                    (GHC.Prim.-# dt5 x))
                                 (Data.ByteString.Internal.PS dt2 dt3 dt4 x)
                                   `cast`
                                 (Sym (MyNetwork.AMQP.Types.N:LongString[0])) } } }
                 } in
                 case GHC.Prim.>=# ww3 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue8
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue7
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue6
                        MyNetwork.AMQP.Types.$fBinaryDecimalValue3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 dt4)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv of s' { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 1#))
                                0#
                                GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv2 of s'1 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 2#))
                                0#
                                GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv4 of s'2 { DEFAULT ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt2 (GHC.Prim.+# dt4 3#))
                                0#
                                GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt3
                                ipv6 of s'3 { DEFAULT ->
                         $wks
                           (Data.ByteString.Internal.PS
                              dt2
                              dt3
                              (GHC.Prim.+# dt4 4#)
                              (GHC.Prim.-# dt5 4#))
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                    (GHC.Prim.uncheckedShiftL# ipv3 16#))
                                 (GHC.Prim.uncheckedShiftL# ipv5 8#))
                              ipv7) } } } } } } } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      $wks
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 4#)
                           (GHC.Prim.-# ww3 4#))
                        (GHC.Prim.or#
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                 (GHC.Prim.uncheckedShiftL# ipv3 16#))
                              (GHC.Prim.uncheckedShiftL# ipv5 8#))
                           ipv7) } } } } } } } } }) -}
4a2ad1a14936bbe743b87c74001a2413
  $w$cput ::
    MyNetwork.AMQP.Types.Decimals
    -> MyNetwork.AMQP.Types.LongInt
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Types.Decimals)
                   (ww1 :: MyNetwork.AMQP.Types.LongInt) ->
                 (# GHC.Tuple.(),
                    (\ @ r
                       (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                       (eta :: Data.ByteString.Builder.Internal.BufferRange)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                     case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 5# of lwild {
                       DEFAULT
                       -> case ww of wild2 { GHC.Word.W8# x ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt2
                                 0#
                                 x
                                 eta1 of s2 { DEFAULT ->
                          case ww1 of wild1 { GHC.Word.W32# w1 ->
                          let {
                            ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 1#
                          } in
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 ipv1
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                 s2 of s1 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 1#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                 s1 of s3 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 2#)
                                 0#
                                 (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                 s3 of s4 { DEFAULT ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.plusAddr# ipv1 3#)
                                 0#
                                 (GHC.Prim.narrow8Word# w1)
                                 s4 of s5 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# ipv1 4#)
                                dt3))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s5 } } } } } } }
                       1#
                       -> (# eta1,
                             Data.ByteString.Builder.Internal.BufferFull
                               @ r
                               5#
                               dt2
                               (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                case ww of wild2 { GHC.Word.W8# x ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt4
                                       0#
                                       x
                                       eta2 of s2 { DEFAULT ->
                                case ww1 of wild3 { GHC.Word.W32# w1 ->
                                let {
                                  ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt4 1#
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ipv1
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                       s2 of s1 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                       s1 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                       s3 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# w1)
                                       s4 of s5 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# ipv1 4#)
                                      dt5))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s5 } } } } } } } })
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                 r>_R)) #) } })
                      `cast`
                    ((forall (r :: <*>_N).
                      <Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal
                                       r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cput1 ::
    Data.Map.Internal.Map
      Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Internal.Map
                            Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue) ->
                 let {
                   bytes :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.ByteString.Builder.toLazyByteString
                       (case (MyNetwork.AMQP.Types.$fBinaryFieldTable_go13
                                MyNetwork.AMQP.Types.$fBinaryFieldTable2
                                  `cast`
                                (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                                ww)
                               `cast`
                             (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds b ->
                        b })
                 } in
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Word.Word32 = MyNetwork.AMQP.Types.$wgo3 0# bytes
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 4# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Word.W32# w1 ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt2
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s3 of s4 { DEFAULT ->
                           MyNetwork.AMQP.Types.$fBinaryFieldTable1
                             bytes
                             @ r
                             x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# dt2 4#)
                                dt3)
                             s4 } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                4#
                                dt2
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                 case x of wild2 { GHC.Word.W32# w1 ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt4
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                        eta2 of s2 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 1#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                        s2 of s1 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 2#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                        s1 of s3 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 3#)
                                        0#
                                        (GHC.Prim.narrow8Word# w1)
                                        s3 of s4 { DEFAULT ->
                                 MyNetwork.AMQP.Types.$fBinaryFieldTable1
                                   bytes
                                   @ r
                                   x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# dt4 4#)
                                      dt5)
                                   s4 } } } } } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cput2 ::
    MyNetwork.AMQP.Types.FieldValue
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1da0de2bd06753e2bcb20fc682a28892
  $w$cput3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3, Strictness: <S,U><S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Data.Text.Encoding.$wencodeUtf8
                        ww
                        ww1
                        ww2 of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                 case GHC.Prim.># dt5 255# of lwild {
                   DEFAULT
                   -> let {
                        ip :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 dt4
                      } in
                      (# GHC.Tuple.(),
                         (\ @ r ->
                          let {
                            x :: GHC.Prim.Word#
                            = GHC.Prim.narrow8Word# (GHC.Prim.int2Word# dt5)
                          } in
                          (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                             (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt6 dt7 ->
                           let {
                             lvl37 :: Data.ByteString.Builder.Internal.BufferRange
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.ByteString.Builder.Internal.BuildSignal r #)
                               {- Arity: 2, Strictness: <L,U><S,U> -}
                             = \ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                 (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.touch#
                                      @ 'GHC.Types.LiftedRep
                                      @ GHC.ForeignPtr.ForeignPtrContents
                                      dt3
                                      s of s' { DEFAULT ->
                               (x1 br1)
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s' }
                           } in
                           let {
                             $wx1 :: GHC.Prim.Addr#
                                     -> GHC.Prim.Addr#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.ByteString.Builder.Internal.BuildSignal r #)
                               {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0] -}
                             = \ (ww3 :: GHC.Prim.Addr#)
                                 (ww4 :: GHC.Prim.Addr#)[OneShot]
                                 (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case x1 of k1 { DEFAULT ->
                               case GHC.Prim.<=# dt5 8160# of lwild1 {
                                 DEFAULT
                                 -> (# w,
                                       Data.ByteString.Builder.Internal.InsertChunk
                                         @ r
                                         ww3
                                         wild
                                         k1 #)
                                 1#
                                 -> let {
                                      op' :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ww3 dt5
                                    } in
                                    case GHC.Prim.ltAddr# ww4 op' of lwild2 {
                                      DEFAULT
                                      -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                                         -> GHC.Prim.Addr#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Addr# #)}
                                                ww3
                                                ip
                                                (GHC.Prim.int2Word# dt5)
                                                w of wild3 { (#,#) ds4 ds5 ->
                                         case GHC.Prim.touch#
                                                @ 'GHC.Types.LiftedRep
                                                @ GHC.ForeignPtr.ForeignPtrContents
                                                dt3
                                                ds4 of s' { DEFAULT ->
                                         (k1 (Data.ByteString.Builder.Internal.BufferRange op' ww4))
                                           `cast`
                                         (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                           s' } }
                                      1#
                                      -> Data.ByteString.Builder.Internal.$wwrappedBytesCopyStep
                                           @ r
                                           ip
                                           (GHC.Prim.plusAddr# ip dt5)
                                           lvl37
                                             `cast`
                                           (<Data.ByteString.Builder.Internal.BufferRange>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.ByteString.Builder.Internal.BuildSignal
                                                             r>_R))
                                           ww3
                                           ww4
                                           w } } }
                           } in
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt7 dt6) 1# of lwild1 {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt6
                                       0#
                                       x
                                       eta1 of s2 { DEFAULT ->
                                $wx1 (GHC.Prim.plusAddr# dt6 1#) dt7 s2 }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     1#
                                     dt6
                                     (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case ds of wild2 { Data.ByteString.Builder.Internal.BufferRange dt8 dt9 ->
                                      case GHC.Prim.writeWord8OffAddr#
                                             @ GHC.Prim.RealWorld
                                             dt8
                                             0#
                                             x
                                             eta2 of s2 { DEFAULT ->
                                      $wx1 (GHC.Prim.plusAddr# dt8 1#) dt9 s2 } })
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   1#
                   -> case MyNetwork.AMQP.Types.$fBinaryShortString1
                      ret_ty (# (), Data.ByteString.Builder.Internal.Builder #)
                      of {} } }) -}
8934302af8d2d461daa104bfea132d7b
  $w$cput4 ::
    MyNetwork.AMQP.Types.LongString
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: MyNetwork.AMQP.Types.LongString) ->
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Word.Word32
                       = case w `cast`
                              (MyNetwork.AMQP.Types.N:LongString[0]) of wild { Data.ByteString.Internal.PS dt2 dt3 dt4 dt5 ->
                         GHC.Word.W32# (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# dt5)) }
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                      let {
                        $wx1 :: GHC.Prim.Addr#
                                -> GHC.Prim.Addr#
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                          {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Addr#)
                            (ww1 :: GHC.Prim.Addr#)[OneShot]
                            (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case w `cast`
                               (MyNetwork.AMQP.Types.N:LongString[0]) of wild1 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                          case x1 of k1 { DEFAULT ->
                          case GHC.Prim.<=# dt7 8160# of lwild {
                            DEFAULT
                            -> (# w1,
                                  Data.ByteString.Builder.Internal.InsertChunk @ r ww wild1 k1 #)
                            1#
                            -> let {
                                 op' :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ww dt7
                               } in
                               let {
                                 ip :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt4 dt6
                               } in
                               case GHC.Prim.ltAddr# ww1 op' of lwild1 {
                                 DEFAULT
                                 -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                                    -> GHC.Prim.Addr#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Addr# #)}
                                           ww
                                           ip
                                           (GHC.Prim.int2Word# dt7)
                                           w1 of wild3 { (#,#) ds4 ds5 ->
                                    case GHC.Prim.touch#
                                           @ 'GHC.Types.LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt5
                                           ds4 of s' { DEFAULT ->
                                    (k1 (Data.ByteString.Builder.Internal.BufferRange op' ww1))
                                      `cast`
                                    (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                      s' } }
                                 1#
                                 -> Data.ByteString.Builder.Internal.$wwrappedBytesCopyStep
                                      @ r
                                      ip
                                      (GHC.Prim.plusAddr# ip dt7)
                                      (\ (br1 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.touch#
                                              @ 'GHC.Types.LiftedRep
                                              @ GHC.ForeignPtr.ForeignPtrContents
                                              dt5
                                              s of s' { DEFAULT ->
                                       (k1 br1)
                                         `cast`
                                       (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                         s' })
                                        `cast`
                                      (<Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R))
                                      ww
                                      ww1
                                      w1 } } } }
                      } in
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt3 dt2) 4# of lwild {
                        DEFAULT
                        -> case x of wild1 { GHC.Word.W32# w1 ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt2
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                  eta1 of s2 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 1#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                  s2 of s1 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 2#)
                                  0#
                                  (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                  s1 of s3 { DEFAULT ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  (GHC.Prim.plusAddr# dt2 3#)
                                  0#
                                  (GHC.Prim.narrow8Word# w1)
                                  s3 of s4 { DEFAULT ->
                           $wx1 (GHC.Prim.plusAddr# dt2 4#) dt3 s4 } } } } }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                4#
                                dt2
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt4 dt5 ->
                                 case x of wild2 { GHC.Word.W32# w1 ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        dt4
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 24#))
                                        eta2 of s2 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 1#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 16#))
                                        s2 of s1 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 2#)
                                        0#
                                        (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                        s1 of s3 { DEFAULT ->
                                 case GHC.Prim.writeWord8OffAddr#
                                        @ GHC.Prim.RealWorld
                                        (GHC.Prim.plusAddr# dt4 3#)
                                        0#
                                        (GHC.Prim.narrow8Word# w1)
                                        s3 of s4 { DEFAULT ->
                                 $wx1 (GHC.Prim.plusAddr# dt4 4#) dt5 s4 } } } } } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
dcffc60a4c50a74e1c1768672520a6ba
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Types.DecimalValue
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: MyNetwork.AMQP.Types.DecimalValue
                         -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.<=# ww 10# of lwild {
                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                   1#
                   -> let {
                        lvl118 :: Text.ParserCombinators.ReadP.P b
                        = letrec {
                            go :: [(GHC.Word.Word8, GHC.Base.String)] -> [(b, GHC.Base.String)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(GHC.Word.Word8, GHC.Base.String)]) ->
                              case ds of wild {
                                [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                : y ys
                                -> case y of wild1 { (,) a1 s' ->
                                   letrec {
                                     go1 :: [(GHC.Word.Word32, GHC.Base.String)]
                                            -> [(b, GHC.Base.String)]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds1 :: [(GHC.Word.Word32, GHC.Base.String)]) ->
                                       case ds1 of wild2 {
                                         [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                         : y1 ys1
                                         -> case y1 of wild3 { (,) a2 s'1 ->
                                            GHC.Base.++
                                              @ (b, GHC.Base.String)
                                              (Text.ParserCombinators.ReadP.run
                                                 @ b
                                                 (w (MyNetwork.AMQP.Types.DecimalValue a1 a2))
                                                 s'1)
                                              (go1 ys1) } }
                                   } in
                                   GHC.Base.++
                                     @ (b, GHC.Base.String)
                                     (Text.ParserCombinators.ReadP.run
                                        @ b
                                        (Text.ParserCombinators.ReadP.Look
                                           @ b
                                           (\ (s :: GHC.Base.String) ->
                                            case go1
                                                   (GHC.Read.$fReadWord32_go
                                                      (Text.ParserCombinators.ReadP.run
                                                         @ GHC.Types.Int
                                                         MyNetwork.AMQP.Types.$fReadDecimalValue5
                                                         s)) of wild2 {
                                              [] -> Text.ParserCombinators.ReadP.Fail @ b
                                              : ipv ipv1
                                              -> Text.ParserCombinators.ReadP.Final @ b wild2 }))
                                        s')
                                     (go ys) } }
                          } in
                          let {
                            ww1 :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (s :: GHC.Base.String) ->
                              case go
                                     (GHC.Read.$fReadWord8_go
                                        (Text.ParserCombinators.ReadP.run
                                           @ GHC.Types.Int
                                           MyNetwork.AMQP.Types.$fReadDecimalValue5
                                           s)) of wild {
                                [] -> Text.ParserCombinators.ReadP.Fail @ b
                                : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild }
                          } in
                          let {
                            lvl119 :: Text.ParserCombinators.ReadP.P b
                            = Text.ParserCombinators.ReadP.Look @ b ww1
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a3 :: Text.Read.Lex.Lexeme) ->
                             case a3 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString
                                         a1
                                         MyNetwork.AMQP.Types.$fReadDecimalValue3 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl119 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl118) -}
                        = \ (a3 :: ()) -> lvl118
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         Text.ParserCombinators.ReadP.skipSpaces2 a @ b k) }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Types.FieldTable
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
8934302af8d2d461daa104bfea132d7b
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Types.LongString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: MyNetwork.AMQP.Types.LongString
                         -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.<=# ww 10# of lwild {
                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                   1#
                   -> let {
                        lvl118 :: Text.ParserCombinators.ReadP.P b
                        = letrec {
                            go :: [(Data.ByteString.Internal.ByteString, GHC.Base.String)]
                                  -> [(b, GHC.Base.String)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(Data.ByteString.Internal.ByteString,
                                         GHC.Base.String)]) ->
                              case ds of wild {
                                [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                : y ys
                                -> case y of wild1 { (,) a1 s' ->
                                   GHC.Base.++
                                     @ (b, GHC.Base.String)
                                     (Text.ParserCombinators.ReadP.run
                                        @ b
                                        (w a1 `cast` (Sym (MyNetwork.AMQP.Types.N:LongString[0])))
                                        s')
                                     (go ys) } }
                          } in
                          let {
                            ww1 :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (s :: GHC.Base.String) ->
                              case go
                                     (Data.ByteString.Internal.$fReadByteString_go
                                        (Text.ParserCombinators.ReadP.run
                                           @ [GHC.Types.Char]
                                           MyNetwork.AMQP.Types.$fReadLongString5
                                           s)) of wild {
                                [] -> Text.ParserCombinators.ReadP.Fail @ b
                                : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild }
                          } in
                          let {
                            lvl119 :: Text.ParserCombinators.ReadP.P b
                            = Text.ParserCombinators.ReadP.Look @ b ww1
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a3 :: Text.Read.Lex.Lexeme) ->
                             case a3 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString
                                         a1
                                         MyNetwork.AMQP.Types.$fReadLongString3 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl119 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl118) -}
                        = \ (a3 :: ()) -> lvl118
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         Text.ParserCombinators.ReadP.skipSpaces2 a @ b k) }) -}
38cae7775dddc9d1315af9405a40993b
  $w$creadPrec3 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Types.ShortString
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: MyNetwork.AMQP.Types.ShortString
                         -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.<=# ww 10# of lwild {
                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                   1#
                   -> let {
                        lvl118 :: Text.ParserCombinators.ReadP.P b
                        = letrec {
                            go :: [(Data.Text.Internal.Text, GHC.Base.String)]
                                  -> [(b, GHC.Base.String)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(Data.Text.Internal.Text, GHC.Base.String)]) ->
                              case ds of wild {
                                [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                : y ys
                                -> case y of wild1 { (,) a1 s' ->
                                   GHC.Base.++
                                     @ (b, GHC.Base.String)
                                     (Text.ParserCombinators.ReadP.run
                                        @ b
                                        (w a1 `cast` (Sym (MyNetwork.AMQP.Types.N:ShortString[0])))
                                        s')
                                     (go ys) } }
                          } in
                          let {
                            ww1 :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (s :: GHC.Base.String) ->
                              case go
                                     (Data.Text.$fReadText_go
                                        (Text.ParserCombinators.ReadP.run
                                           @ [GHC.Types.Char]
                                           MyNetwork.AMQP.Types.$fReadLongString5
                                           s)) of wild {
                                [] -> Text.ParserCombinators.ReadP.Fail @ b
                                : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild }
                          } in
                          let {
                            lvl119 :: Text.ParserCombinators.ReadP.P b
                            = Text.ParserCombinators.ReadP.Look @ b ww1
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a3 :: Text.Read.Lex.Lexeme) ->
                             case a3 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString
                                         a1
                                         MyNetwork.AMQP.Types.$fReadShortString3 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl119 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl118) -}
                        = \ (a3 :: ()) -> lvl118
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         Text.ParserCombinators.ReadP.skipSpaces2 a @ b k) }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cshow ::
    Data.Map.Internal.Map
      Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Internal.Map
                            Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   MyNetwork.AMQP.Types.$fShowFieldTable2
                   (Data.Map.Internal.$w$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ MyNetwork.AMQP.Types.FieldValue
                      Data.Text.Show.$fShowText
                      MyNetwork.AMQP.Types.$fShowFieldValue
                      11#
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
4e3e663e4d9b79b9c4b960dd52fd612c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Types.AMQPException
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
f4d3a18c700ab8b31645d417c7e08348
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Types.ConfirmationResult
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U>,
     Inline: [0] -}
2870c5391b238dba5dc175222c4ebb9e
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Types.Decimals
    -> MyNetwork.AMQP.Types.LongInt
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: MyNetwork.AMQP.Types.Decimals)
                   (ww2 :: MyNetwork.AMQP.Types.LongInt)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of wild { GHC.Word.W8# x# ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            (GHC.Prim.word2Int# x#)
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case ww2 of wild1 { GHC.Word.W32# x#1 ->
                                case GHC.Show.$wshowSignedInt
                                       11#
                                       (GHC.Prim.word2Int# x#1)
                                       x of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  ww5
                                  ww6 } })) of ww4 { (#,#) ww5 ww6 ->
                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MyNetwork.AMQP.Types.$fShowDecimalValue2
                        (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           MyNetwork.AMQP.Types.$fShowDecimalValue2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
e2dab219ac237204a5b8f05eb2c223b2
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ MyNetwork.AMQP.Types.FieldValue
                       Data.Text.Show.$fShowText
                       MyNetwork.AMQP.Types.$fShowFieldValue
                       11#
                       ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        MyNetwork.AMQP.Types.$fShowFieldTable2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           MyNetwork.AMQP.Types.$fShowFieldTable2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
8934302af8d2d461daa104bfea132d7b
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> MyNetwork.AMQP.Types.LongString -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U(U,U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: MyNetwork.AMQP.Types.LongString) ->
                 let {
                   lvl37 :: [GHC.Types.Char]
                   = case w `cast`
                          (MyNetwork.AMQP.Types.N:LongString[0]) of ww1 { Data.ByteString.Internal.PS ww2 ww3 ww4 ww5 ->
                     Data.ByteString.Internal.$wunpackAppendCharsLazy
                       ww2
                       ww3
                       ww4
                       ww5
                       (GHC.Types.[] @ GHC.Types.Char) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Types.$fShowLongString2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              lvl37
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Types.$fShowLongString2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 lvl37
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
38cae7775dddc9d1315af9405a40993b
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Types.ShortString
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: MyNetwork.AMQP.Types.ShortString)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Types.$fShowShortString2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (MyNetwork.AMQP.Types.N:ShortString[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Types.$fShowShortString2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (MyNetwork.AMQP.Types.N:ShortString[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
233363799fb185130a0ac147c68352ea
  $w$sgo13 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
65ddb718a41b48289b1c06ca3c0eeea1
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString -> GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>m,
     Inline: [0] -}
52dd9160c24cc86e28cfabe7e75c92c8
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c781ac4beae2010e5d3e83b4a7d1ff07
  $wreadMany' ::
    Data.Binary.Class.Binary a =>
    [a]
    -> GHC.Prim.Int#
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [a] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5,
     Strictness: <S(LC(C(S))L),U(A,C(C1(U)),A)><L,U><S,1*U><L,U><L,C(C1(U))>,
     Inline: [0] -}
4e3e663e4d9b79b9c4b960dd52fd612c
  data AMQPException
    = ChannelClosedException MyNetwork.AMQP.Types.CloseType
                             GHC.Base.String
    | ConnectionClosedException MyNetwork.AMQP.Types.CloseType
                                GHC.Base.String
    | AllChannelsAllocatedException GHC.Types.Int
21e69a202fca5cede130803a375dd47f
  type Bit = GHC.Types.Bool
7096f7c57394498afd65a535be3b746b
  type ChannelID = MyNetwork.AMQP.Types.ShortInt
aa6a03fa60860e76928efb63e27e0f5b
  data CloseType = Normal | Abnormal
f4d3a18c700ab8b31645d417c7e08348
  data ConfirmationResult
    = Complete (Data.IntSet.Internal.IntSet,
                Data.IntSet.Internal.IntSet)
    | Partial (Data.IntSet.Internal.IntSet,
               Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet)
5cb78a23bfa6f324df665b5ead71beda
  type ConsumerTag = Data.Text.Internal.Text
dcffc60a4c50a74e1c1768672520a6ba
  data DecimalValue
    = DecimalValue MyNetwork.AMQP.Types.Decimals
                   MyNetwork.AMQP.Types.LongInt
7b06247095dad64095aa374b045056dd
  type Decimals = MyNetwork.AMQP.Types.Octet
e2dab219ac237204a5b8f05eb2c223b2
  data FieldTable
    = FieldTable (Data.Map.Internal.Map
                    Data.Text.Internal.Text MyNetwork.AMQP.Types.FieldValue)
e2dab219ac237204a5b8f05eb2c223b2
  data FieldValue
    = FVBool GHC.Types.Bool
    | FVInt8 GHC.Int.Int8
    | FVInt16 GHC.Int.Int16
    | FVInt32 GHC.Int.Int32
    | FVInt64 GHC.Int.Int64
    | FVFloat GHC.Types.Float
    | FVDouble GHC.Types.Double
    | FVDecimal MyNetwork.AMQP.Types.DecimalValue
    | FVString Data.Text.Internal.Text
    | FVFieldArray [MyNetwork.AMQP.Types.FieldValue]
    | FVTimestamp MyNetwork.AMQP.Types.Timestamp
    | FVFieldTable MyNetwork.AMQP.Types.FieldTable
    | FVVoid
    | FVByteArray Data.ByteString.Internal.ByteString
ac595cdb6b68e94f7f2c0d49e73bc99a
  type LongInt = GHC.Word.Word32
763ed05ff03a034b2d61b6cd62071d38
  type LongLongInt = GHC.Word.Word64
8934302af8d2d461daa104bfea132d7b
  newtype LongString = LongString Data.ByteString.Internal.ByteString
0c12da92e95c9ecd7c7d5f96482f878f
  type Octet = GHC.Word.Word8
962df974dbb399d6c1d53ebaddf217d4
  type PayloadSize = MyNetwork.AMQP.Types.LongInt
15f4581b8c999bc6f1b6893509e8bfe7
  type ShortInt = GHC.Word.Word16
38cae7775dddc9d1315af9405a40993b
  newtype ShortString = ShortString Data.Text.Internal.Text
b6cef2c2c9fafffa6c51bd6a46296326
  type Timestamp = GHC.Word.Word64
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Types.DecimalValue]
  = MyNetwork.AMQP.Types.$fBinaryDecimalValue
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Types.FieldTable]
  = MyNetwork.AMQP.Types.$fBinaryFieldTable
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Types.FieldValue]
  = MyNetwork.AMQP.Types.$fBinaryFieldValue
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Types.LongString]
  = MyNetwork.AMQP.Types.$fBinaryLongString
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Types.ShortString]
  = MyNetwork.AMQP.Types.$fBinaryShortString
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.AMQPException]
  = MyNetwork.AMQP.Types.$fEqAMQPException
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.CloseType]
  = MyNetwork.AMQP.Types.$fEqCloseType
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.DecimalValue]
  = MyNetwork.AMQP.Types.$fEqDecimalValue
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.FieldTable]
  = MyNetwork.AMQP.Types.$fEqFieldTable
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.FieldValue]
  = MyNetwork.AMQP.Types.$fEqFieldValue
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.LongString]
  = MyNetwork.AMQP.Types.$fEqLongString
instance GHC.Classes.Eq [MyNetwork.AMQP.Types.ShortString]
  = MyNetwork.AMQP.Types.$fEqShortString
instance GHC.Exception.Exception [MyNetwork.AMQP.Types.AMQPException]
  = MyNetwork.AMQP.Types.$fExceptionAMQPException
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.AMQPException]
  = MyNetwork.AMQP.Types.$fOrdAMQPException
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.CloseType]
  = MyNetwork.AMQP.Types.$fOrdCloseType
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.DecimalValue]
  = MyNetwork.AMQP.Types.$fOrdDecimalValue
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.FieldTable]
  = MyNetwork.AMQP.Types.$fOrdFieldTable
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.FieldValue]
  = MyNetwork.AMQP.Types.$fOrdFieldValue
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.LongString]
  = MyNetwork.AMQP.Types.$fOrdLongString
instance GHC.Classes.Ord [MyNetwork.AMQP.Types.ShortString]
  = MyNetwork.AMQP.Types.$fOrdShortString
instance GHC.Read.Read [MyNetwork.AMQP.Types.DecimalValue]
  = MyNetwork.AMQP.Types.$fReadDecimalValue
instance GHC.Read.Read [MyNetwork.AMQP.Types.FieldTable]
  = MyNetwork.AMQP.Types.$fReadFieldTable
instance GHC.Read.Read [MyNetwork.AMQP.Types.FieldValue]
  = MyNetwork.AMQP.Types.$fReadFieldValue
instance GHC.Read.Read [MyNetwork.AMQP.Types.LongString]
  = MyNetwork.AMQP.Types.$fReadLongString
instance GHC.Read.Read [MyNetwork.AMQP.Types.ShortString]
  = MyNetwork.AMQP.Types.$fReadShortString
instance GHC.Show.Show [MyNetwork.AMQP.Types.AMQPException]
  = MyNetwork.AMQP.Types.$fShowAMQPException
instance GHC.Show.Show [MyNetwork.AMQP.Types.CloseType]
  = MyNetwork.AMQP.Types.$fShowCloseType
instance GHC.Show.Show [MyNetwork.AMQP.Types.ConfirmationResult]
  = MyNetwork.AMQP.Types.$fShowConfirmationResult
instance GHC.Show.Show [MyNetwork.AMQP.Types.DecimalValue]
  = MyNetwork.AMQP.Types.$fShowDecimalValue
instance GHC.Show.Show [MyNetwork.AMQP.Types.FieldTable]
  = MyNetwork.AMQP.Types.$fShowFieldTable
instance GHC.Show.Show [MyNetwork.AMQP.Types.FieldValue]
  = MyNetwork.AMQP.Types.$fShowFieldValue
instance GHC.Show.Show [MyNetwork.AMQP.Types.LongString]
  = MyNetwork.AMQP.Types.$fShowLongString
instance GHC.Show.Show [MyNetwork.AMQP.Types.ShortString]
  = MyNetwork.AMQP.Types.$fShowShortString
"SPEC/MyNetwork.AMQP.Types defaultPutList @ DecimalValue" forall ($dBinary :: Data.Binary.Class.Binary
                                                                                MyNetwork.AMQP.Types.DecimalValue)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Types.DecimalValue
                                   $dBinary
  = MyNetwork.AMQP.Types.$fBinaryDecimalValue_$sdefaultPutList
"SPEC/MyNetwork.AMQP.Types defaultPutList @ FieldTable" forall ($dBinary :: Data.Binary.Class.Binary
                                                                              MyNetwork.AMQP.Types.FieldTable)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Types.FieldTable
                                   $dBinary
  = MyNetwork.AMQP.Types.$fBinaryFieldTable_$sdefaultPutList
"SPEC/MyNetwork.AMQP.Types defaultPutList @ FieldValue" forall ($dBinary :: Data.Binary.Class.Binary
                                                                              MyNetwork.AMQP.Types.FieldValue)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Types.FieldValue
                                   $dBinary
  = MyNetwork.AMQP.Types.$fBinaryFieldValue_$sdefaultPutList
"SPEC/MyNetwork.AMQP.Types defaultPutList @ LongString" forall ($dBinary :: Data.Binary.Class.Binary
                                                                              MyNetwork.AMQP.Types.LongString)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Types.LongString
                                   $dBinary
  = MyNetwork.AMQP.Types.$fBinaryLongString_$sdefaultPutList
"SPEC/MyNetwork.AMQP.Types defaultPutList @ ShortString" forall ($dBinary :: Data.Binary.Class.Binary
                                                                               MyNetwork.AMQP.Types.ShortString)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Types.ShortString
                                   $dBinary
  = MyNetwork.AMQP.Types.$fBinaryShortString_$sdefaultPutList
"SPEC/MyNetwork.AMQP.Types fromList @ Text _" [orphan] forall @ a
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = MyNetwork.AMQP.Types.$fBinaryFieldTable_$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

