
==================== FINAL INTERFACE ====================
2019-09-26 17:12:10.044467 UTC

interface largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC:MyNetwork.AMQP.Protocol 8044
  interface hash: f39a3ec02d8966e745c99e95c87f309a
  ABI hash: b92196e3c7a16fd80fef33a8a412b425
  export-list hash: c5150fd429b112584b951a68101fa687
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9c4831a6e049578f2f855ee140344e7b
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyNetwork.AMQP.Protocol.frameType
  MyNetwork.AMQP.Protocol.getPayload
  MyNetwork.AMQP.Protocol.hasContent
  MyNetwork.AMQP.Protocol.peekFrameSize
  MyNetwork.AMQP.Protocol.putPayload
  MyNetwork.AMQP.Protocol.Frame{MyNetwork.AMQP.Protocol.Frame}
  MyNetwork.AMQP.Protocol.FramePayload{MyNetwork.AMQP.Protocol.ContentBodyPayload MyNetwork.AMQP.Protocol.ContentHeaderPayload MyNetwork.AMQP.Protocol.HeartbeatPayload MyNetwork.AMQP.Protocol.MethodPayload}
module dependencies: MyNetwork.AMQP.Generated MyNetwork.AMQP.Types
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 data-binary-ieee754-0.4.4
                      deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 text-1.2.3.1
orphans: text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Get 128c6b1e04dcd8453c5a7a652083702b
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal 1a063dbb1b51807d783806a64525f1eb
import  -/  binary-0.8.5.1:Data.Binary.Put 46413a3745068b8c82c5993962a4bce7
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Char8 5c0364969ac6eb9d0c5aa887f86b8c66
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Internal af245ead1f52eca50149d040b0b86693
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  MyNetwork.AMQP.Generated 90da3e6fbc699ef42abc037524eddac1
  exports: d4f7fdf541b79210f3809a636b8d849c
  Basic_deliver 52a24c107dd8369b7d34b16d7de77307
  Basic_get_ok 10e73919d837f4973417680b2a7bbb96
  Basic_return ce47853abf4c1d6caa86c2eb2ef6d783
  ContentHeaderProperties c20948d00d7211dcad96a6d620298a11
  MethodPayload d545a4d0fe3db4a1a490807052f182f2
  getContentHeaderProperties 64eb294ce72e4aa2d487eb11218b9e74
  putContentHeaderProperties 04c6491bbf9a145cf403cc66f652fd2a
import  -/  MyNetwork.AMQP.Types b8f148f2de1f7b1663f31cc0624f4831
  exports: 79710897a339f37e0aa0cd0013badcb8
  ChannelID 7096f7c57394498afd65a535be3b746b
  LongLongInt 763ed05ff03a034b2d61b6cd62071d38
  PayloadSize 962df974dbb399d6c1d53ebaddf217d4
  ShortInt 15f4581b8c999bc6f1b6893509e8bfe7
47a578378fd1692cc695ca1a378856ed
  $fBinaryFrame ::
    Data.Binary.Class.Binary MyNetwork.AMQP.Protocol.Frame
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Protocol.Frame
                  MyNetwork.AMQP.Protocol.$fBinaryFrame_$cput
                  MyNetwork.AMQP.Protocol.$fBinaryFrame3
                    `cast`
                  (Sym (Data.Binary.Get.Internal.N:Get[0]
                            <MyNetwork.AMQP.Protocol.Frame>_R))
                  MyNetwork.AMQP.Protocol.$fBinaryFrame_$sdefaultPutList -}
dac6aefe9233a4081230ead7c60a0162
  $fBinaryFrame1 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BufferRange
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U(U,U)><S,U> -}
aeb75a88fa723c4c6e8c8e912987a440
  $fBinaryFrame2 ::
    Data.ByteString.Builder.Internal.BuildStep r
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (MyNetwork.AMQP.Protocol.$fBinaryFrame1
                   Data.ByteString.Lazy.Internal.Empty) -}
47a578378fd1692cc695ca1a378856ed
  $fBinaryFrame3 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success MyNetwork.AMQP.Protocol.Frame r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Protocol.Frame r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 MyNetwork.AMQP.Protocol.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
47a578378fd1692cc695ca1a378856ed
  $fBinaryFrame_$cput ::
    MyNetwork.AMQP.Protocol.Frame -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U(U(U),U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Protocol.Frame) ->
                 case w of ww { MyNetwork.AMQP.Protocol.Frame ww1 ww2 ->
                 case MyNetwork.AMQP.Protocol.$w$cput
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Data.Binary.Put.PairS @ () ww4 ww5)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) } }) -}
47a578378fd1692cc695ca1a378856ed
  $fBinaryFrame_$sdefaultPutList ::
    [MyNetwork.AMQP.Protocol.Frame] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (xs :: [MyNetwork.AMQP.Protocol.Frame]) ->
                 Data.Binary.Put.$WPairS
                   @ ()
                   GHC.Tuple.()
                   (Data.ByteString.Builder.Internal.append
                      (Data.ByteString.Builder.Prim.primBounded
                         @ GHC.Int.Int64
                         Data.Binary.Class.$dmputList1
                         (case GHC.Base.foldr
                                 @ MyNetwork.AMQP.Protocol.Frame
                                 @ (GHC.Types.Int -> GHC.Types.Int)
                                 (GHC.List.lengthFB @ MyNetwork.AMQP.Protocol.Frame)
                                 GHC.List.idLength
                                 xs
                                 (GHC.Types.I# 0#) of wild { GHC.Types.I# x# ->
                          GHC.Int.I64# x# }))
                      (case (GHC.Base.foldr
                               @ MyNetwork.AMQP.Protocol.Frame
                               @ (Data.Binary.Put.PutM ())
                               (\ (x :: MyNetwork.AMQP.Protocol.Frame) ->
                                Data.Binary.Put.$fApplicativePutM_$c*>
                                  @ ()
                                  @ ()
                                  (MyNetwork.AMQP.Protocol.$fBinaryFrame_$cput x))
                               (Data.Binary.Put.$WPairS
                                  @ ()
                                  GHC.Tuple.()
                                  Data.ByteString.Builder.Internal.empty)
                                 `cast`
                               (Sym (Data.Binary.Put.N:PutM[0]) <()>_N)
                               xs)
                              `cast`
                            (Data.Binary.Put.N:PutM[0] <()>_N) of wild { Data.Binary.Put.PairS ds w' ->
                       w' })))
                  `cast`
                (<[MyNetwork.AMQP.Protocol.Frame]>_R
                 ->_R Sym (Data.Binary.Put.N:PutM[0]) <()>_N) -}
47a578378fd1692cc695ca1a378856ed
  $fShowFrame :: GHC.Show.Show MyNetwork.AMQP.Protocol.Frame
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Protocol.Frame
                  MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec1
                  MyNetwork.AMQP.Protocol.$fShowFrame_$cshow
                  MyNetwork.AMQP.Protocol.$fShowFrame_$cshowList -}
47a578378fd1692cc695ca1a378856ed
  $fShowFrame1 :: MyNetwork.AMQP.Protocol.Frame -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U),1*U)>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Protocol.Frame) ->
                 case w of ww { MyNetwork.AMQP.Protocol.Frame ww1 ww2 ->
                 MyNetwork.AMQP.Protocol.$w$cshowsPrec 0# ww1 ww2 }) -}
b134e76736eb447e016e2cf004f80673
  $fShowFrame10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MethodPayload "#) -}
b66daa42abf03c57f7237c238d93321d
  $fShowFrame2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame "#) -}
788bb03d044c9b5a060dbe0f4db544aa
  $fShowFrame3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
e29e68dddbd63acccc35e844d663e7aa
  $fShowFrame4 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   MyNetwork.AMQP.Protocol.$fShowFrame5) -}
1a96b6152a7a74cc38e39f6e5c830518
  $fShowFrame5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Protocol.$fShowFrame6) -}
0c9227b8b73f43afc67fe73a80614650
  $fShowFrame6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HeartbeatPayload"#) -}
92b2bde0a534a251faa5d913a88a13b6
  $fShowFrame7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContentBodyPayload "#) -}
bdc99bbc3fe9ca5e0f57fd15005c8267
  $fShowFrame8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContentHeaderPayload "#) -}
873798ff54fc7da05dbfe7d2d7dae934
  $fShowFrame9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Protocol.$fShowFrame10) -}
757008d86652484cfe705496d6992b77
  $fShowFramePayload ::
    GHC.Show.Show MyNetwork.AMQP.Protocol.FramePayload
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Protocol.FramePayload
                  MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec
                  MyNetwork.AMQP.Protocol.$fShowFramePayload_$cshow
                  MyNetwork.AMQP.Protocol.$fShowFramePayload_$cshowList -}
757008d86652484cfe705496d6992b77
  $fShowFramePayload1 ::
    MyNetwork.AMQP.Protocol.FramePayload -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec
                   MyNetwork.AMQP.Protocol.$fShowFramePayload2) -}
a4aede19278c75d38d00075611fda892
  $fShowFramePayload2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
757008d86652484cfe705496d6992b77
  $fShowFramePayload_$cshow ::
    MyNetwork.AMQP.Protocol.FramePayload -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec
                   MyNetwork.AMQP.Protocol.$fShowFramePayload2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
757008d86652484cfe705496d6992b77
  $fShowFramePayload_$cshowList ::
    [MyNetwork.AMQP.Protocol.FramePayload] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Protocol.FramePayload])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Protocol.FramePayload
                   MyNetwork.AMQP.Protocol.$fShowFramePayload1
                   ls
                   s) -}
47a578378fd1692cc695ca1a378856ed
  $fShowFrame_$cshow ::
    MyNetwork.AMQP.Protocol.Frame -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Protocol.Frame) ->
                 case w of ww { MyNetwork.AMQP.Protocol.Frame ww1 ww2 ->
                 MyNetwork.AMQP.Protocol.$w$cshow ww1 ww2 }) -}
47a578378fd1692cc695ca1a378856ed
  $fShowFrame_$cshowList ::
    [MyNetwork.AMQP.Protocol.Frame] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Protocol.Frame])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Protocol.Frame
                   MyNetwork.AMQP.Protocol.$fShowFrame1
                   ls
                   s) -}
757008d86652484cfe705496d6992b77
  $fShowFrame_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Protocol.FramePayload -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 case ds of wild {
                   MyNetwork.AMQP.Protocol.MethodPayload b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = MyNetwork.AMQP.Generated.$fShowMethodPayload_$cshowsPrec
                            MyNetwork.AMQP.Protocol.$fShowFrame3
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             MyNetwork.AMQP.Protocol.$fShowFrame9
                             (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                MyNetwork.AMQP.Protocol.$fShowFrame9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   MyNetwork.AMQP.Protocol.ContentHeaderPayload b1 b2 b3 b4
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        w1 :: GHC.Integer.Type.Integer
                        = case b3 of wild2 { GHC.Word.W64# x# ->
                          let {
                            i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                          } in
                          case GHC.Prim.>=# i# 0# of lwild {
                            DEFAULT -> GHC.Integer.Type.wordToInteger x#
                            1# -> GHC.Integer.Type.smallInteger i# } }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = MyNetwork.AMQP.Generated.$fShowContentHeaderProperties_$cshowsPrec
                            MyNetwork.AMQP.Protocol.$fShowFrame3
                            b4
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            MyNetwork.AMQP.Protocol.$fShowFrame8
                            (case b1 of wild2 { GHC.Word.W16# x# ->
                             case GHC.Show.$wshowSignedInt
                                    11#
                                    (GHC.Prim.word2Int# x#)
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showSpace1
                                       (case b2 of wild3 { GHC.Word.W16# x#1 ->
                                        case GHC.Show.$wshowSignedInt
                                               11#
                                               (GHC.Prim.word2Int# x#1)
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showSpace1
                                                  (case GHC.Show.$w$cshowsPrec4
                                                          11#
                                                          w1
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.showSpace1
                                                             (g x1)) of ww2 { (#,#) ww3 ww4 ->
                                                   GHC.Types.:
                                                     @ GHC.Types.Char
                                                     ww3
                                                     ww4 })) of ww4 { (#,#) ww5 ww6 ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          ww5
                                          ww6 } })) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)) } }
                   MyNetwork.AMQP.Protocol.ContentBodyPayload b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        lvl5 :: [GHC.Types.Char]
                        = Data.ByteString.Lazy.Internal.unpackChars b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             MyNetwork.AMQP.Protocol.$fShowFrame7
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   lvl5
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x1)))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Protocol.$fShowFrame7
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      lvl5
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x1))))) } }
                   MyNetwork.AMQP.Protocol.HeartbeatPayload
                   -> MyNetwork.AMQP.Protocol.$fShowFrame4 }) -}
47a578378fd1692cc695ca1a378856ed
  $fShowFrame_$cshowsPrec1 ::
    GHC.Types.Int -> MyNetwork.AMQP.Protocol.Frame -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.Protocol.Frame) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Protocol.Frame ww3 ww4 ->
                 MyNetwork.AMQP.Protocol.$w$cshowsPrec ww1 ww3 ww4 } }) -}
18a6b4dfcfaaacf2c69de728c45f18d3
  $tc'ContentBodyPayload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1735956446311307305##
                   11477364978059418782##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tc'ContentBodyPayload2
                   0#
                   MyNetwork.AMQP.Protocol.$tc'ContentBodyPayload1) -}
887f16b8e0a548c9828e09eae3f2c84d
  $tc'ContentBodyPayload1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f34bfdce99e9b397e5b64f359780e1c7
  $tc'ContentBodyPayload2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tc'ContentBodyPayload3) -}
ec22e27d195c6be6f5eb034400bda336
  $tc'ContentBodyPayload3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ContentBodyPayload"#) -}
1747431a48f49ddcc7bbf65ce4733d6d
  $tc'ContentHeaderPayload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1000896115411532532##
                   13594842490124244892##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tc'ContentHeaderPayload2
                   0#
                   MyNetwork.AMQP.Protocol.$tc'ContentHeaderPayload1) -}
87a0c3002f985967e3ab7329927f06fa
  $tc'ContentHeaderPayload1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c6f3932fcb5f7f0ece044441255defb9
  $tc'ContentHeaderPayload2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tc'ContentHeaderPayload3) -}
43aae42207d053bc3926d501753fa293
  $tc'ContentHeaderPayload3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ContentHeaderPayload"#) -}
2865f74ee8195465f44eec390f647c5a
  $tc'Frame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2250289531219200534##
                   12504583546092066803##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tc'Frame2
                   0#
                   MyNetwork.AMQP.Protocol.$tc'Frame1) -}
78112714f85e39fb14b0d6ead520d508
  $tc'Frame1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
da73d7cb7ee89fef9266a5c5ad1c9569
  $tc'Frame2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tc'Frame3) -}
df61a2c539af676f3bffa20732285f60
  $tc'Frame3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Frame"#) -}
7da3f5ed4c5b174066449d43da0d9070
  $tc'HeartbeatPayload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12694065693437817059##
                   1995587467177785515##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tc'HeartbeatPayload2
                   0#
                   MyNetwork.AMQP.Protocol.$tc'HeartbeatPayload1) -}
e12d4539bc45291710a9f1f42642a298
  $tc'HeartbeatPayload1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
424518b09dfd3e38f7d1af9f10c15376
  $tc'HeartbeatPayload2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tc'HeartbeatPayload3) -}
250714f3860cf9d6a3cf148f41cff1d3
  $tc'HeartbeatPayload3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HeartbeatPayload"#) -}
27ffd28a87a72611ffa8cc118c026a68
  $tc'MethodPayload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3652187281792625679##
                   728529978669752335##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tc'MethodPayload2
                   0#
                   MyNetwork.AMQP.Protocol.$tc'MethodPayload1) -}
7e95a8ca2314df7e1d8dc715ad6eb8f8
  $tc'MethodPayload1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ab28145f9474b5013093cd190ea76a1c
  $tc'MethodPayload2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tc'MethodPayload3) -}
bac0b76da16fa376ef6eec9ed630db86
  $tc'MethodPayload3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MethodPayload"#) -}
4c14ce00d31d3ebc4a8411252cfe5891
  $tcFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2823691760999948401##
                   10276987322443048916##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tcFrame1
                   0#
                   GHC.Types.krep$*) -}
e7af4eec18a83f8531f363fbc8dafc28
  $tcFrame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyNetwork.AMQP.Protocol.$tcFrame2) -}
5b959b356b097eac52357e89d2c0b007
  $tcFrame2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Frame"#) -}
9dbca12e215d3c4cc4ae531527cc5e44
  $tcFramePayload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2246278685976216625##
                   7511065607448129024##
                   MyNetwork.AMQP.Protocol.$trModule
                   MyNetwork.AMQP.Protocol.$tcFramePayload1
                   0#
                   GHC.Types.krep$*) -}
64079b14522f495cf121707793c42ae2
  $tcFramePayload1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$tcFramePayload2) -}
07076d55368cd7f418721fd93a94c84e
  $tcFramePayload2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FramePayload"#) -}
cf38c88e2dade725a3a85a4fcc06ccd8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyNetwork.AMQP.Protocol.$trModule3
                   MyNetwork.AMQP.Protocol.$trModule1) -}
0c7e743a7af446d3a10bacfe5bda0569
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$trModule2) -}
f63f90b947eeb05924e408c8826db05b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyNetwork.AMQP.Protocol"#) -}
a31dc2b1a4eea9f34d7738c8fdd92ffa
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Protocol.$trModule4) -}
5010714e3322e9b92cd2783732ae12ae
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC"#) -}
47a578378fd1692cc695ca1a378856ed
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success MyNetwork.AMQP.Protocol.Frame r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0] -}
cf671d695f62b06012f537ceecef1e02
  $w$cput ::
    MyNetwork.AMQP.Types.ChannelID
    -> MyNetwork.AMQP.Protocol.FramePayload
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, Strictness: <L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Types.ChannelID)
                   (ww1 :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 let {
                   buf :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.ByteString.Builder.toLazyByteString
                       (case MyNetwork.AMQP.Protocol.$wputPayload
                               ww1 of ww2 { (#,#) ww3 ww4 ->
                        ww4 })
                 } in
                 (# GHC.Tuple.(),
                    (\ @ r ->
                     let {
                       x :: GHC.Word.Word32 = MyNetwork.AMQP.Protocol.$wgo3 0# buf
                     } in
                     (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r)
                        (eta :: Data.ByteString.Builder.Internal.BufferRange)
                        (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case eta of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                      let {
                        lvl5 :: Data.ByteString.Builder.Internal.BufferRange
                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.ByteString.Builder.Internal.BuildSignal r #)
                          {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                        = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                            (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                          case GHC.Prim.writeWord8OffAddr#
                                 @ GHC.Prim.RealWorld
                                 dt2
                                 0#
                                 206##
                                 eta2 of s2 { DEFAULT ->
                          (x1
                             (Data.ByteString.Builder.Internal.BufferRange
                                (GHC.Prim.plusAddr# dt2 1#)
                                dt3))
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                            s2 } }
                      } in
                      let {
                        x2 :: Data.ByteString.Builder.Internal.BufferRange
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    Data.ByteString.Builder.Internal.BuildSignal r #)
                          {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [0],
                             Unfolding: InlineRule (2, True, False)
                                        (\ (w :: Data.ByteString.Builder.Internal.BufferRange)
                                           (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                         case w of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                         case GHC.Prim.<#
                                                (GHC.Prim.minusAddr# ww4 ww3)
                                                1# of lwild {
                                           DEFAULT
                                           -> case GHC.Prim.writeWord8OffAddr#
                                                     @ GHC.Prim.RealWorld
                                                     ww3
                                                     0#
                                                     206##
                                                     w1 of s2 { DEFAULT ->
                                              (x1
                                                 (Data.ByteString.Builder.Internal.BufferRange
                                                    (GHC.Prim.plusAddr# ww3 1#)
                                                    ww4))
                                                `cast`
                                              (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)
                                                s2 }
                                           1#
                                           -> (# w1,
                                                 Data.ByteString.Builder.Internal.BufferFull
                                                   @ r
                                                   1#
                                                   ww3
                                                   lvl5
                                                     `cast`
                                                   (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <Data.ByteString.Builder.Internal.BuildSignal
                                                                     r>_R)) #) } }) -}
                        = \ (w :: Data.ByteString.Builder.Internal.BufferRange)
                            (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case w of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                          case GHC.Prim.<# (GHC.Prim.minusAddr# ww4 ww3) 1# of lwild {
                            DEFAULT
                            -> case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      ww3
                                      0#
                                      206##
                                      w1 of s2 { DEFAULT ->
                               (x1
                                  (Data.ByteString.Builder.Internal.BufferRange
                                     (GHC.Prim.plusAddr# ww3 1#)
                                     ww4))
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                 s2 }
                            1#
                            -> (# w1,
                                  Data.ByteString.Builder.Internal.BufferFull
                                    @ r
                                    1#
                                    ww3
                                    lvl5
                                      `cast`
                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R)) #) } }
                      } in
                      case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 7# of lwild {
                        DEFAULT
                        -> let {
                             $j :: GHC.Prim.Word#
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.ByteString.Builder.Internal.BuildSignal r #)
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (x3 :: GHC.Prim.Word#)[OneShot] ->
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      dt
                                      0#
                                      x3
                                      eta1 of s2 { DEFAULT ->
                               case ww of wild1 { GHC.Word.W16# w1 ->
                               let {
                                 ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 1#
                               } in
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      ipv1
                                      0#
                                      (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                      s2 of s1 { DEFAULT ->
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      (GHC.Prim.plusAddr# ipv1 1#)
                                      0#
                                      (GHC.Prim.narrow8Word# w1)
                                      s1 of s3 { DEFAULT ->
                               case x of wild2 { GHC.Word.W32# w2 ->
                               let {
                                 ipv2 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ipv1 2#
                               } in
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      ipv2
                                      0#
                                      (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 24#))
                                      s3 of s4 { DEFAULT ->
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      (GHC.Prim.plusAddr# ipv2 1#)
                                      0#
                                      (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 16#))
                                      s4 of s5 { DEFAULT ->
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      (GHC.Prim.plusAddr# ipv2 2#)
                                      0#
                                      (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                      s5 of s6 { DEFAULT ->
                               case GHC.Prim.writeWord8OffAddr#
                                      @ GHC.Prim.RealWorld
                                      (GHC.Prim.plusAddr# ipv2 3#)
                                      0#
                                      (GHC.Prim.narrow8Word# w2)
                                      s6 of s7 { DEFAULT ->
                               MyNetwork.AMQP.Protocol.$fBinaryFrame1
                                 buf
                                 @ r
                                 x2
                                   `cast`
                                 (<Data.ByteString.Builder.Internal.BufferRange>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# ipv2 4#)
                                    dt1)
                                 s7 } } } } } } } } }
                           } in
                           case ww1 of wild1 {
                             MyNetwork.AMQP.Protocol.MethodPayload ds -> $j 1##
                             MyNetwork.AMQP.Protocol.ContentHeaderPayload ds ds1 ds2 ds3
                             -> $j 2##
                             MyNetwork.AMQP.Protocol.ContentBodyPayload ds -> $j 3##
                             MyNetwork.AMQP.Protocol.HeartbeatPayload -> $j 8## }
                        1#
                        -> (# eta1,
                              Data.ByteString.Builder.Internal.BufferFull
                                @ r
                                7#
                                dt
                                (\ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt2 dt3 ->
                                 let {
                                   $j :: GHC.Prim.Word#
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.ByteString.Builder.Internal.BuildSignal r #)
                                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                                   = \ (x3 :: GHC.Prim.Word#)[OneShot] ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            dt2
                                            0#
                                            x3
                                            eta2 of s2 { DEFAULT ->
                                     case ww of wild2 { GHC.Word.W16# w1 ->
                                     let {
                                       ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt2 1#
                                     } in
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            ipv1
                                            0#
                                            (GHC.Prim.narrow8Word#
                                               (GHC.Prim.uncheckedShiftRL# w1 8#))
                                            s2 of s1 { DEFAULT ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr# ipv1 1#)
                                            0#
                                            (GHC.Prim.narrow8Word# w1)
                                            s1 of s3 { DEFAULT ->
                                     case x of wild3 { GHC.Word.W32# w2 ->
                                     let {
                                       ipv2 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ipv1 2#
                                     } in
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            ipv2
                                            0#
                                            (GHC.Prim.narrow8Word#
                                               (GHC.Prim.uncheckedShiftRL# w2 24#))
                                            s3 of s4 { DEFAULT ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr# ipv2 1#)
                                            0#
                                            (GHC.Prim.narrow8Word#
                                               (GHC.Prim.uncheckedShiftRL# w2 16#))
                                            s4 of s5 { DEFAULT ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr# ipv2 2#)
                                            0#
                                            (GHC.Prim.narrow8Word#
                                               (GHC.Prim.uncheckedShiftRL# w2 8#))
                                            s5 of s6 { DEFAULT ->
                                     case GHC.Prim.writeWord8OffAddr#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.plusAddr# ipv2 3#)
                                            0#
                                            (GHC.Prim.narrow8Word# w2)
                                            s6 of s7 { DEFAULT ->
                                     MyNetwork.AMQP.Protocol.$fBinaryFrame1
                                       buf
                                       @ r
                                       x2
                                         `cast`
                                       (<Data.ByteString.Builder.Internal.BufferRange>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <Data.ByteString.Builder.Internal.BuildSignal
                                                         r>_R))
                                       (Data.ByteString.Builder.Internal.BufferRange
                                          (GHC.Prim.plusAddr# ipv2 4#)
                                          dt3)
                                       s7 } } } } } } } } }
                                 } in
                                 case ww1 of wild2 {
                                   MyNetwork.AMQP.Protocol.MethodPayload ds1 -> $j 1##
                                   MyNetwork.AMQP.Protocol.ContentHeaderPayload ds1 ds2 ds3 ds4
                                   -> $j 2##
                                   MyNetwork.AMQP.Protocol.ContentBodyPayload ds1 -> $j 3##
                                   MyNetwork.AMQP.Protocol.HeartbeatPayload -> $j 8## } })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) #) } })
                       `cast`
                     (<Data.ByteString.Builder.Internal.BuildStep r>_R
                      ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                      `cast`
                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)) -}
b15d48d767a4cdaf207d6d91f01115b0
  $w$cshow ::
    MyNetwork.AMQP.Types.ChannelID
    -> MyNetwork.AMQP.Protocol.FramePayload -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Types.ChannelID)
                   (ww1 :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 GHC.CString.unpackAppendCString#
                   MyNetwork.AMQP.Protocol.$fShowFrame2
                   (case ww of wild { GHC.Word.W16# x# ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           (GHC.Prim.word2Int# x#)
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec
                                 MyNetwork.AMQP.Protocol.$fShowFrame3
                                 ww1
                                 (GHC.Types.[] @ GHC.Types.Char))) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
ab0ae77112c1a30b73795df2c1ada7c5
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Types.ChannelID
    -> MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: MyNetwork.AMQP.Types.ChannelID)
                   (ww2 :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = MyNetwork.AMQP.Protocol.$fShowFrame_$cshowsPrec
                       MyNetwork.AMQP.Protocol.$fShowFrame3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       MyNetwork.AMQP.Protocol.$fShowFrame2
                       (case ww1 of wild { GHC.Word.W16# x# ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               (GHC.Prim.word2Int# x#)
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (g x)) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
e6b39a001e677a8d8bd76c8c796ac15f
  $wgetPayload ::
    GHC.Prim.Word#
    -> MyNetwork.AMQP.Types.PayloadSize
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            MyNetwork.AMQP.Protocol.FramePayload r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U)><L,U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0] -}
2896fdf4814188ed610659f2c8db0cde
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString -> GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>m,
     Inline: [0] -}
7e1e3dc55fd3a75294c639c3c3a4edbc
  $wlvl ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Decoder
         MyNetwork.AMQP.Types.PayloadSize
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww3 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Protocol.peekFrameSize9
                        MyNetwork.AMQP.Protocol.peekFrameSize8
                        MyNetwork.AMQP.Protocol.peekFrameSize7
                        MyNetwork.AMQP.Protocol.peekFrameSize4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ MyNetwork.AMQP.Types.PayloadSize
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        MyNetwork.AMQP.Protocol.peekFrameSize3
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      Data.Binary.Get.Internal.Done
                        @ MyNetwork.AMQP.Types.PayloadSize
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 4#)
                           (GHC.Prim.-# ww3 4#))
                        (GHC.Word.W32#
                           (GHC.Prim.or#
                              (GHC.Prim.or#
                                 (GHC.Prim.or#
                                    (GHC.Prim.uncheckedShiftL# ipv1 24#)
                                    (GHC.Prim.uncheckedShiftL# ipv3 16#))
                                 (GHC.Prim.uncheckedShiftL# ipv5 8#))
                              ipv7)) } } } } } } } } }) -}
f94eeca3834edbee07e3d8f9f4d53c53
  $wputPayload ::
    MyNetwork.AMQP.Protocol.FramePayload
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 case w of wild {
                   MyNetwork.AMQP.Protocol.MethodPayload payload
                   -> MyNetwork.AMQP.Generated.$w$cput payload
                   MyNetwork.AMQP.Protocol.ContentHeaderPayload classID weight bodySize p
                   -> let {
                        k :: Data.Binary.Put.PutM ()
                        = case MyNetwork.AMQP.Generated.$wputContentHeaderProperties
                                 p of ww { (#,#) ww1 ww2 ->
                          (Data.Binary.Put.PairS @ () ww1 ww2)
                            `cast`
                          (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }
                      } in
                      (# case k `cast`
                              (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                         b1 },
                         (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                          let {
                            x1 :: Data.ByteString.Builder.Internal.BuildStep r
                            = case k `cast`
                                   (Data.Binary.Put.N:PutM[0] <()>_N) of wild1 { Data.Binary.Put.PairS b1 w' ->
                              w' `cast` (Data.ByteString.Builder.Internal.N:Builder[0]) @ r x }
                          } in
                          let {
                            lvl5 :: Data.ByteString.Builder.Internal.BufferRange
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.ByteString.Builder.Internal.BuildSignal r #)
                              {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U> -}
                            = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                              case classID of wild2 { GHC.Word.W16# w1 ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     dt
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                     eta of s2 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# dt 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# w1)
                                     s2 of s1 { DEFAULT ->
                              case weight of wild3 { GHC.Word.W16# w2 ->
                              let {
                                ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 2#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                     s1 of s4 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv1 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# w2)
                                     s4 of s5 { DEFAULT ->
                              case bodySize of wild4 { GHC.Word.W64# w3 ->
                              let {
                                ipv2 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ipv1 2#
                              } in
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ipv2
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 56#))
                                     s5 of s6 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 1#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 48#))
                                     s6 of s7 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 2#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 40#))
                                     s7 of s3 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 3#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 32#))
                                     s3 of s8 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 4#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 24#))
                                     s8 of s9 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 5#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 16#))
                                     s9 of s10 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 6#)
                                     0#
                                     (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 8#))
                                     s10 of s11 { DEFAULT ->
                              case GHC.Prim.writeWord8OffAddr#
                                     @ GHC.Prim.RealWorld
                                     (GHC.Prim.plusAddr# ipv2 7#)
                                     0#
                                     (GHC.Prim.narrow8Word# w3)
                                     s11 of s12 { DEFAULT ->
                              (x1
                                 (Data.ByteString.Builder.Internal.BufferRange
                                    (GHC.Prim.plusAddr# ipv2 8#)
                                    dt1))
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                s12 } } } } } } } } } } } } } } } }
                          } in
                          (\ (eta :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case eta of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# dt1 dt) 12# of lwild {
                             DEFAULT
                             -> case classID of wild2 { GHC.Word.W16# w1 ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w1 8#))
                                       eta1 of s2 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# dt 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# w1)
                                       s2 of s1 { DEFAULT ->
                                case weight of wild3 { GHC.Word.W16# w2 ->
                                let {
                                  ipv1 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# dt 2#
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ipv1
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w2 8#))
                                       s1 of s4 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv1 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# w2)
                                       s4 of s5 { DEFAULT ->
                                case bodySize of wild4 { GHC.Word.W64# w3 ->
                                let {
                                  ipv2 :: GHC.Prim.Addr# = GHC.Prim.plusAddr# ipv1 2#
                                } in
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ipv2
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 56#))
                                       s5 of s6 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 1#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 48#))
                                       s6 of s7 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 2#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 40#))
                                       s7 of s3 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 3#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 32#))
                                       s3 of s8 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 4#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 24#))
                                       s8 of s9 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 5#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 16#))
                                       s9 of s10 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 6#)
                                       0#
                                       (GHC.Prim.narrow8Word# (GHC.Prim.uncheckedShiftRL# w3 8#))
                                       s10 of s11 { DEFAULT ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       (GHC.Prim.plusAddr# ipv2 7#)
                                       0#
                                       (GHC.Prim.narrow8Word# w3)
                                       s11 of s12 { DEFAULT ->
                                (x1
                                   (Data.ByteString.Builder.Internal.BufferRange
                                      (GHC.Prim.plusAddr# ipv2 8#)
                                      dt1))
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R)
                                  s12 } } } } } } } } } } } } } } }
                             1#
                             -> (# eta1,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r
                                     12#
                                     dt
                                     lvl5
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r>_R)) #) } })
                            `cast`
                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                           `cast`
                         (Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   MyNetwork.AMQP.Protocol.ContentBodyPayload payload
                   -> (# GHC.Tuple.(),
                         (MyNetwork.AMQP.Protocol.$fBinaryFrame1 payload)
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #)
                   MyNetwork.AMQP.Protocol.HeartbeatPayload
                   -> (# GHC.Tuple.(),
                         MyNetwork.AMQP.Protocol.$fBinaryFrame2
                           `cast`
                         ((forall (r :: <*>_N).
                           <Data.ByteString.Builder.Internal.BuildStep r>_R
                           ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.ByteString.Builder.Internal.BuildSignal
                                            r>_R)) ; Sym (Data.ByteString.Builder.Internal.N:Builder[0])) #) }) -}
47a578378fd1692cc695ca1a378856ed
  data Frame
    = Frame MyNetwork.AMQP.Types.ChannelID
            MyNetwork.AMQP.Protocol.FramePayload
757008d86652484cfe705496d6992b77
  data FramePayload
    = MethodPayload MyNetwork.AMQP.Generated.MethodPayload
    | ContentHeaderPayload MyNetwork.AMQP.Types.ShortInt
                           MyNetwork.AMQP.Types.ShortInt
                           MyNetwork.AMQP.Types.LongLongInt
                           MyNetwork.AMQP.Generated.ContentHeaderProperties
    | ContentBodyPayload Data.ByteString.Lazy.Internal.ByteString
    | HeartbeatPayload
8c32afe6ee4c9a547953b5c04aed01ea
  frameType :: MyNetwork.AMQP.Protocol.FramePayload -> GHC.Word.Word8
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 case ds of wild {
                   MyNetwork.AMQP.Protocol.MethodPayload ds1
                   -> MyNetwork.AMQP.Protocol.frameType4
                   MyNetwork.AMQP.Protocol.ContentHeaderPayload ds1 ds2 ds3 ds4
                   -> MyNetwork.AMQP.Protocol.frameType3
                   MyNetwork.AMQP.Protocol.ContentBodyPayload ds1
                   -> MyNetwork.AMQP.Protocol.frameType2
                   MyNetwork.AMQP.Protocol.HeartbeatPayload
                   -> MyNetwork.AMQP.Protocol.frameType1 }) -}
2b253f86adb1dac910f9f215894e0e55
  frameType1 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 8##) -}
b7358e5ef6c20e7aa7581c7ea841081a
  frameType2 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 3##) -}
a1e262843f56f3be8e11a3fbf2bb3e53
  frameType3 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 2##) -}
4110f153e3372b5b350a07f924a38ebe
  frameType4 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 1##) -}
e1c31d02e7b070a1efea8dde055f3694
  getPayload ::
    GHC.Word.Word8
    -> MyNetwork.AMQP.Types.PayloadSize
    -> Data.Binary.Get.Internal.Get
         MyNetwork.AMQP.Protocol.FramePayload
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><L,1*U(U)><L,U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Protocol.getPayload1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R <MyNetwork.AMQP.Types.PayloadSize>_R
                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                               <MyNetwork.AMQP.Protocol.FramePayload>_R)) -}
a542a51916615b9f6db0eb93a06ff130
  getPayload1 ::
    GHC.Word.Word8
    -> MyNetwork.AMQP.Types.PayloadSize
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            MyNetwork.AMQP.Protocol.FramePayload r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><L,1*U(U)><L,U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Word.Word8)
                   (w1 :: MyNetwork.AMQP.Types.PayloadSize)
                   @ r
                   (w2 :: Data.ByteString.Internal.ByteString)
                   (w3 :: Data.Binary.Get.Internal.Success
                            MyNetwork.AMQP.Protocol.FramePayload r) ->
                 case w of ww { GHC.Word.W8# ww1 ->
                 MyNetwork.AMQP.Protocol.$wgetPayload ww1 w1 @ r w2 w3 }) -}
88901fcabeb969dfbad036e504ab4a96
  hasContent ::
    MyNetwork.AMQP.Protocol.FramePayload -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   MyNetwork.AMQP.Protocol.MethodPayload ds1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Generated.Basic_return ds2 ds3 ds4 ds5
                        -> GHC.Types.True
                        MyNetwork.AMQP.Generated.Basic_deliver ds2 ds3 ds4 ds5 ds6
                        -> GHC.Types.True
                        MyNetwork.AMQP.Generated.Basic_get_ok ds2 ds3 ds4 ds5 ds6
                        -> GHC.Types.True } }) -}
43d202cc5e52721ee3c94fb1592c7ff1
  peekFrameSize ::
    Data.ByteString.Lazy.Internal.ByteString
    -> MyNetwork.AMQP.Types.PayloadSize
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (lbs0 :: Data.ByteString.Lazy.Internal.ByteString) ->
                 Data.Binary.Get.runGet3
                   @ MyNetwork.AMQP.Types.PayloadSize
                   MyNetwork.AMQP.Protocol.peekFrameSize1
                   lbs0) -}
a2c904bfcdc2cd1b0d0e8fe97d4bc332
  peekFrameSize1 ::
    Data.Binary.Get.Decoder MyNetwork.AMQP.Types.PayloadSize
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ MyNetwork.AMQP.Types.PayloadSize
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ MyNetwork.AMQP.Types.PayloadSize
                      (Data.Binary.Get.Internal.readN1
                         @ GHC.Types.Int
                         @ Data.ByteString.Internal.ByteString
                         MyNetwork.AMQP.Protocol.peekFrameSize_n1
                         MyNetwork.AMQP.Protocol.peekFrameSize8
                         MyNetwork.AMQP.Protocol.peekFrameSize7
                         (MyNetwork.AMQP.Protocol.peekFrameSize_onFail
                            @ Data.ByteString.Internal.ByteString)
                           `cast`
                         (<[Data.ByteString.Internal.ByteString]>_R
                          ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                        <Data.ByteString.Internal.ByteString>_R))
                         @ MyNetwork.AMQP.Types.PayloadSize
                         Data.ByteString.empty
                         MyNetwork.AMQP.Protocol.peekFrameSize2))
                   0#) -}
c3d27ef5e09c15caafe4116557d8f701
  peekFrameSize10 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder
         MyNetwork.AMQP.Types.PayloadSize
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 MyNetwork.AMQP.Protocol.$wlvl
                   dt
                   dt1
                   (GHC.Prim.+# dt2 2#)
                   (GHC.Prim.-# dt3 2#) } } } } }) -}
8582d63e03d241eff8d55659740f61ae
  peekFrameSize11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
83ab7946827c5b110cd3c777ddaa321d
  peekFrameSize2 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder
         MyNetwork.AMQP.Types.PayloadSize
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 let {
                   dt4 :: GHC.Prim.Int# = GHC.Prim.-# dt3 1#
                 } in
                 let {
                   dt5 :: GHC.Prim.Int# = GHC.Prim.+# dt2 1#
                 } in
                 case GHC.Prim.>=# dt4 2# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        MyNetwork.AMQP.Protocol.peekFrameSize11
                        MyNetwork.AMQP.Protocol.peekFrameSize8
                        MyNetwork.AMQP.Protocol.peekFrameSize7
                        MyNetwork.AMQP.Protocol.peekFrameSize4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ MyNetwork.AMQP.Types.PayloadSize
                        (Data.ByteString.Internal.PS dt dt1 dt5 dt4)
                        MyNetwork.AMQP.Protocol.peekFrameSize10
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt dt5)
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 1#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv4 of s'2 { DEFAULT ->
                      MyNetwork.AMQP.Protocol.$wlvl
                        dt
                        dt1
                        (GHC.Prim.+# dt5 2#)
                        (GHC.Prim.-# dt4 2#) } } } } } } } }) -}
5b3ce66525b9991a8d738fd155ee0133
  peekFrameSize3 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder
         MyNetwork.AMQP.Types.PayloadSize
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(SLSL),1*U(U,U,U,U)>m3,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 Data.Binary.Get.Internal.Done
                   @ MyNetwork.AMQP.Types.PayloadSize
                   (Data.ByteString.Internal.PS
                      dt
                      dt1
                      (GHC.Prim.+# dt2 4#)
                      (GHC.Prim.-# dt3 4#))
                   (GHC.Word.W32#
                      (GHC.Prim.or#
                         (GHC.Prim.or#
                            (GHC.Prim.or#
                               (GHC.Prim.uncheckedShiftL# ipv1 24#)
                               (GHC.Prim.uncheckedShiftL# ipv3 16#))
                            (GHC.Prim.uncheckedShiftL# ipv5 8#))
                         ipv7)) } } } } } } } } }) -}
af09a812cc5b16e1d4dfb5ae538b8fa3
  peekFrameSize4 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt
                   MyNetwork.AMQP.Protocol.peekFrameSize5 }) -}
1559b61d7659554115f75e9c58cedb1d
  peekFrameSize5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Protocol.peekFrameSize6) -}
e805c65b0a83b1b3f18a10d68957b511
  peekFrameSize6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
cb8e2b770dc498b5cbc6201c00ca8946
  peekFrameSize7 ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
c26c10d3cf191691cdd0df58b2949183
  peekFrameSize8 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str2 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
44fb9a3e483c0f4fd44a8ed10a420ad0
  peekFrameSize9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
61de0909fba4a94e285d1f41f205e725
  peekFrameSize_n1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
a6ddd6ae440f1ac7b4a0c54194833979
  peekFrameSize_onFail ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success a1 r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success a1 r) ->
                 case Data.ByteString.concat
                        w of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt
                   (GHC.CString.unpackCString# "not enough bytes"#) }) -}
fa6bf8dc10018d0b5f03a4959d908bec
  putPayload ::
    MyNetwork.AMQP.Protocol.FramePayload -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Protocol.FramePayload) ->
                 case MyNetwork.AMQP.Protocol.$wputPayload
                        w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
instance Data.Binary.Class.Binary [MyNetwork.AMQP.Protocol.Frame]
  = MyNetwork.AMQP.Protocol.$fBinaryFrame
instance GHC.Show.Show [MyNetwork.AMQP.Protocol.Frame]
  = MyNetwork.AMQP.Protocol.$fShowFrame
instance GHC.Show.Show [MyNetwork.AMQP.Protocol.FramePayload]
  = MyNetwork.AMQP.Protocol.$fShowFramePayload
"SPEC/MyNetwork.AMQP.Protocol defaultPutList @ Frame" forall ($dBinary :: Data.Binary.Class.Binary
                                                                            MyNetwork.AMQP.Protocol.Frame)
  Data.Binary.Class.defaultPutList @ MyNetwork.AMQP.Protocol.Frame
                                   $dBinary
  = MyNetwork.AMQP.Protocol.$fBinaryFrame_$sdefaultPutList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

