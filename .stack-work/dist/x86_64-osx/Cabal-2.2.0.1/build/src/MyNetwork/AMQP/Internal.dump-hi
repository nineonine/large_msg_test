
==================== FINAL INTERFACE ====================
2019-09-26 17:12:14.537967 UTC

interface largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC:MyNetwork.AMQP.Internal 8044
  interface hash: fa802f9384e460e1daa73a07245458bb
  ABI hash: 0b8431299e0481cf499af36ef840bd59
  export-list hash: d3ebd44eea6f30df90048a921319ab8b
  orphan hash: a1566a2e77f46eb7b449ec0699892676
  flag hash: 9fb2ee1feaf9a1feda38f9954cb924a0
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyNetwork.AMQP.Internal.addChannelExceptionHandler
  MyNetwork.AMQP.Internal.addConnectionBlockedHandler
  MyNetwork.AMQP.Internal.addConnectionClosedHandler
  MyNetwork.AMQP.Internal.addReturnListener
  MyNetwork.AMQP.Internal.channelReceiver
  MyNetwork.AMQP.Internal.closeChannel
  MyNetwork.AMQP.Internal.closeChannel'
  MyNetwork.AMQP.Internal.closeConnection
  MyNetwork.AMQP.Internal.collectContent
  MyNetwork.AMQP.Internal.connectionGetExact
  MyNetwork.AMQP.Internal.connectionReceiver
  MyNetwork.AMQP.Internal.connectionTLSSettings
  MyNetwork.AMQP.Internal.deliveryModeToInt
  MyNetwork.AMQP.Internal.getServerProperties
  MyNetwork.AMQP.Internal.intToDeliveryMode
  MyNetwork.AMQP.Internal.killConnection
  MyNetwork.AMQP.Internal.msgFromContentHeaderProperties
  MyNetwork.AMQP.Internal.openChannel
  MyNetwork.AMQP.Internal.openConnection''
  MyNetwork.AMQP.Internal.readAssembly
  MyNetwork.AMQP.Internal.readFrame
  MyNetwork.AMQP.Internal.request
  MyNetwork.AMQP.Internal.throwMostRelevantAMQPException
  MyNetwork.AMQP.Internal.unwrapChanThreadKilledException
  MyNetwork.AMQP.Internal.updateLastReceived
  MyNetwork.AMQP.Internal.updateLastSent
  MyNetwork.AMQP.Internal.waitForAllConfirms
  MyNetwork.AMQP.Internal.watchHeartbeats
  MyNetwork.AMQP.Internal.writeAssembly
  MyNetwork.AMQP.Internal.writeAssembly'
  MyNetwork.AMQP.Internal.writeFrame
  MyNetwork.AMQP.Internal.writeFrames
  MyNetwork.AMQP.Internal.AckType{MyNetwork.AMQP.Internal.BasicAck MyNetwork.AMQP.Internal.BasicNack}
  MyNetwork.AMQP.Internal.Assembly{MyNetwork.AMQP.Internal.ContentMethod MyNetwork.AMQP.Internal.SimpleMethod}
  MyNetwork.AMQP.Internal.ChanThreadKilledException{MyNetwork.AMQP.Internal.ChanThreadKilledException cause}
  MyNetwork.AMQP.Internal.Channel{MyNetwork.AMQP.Internal.Channel ackedSet chanActive chanClosed chanExceptionHandlers channelID confirmListeners connection consumers inQueue lastConsumerTag nackedSet nextPublishSeqNum outstandingResponses returnListeners unconfirmedSet}
  MyNetwork.AMQP.Internal.Connection{MyNetwork.AMQP.Internal.Connection connBlockedHandlers connChanAllocator connChannels connClosed connClosedHandlers connClosedLock connHandle connLastReceived connLastSent connMaxFrameSize connServerProperties connWriteLock}
  MyNetwork.AMQP.Internal.ConnectionOpts{MyNetwork.AMQP.Internal.ConnectionOpts coAuth coHeartbeatDelay coMaxChannel coMaxFrameSize coName coServers coTLSSettings coVHost}
  MyNetwork.AMQP.Internal.DeliveryMode{MyNetwork.AMQP.Internal.NonPersistent MyNetwork.AMQP.Internal.Persistent}
  MyNetwork.AMQP.Internal.Envelope{MyNetwork.AMQP.Internal.Envelope envChannel envDeliveryTag envExchangeName envRedelivered envRoutingKey}
  MyNetwork.AMQP.Internal.Message{MyNetwork.AMQP.Internal.Message msgApplicationID msgBody msgClusterID msgContentEncoding msgContentType msgCorrelationID msgDeliveryMode msgExpiration msgHeaders msgID msgPriority msgReplyTo msgTimestamp msgType msgUserID}
  MyNetwork.AMQP.Internal.PublishError{MyNetwork.AMQP.Internal.PublishError errExchange errReplyCode errRoutingKey}
  MyNetwork.AMQP.Internal.ReturnReplyCode{MyNetwork.AMQP.Internal.NoConsumers MyNetwork.AMQP.Internal.NotFound MyNetwork.AMQP.Internal.Unroutable}
  MyNetwork.AMQP.Internal.SASLMechanism{MyNetwork.AMQP.Internal.SASLMechanism saslChallengeFunc saslInitialResponse saslName}
  MyNetwork.AMQP.Internal.TLSSettings{MyNetwork.AMQP.Internal.TLSCustom MyNetwork.AMQP.Internal.TLSTrusted MyNetwork.AMQP.Internal.TLSUntrusted}
module dependencies: MyNetwork.AMQP.ChannelAllocator
                     MyNetwork.AMQP.Generated MyNetwork.AMQP.Helpers
                     MyNetwork.AMQP.Protocol MyNetwork.AMQP.Types MyNetwork2.Connection
                     MyNetwork2.Connection.Types
package dependencies: array-0.5.2.0 asn1-encoding-0.9.5
                      asn1-parse-0.9.4 asn1-types-0.3.2 async-2.2.1 base-4.11.1.0
                      basement-0.0.8 binary-0.8.5.1 bytestring-0.10.8.2 cereal-0.5.7.0
                      clock-0.7.2 containers-0.5.11.0 cryptonite-0.25
                      data-binary-ieee754-0.4.4 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 hourglass-0.2.12 integer-gmp-1.0.2.0
                      memory-0.14.18 mtl-2.2.2 network-2.6.3.6 pem-0.2.4
                      primitive-0.6.3.0 process-1.6.3.0 socks-0.5.6 stm-2.4.5.1
                      text-1.2.3.1 time-1.8.0.2 tls-1.4.1 transformers-0.5.5.0
                      unix-2.7.2.2 vector-0.12.0.1 x509-1.7.4 x509-store-1.6.6
                      x509-system-1.6.6 x509-validation-1.6.10
orphans: network-2.6.3.6:Network.Socket
         stm-2.4.5.1:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base clock-0.7.2:System.Clock
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array text-1.2.3.1:Data.Text
                         text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Concurrent.Chan 8d943aa91d2c7099e42a3d75397ce0d1
import  -/  base-4.11.1.0:Control.Concurrent.MVar ca4c584bd9db3afcc6677dea708f87d7
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Int f5d427cd3860d8572d1a4d519e117c0b
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.IO.Handle.FD 6cb851c401fa9a04314651bd6425440d
import  -/  base-4.11.1.0:GHC.IO.Handle.Text e23ef47ca91991c54e165e15e91a1ab0
import  -/  base-4.11.1.0:GHC.Int dbb9fa419302fe275e335328af678cb6
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Read b9e6d20d40da8c8a12b566d22e1160e0
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Word bc9bdf9b61a0f9352e5a1baeee5690a5
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  base-4.11.1.0:Text.ParserCombinators.ReadPrec d0ebf984ed486435a97481288b73febb
import  -/  base-4.11.1.0:Text.Read.Lex f8ad6f9ae74ae325ba69a4fa5c82aaca
import  -/  binary-0.8.5.1:Data.Binary 08d99786e937f906c100d31770fc35f8
import  -/  binary-0.8.5.1:Data.Binary.Class ca30142b0b1a68ad57845f336fc35efd
import  -/  binary-0.8.5.1:Data.Binary.Get 128c6b1e04dcd8453c5a7a652083702b
import  -/  binary-0.8.5.1:Data.Binary.Put 46413a3745068b8c82c5993962a4bce7
import  -/  bytestring-0.10.8.2:Data.ByteString 273248cbc494640ee3139e6d00588e9f
import  -/  bytestring-0.10.8.2:Data.ByteString.Char8 801fee6d15f5471654463d991475364a
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal dc7d0c96ef45c703ca21607112260299
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 9b14d99e53cf2d30c74c7ddcd59ad2e2
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Internal af245ead1f52eca50149d040b0b86693
import  -/  containers-0.5.11.0:Data.IntMap f9510d08f95e7f6098e666204778a9c9
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntSet 2a2e516563abb136f0f0c2d3ef065529
import  -/  containers-0.5.11.0:Data.IntSet.Internal c967b4a43794bb3ae1eb622413871039
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  MyNetwork.AMQP.ChannelAllocator 00781864a114ef3bf917a20fe5aa8843
  exports: 0815d2bfac3fabdf46ab287dd8219333
  ChannelAllocator cefbee2f015a090ffc82691da1bdd659
  allocateChannel 498ad339b40fc7076390a270e537f155
  freeChannel 01a822a253aefd637cab8753dfef7097
  newChannelAllocator 98f92a07385227c6c60a74e2e0a7b8b1
import  -/  MyNetwork.AMQP.Generated 90da3e6fbc699ef42abc037524eddac1
  exports: d4f7fdf541b79210f3809a636b8d849c
  Basic_ack 023f225cc7f275094cb03aca5e0e6ff6
  Basic_cancel c767cc58443513cd221af70711e5038a
  Basic_deliver 52a24c107dd8369b7d34b16d7de77307
  Basic_nack 97f92bf63de4e6517a0dc36715766c57
  Basic_return ce47853abf4c1d6caa86c2eb2ef6d783
  CHBasic b92ce0d87ae58ae1b418b02ba0a256a6
  Channel_close d54ac548b8c622c5b3dfb9de57fb8c37
  Channel_close_ok 675a9f3287ea48326045a2de36ab6b59
  Channel_flow 1a9ad0bcf65a49213967a17b8d92266c
  Channel_open ad9b55c5201081182c56cb11d85b2ccf
  Channel_open_ok 9de4e0b9f1d41d0c4c99fa83e29a2803
  Connection_blocked a533bdeeb0a06115ff3064e42047583e
  Connection_close d39e6b38d2de83da7759b6cd4680a78d
  Connection_close_ok 08adc63512779de3aee15f3cb4e19ffb
  Connection_open ad4a49e5ed15c0ea41e5ad3ace0fb65b
  Connection_open_ok 01c350bc160970440efd19123bd57209
  Connection_secure 57289926251c20265e9e8b2e3f65a45c
  Connection_secure_ok 0eebf15737489f5fd9ff78a2b17fe78c
  Connection_start f5d76664472d430407de89bc40eff152
  Connection_start_ok 5d9afe4ce02c45886d57b2df929fcab0
  Connection_tune 5f40a15ab1a3e4a71c22264be9894470
  Connection_tune_ok 5b0430ad4b984b822d78903c273ee46a
  Connection_unblocked 2cebce5e06b8ca75fb379d96a23ea7c6
  ContentHeaderProperties c20948d00d7211dcad96a6d620298a11
  MethodPayload d545a4d0fe3db4a1a490807052f182f2
  getClassIDOf 43c032c64cf87fce955b6fa1c8dff5ce
import  -/  MyNetwork.AMQP.Helpers 043a0b653c74173dd57f4e43719a3330
  exports: 78161c7b323a61f393bba5255c5e718b
  Lock 6996dde85bc21853d2841248fbf6e16a
  chooseMin 9b79d7dbf6ab3a8aed135d94e2fd2a3c
  closeLock 08d2fea49fdc7c0898a88092e633fe15
  forkFinally' 77b5b3f4a0b9d1652e4559fa6003066a
  getTimestamp 3b1e56ba5641809fc2565c58cfad5ca9
  killLock 0cd73d703edad87df7982f1105ef3079
  newLock 376bdd660cb73f3b0061a75dce76fb43
  openLock 83fabccc8c599ee31f3e50cddc860c6f
  scheduleAtFixedRate 916efd9dfee3064c46392588aa67bab1
  toLazy bfecb99d14db471265db20ded97ef3b8
  toStrict a157d855f53c2b0ef64e73a86ed967f0
  waitLock ac35c6f469bc0532e2a6fa4605ab552d
import  -/  MyNetwork.AMQP.Protocol b92196e3c7a16fd80fef33a8a412b425
  exports: c5150fd429b112584b951a68101fa687
  ContentBodyPayload 63799c7cc9a8f2a128769824cb876a5e
  ContentHeaderPayload ee984bf71d0c381f9226798ad6ec053b
  Frame 6c02575d1a327bd558d16467b9d4b16c
  Frame 47a578378fd1692cc695ca1a378856ed
  FramePayload 757008d86652484cfe705496d6992b77
  HeartbeatPayload 4d6dd90844006304b059670b40b2a583
  MethodPayload c6581d390dbf71eec8f8b12ab850888b
  frameType 8c32afe6ee4c9a547953b5c04aed01ea
  hasContent 88901fcabeb969dfbad036e504ab4a96
  peekFrameSize 43d202cc5e52721ee3c94fb1592c7ff1
import  -/  MyNetwork.AMQP.Types b8f148f2de1f7b1663f31cc0624f4831
  exports: 79710897a339f37e0aa0cd0013badcb8
  AMQPException 4e3e663e4d9b79b9c4b960dd52fd612c
  Abnormal 52d78a2fb9c6a4549d46072434348ee9
  ChannelClosedException 087b16d8c9197e316ddf48c43d2f582a
  CloseType aa6a03fa60860e76928efb63e27e0f5b
  ConnectionClosedException 0c390f321908c5e180b0d6308ad415d5
  ConsumerTag 5cb78a23bfa6f324df665b5ead71beda
  FVBool c46b3096aea773d046c7c078babb753a
  FVFieldTable 757471561b42b598a4f1eae9465da41a
  FVString 47e40e228425db6f9cefd88dafd3375e
  FieldTable 7e0d9c0b51c0ccc4f1cf4b5e7ef54b86
  FieldTable e2dab219ac237204a5b8f05eb2c223b2
  LongLongInt 763ed05ff03a034b2d61b6cd62071d38
  LongString 90a8d638311645e57536fc6820bd51ee
  Normal 9d8f94c624deb82b532d520596a4fe8d
  Octet 0c12da92e95c9ecd7c7d5f96482f878f
  ShortString 2dedbb560fb43245b7b7cb66bc88dc76
  Timestamp b6cef2c2c9fafffa6c51bd6a46296326
import  -/  MyNetwork2.Connection 01bbdb4519fe0c2ca291d5915f83dd01
  exports: acb70fd33cbecc6be8c81ac8454ac003
  connectTo 3703722f0849cb7aebe4b9ee4967b35c
  connectionClose a4c0eb62a54bfeb820c5165b408a553d
  connectionGet 3627a48f1a4d87f7cf62170cb5b9d75a
  connectionPut 06530ff0fa9d9ec21995d629eef77a29
  initConnectionContext 4462f56f787045d8296168641c3e72e6
import  -/  MyNetwork2.Connection.Types 51be07c429ba8b879e575de7dcfdab50
  Connection 29e500bb503325b5eb7aca16d4a5c49c
  ConnectionParams 38ba4c65e72fd213c09060e380be52d8
  TLSSettings 585f0f189877b23386f5d25e0852d7a0
  TLSSettingsSimple 8cfe69b9676644ec911251d0ff7c49eb
  connectionHostname 6fde380bb0b00d4931a98ab1ff5988f4
  connectionPort 6fde380bb0b00d4931a98ab1ff5988f4
  connectionUseSecure 6fde380bb0b00d4931a98ab1ff5988f4
  connectionUseSocks 6fde380bb0b00d4931a98ab1ff5988f4
import  -/  network-2.6.3.6:Network b2d886de20c575a44d4fc25c74e0fc87
import  -/  network-2.6.3.6:Network.Socket.Internal af2cb1ca411a338f4846b994baabce94
import  -/  network-2.6.3.6:Network.Socket.Types 49e70a5740de467f1a9c2675afd92abb
import  -/  stm-2.4.5.1:Control.Concurrent.STM 0dd34c54515ec28f37ab6d6104eb0e05
import  -/  stm-2.4.5.1:Control.Concurrent.STM.TVar 17f0d58b753eebd51af9c5bea2cff66f
import  -/  stm-2.4.5.1:Control.Monad.STM 48d4ec6e86da88fd3ef1f123287a4076
import  -/  text-1.2.3.1:Data.Text e8581f8e8ebc78d94a3747f354f0ee37
import  -/  text-1.2.3.1:Data.Text.Encoding 4f307d162133b7e1268d26d0f05f94d5
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
import  -/  text-1.2.3.1:Data.Text.Show cf0c5ecc7621e9d17b233013843ebbaa
addDependentFile "/Users/nineonine/.stack/programs/x86_64-osx/ghc-8.4.4/lib/ghc-8.4.4/include/ghcversion.h" dc95dadad7fc31af17d70482a2bf3d6d
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/autogen/cabal_macros.h" 7c8907224c6fac98de03ff04b9202e83
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fEqDeliveryMode ::
    GHC.Classes.Eq MyNetwork.AMQP.Internal.DeliveryMode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.DeliveryMode
                  MyNetwork.AMQP.Internal.$fEqDeliveryMode_$c==
                  MyNetwork.AMQP.Internal.$fEqDeliveryMode_$c/= -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fEqDeliveryMode_$c/= ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (y :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case x of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case y of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.False
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.True }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case y of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.True
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.False } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fEqDeliveryMode_$c== ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (ds7 :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case ds6 of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case ds7 of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.True
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.False }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case ds7 of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.False
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.True } }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fEqMessage :: GHC.Classes.Eq MyNetwork.AMQP.Internal.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.Message
                  MyNetwork.AMQP.Internal.$fEqMessage_$c==
                  MyNetwork.AMQP.Internal.$fEqMessage_$c/= -}
526afa0333c4fb39d6fd1fa459b2940d
  $fEqMessage_$c/= ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Internal.Message)
                   (y :: MyNetwork.AMQP.Internal.Message) ->
                 case MyNetwork.AMQP.Internal.$fEqMessage_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fEqMessage_$c== ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)> -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fEqPublishError ::
    GHC.Classes.Eq MyNetwork.AMQP.Internal.PublishError
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.PublishError
                  MyNetwork.AMQP.Internal.$fEqPublishError_$c==
                  MyNetwork.AMQP.Internal.$fEqPublishError_$c/= -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fEqPublishError_$c/= ::
    MyNetwork.AMQP.Internal.PublishError
    -> MyNetwork.AMQP.Internal.PublishError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U,U,U))><S(SLL),1*U(1*U,1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Internal.PublishError)
                   (y :: MyNetwork.AMQP.Internal.PublishError) ->
                 case MyNetwork.AMQP.Internal.$fEqPublishError_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fEqPublishError_$c== ::
    MyNetwork.AMQP.Internal.PublishError
    -> MyNetwork.AMQP.Internal.PublishError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U,U,U))><S(SLL),1*U(1*U,1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.PublishError)
                   (w1 :: MyNetwork.AMQP.Internal.PublishError) ->
                 case w of ww { MyNetwork.AMQP.Internal.PublishError ww1 ww2 ww3 ->
                 case w1 of ww4 { MyNetwork.AMQP.Internal.PublishError ww5 ww6 ww7 ->
                 MyNetwork.AMQP.Internal.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
f7bde183c07509c93d41e860d14c0460
  $fEqPublishError_$c==1 ::
    MyNetwork.AMQP.Internal.ReturnReplyCode
    -> MyNetwork.AMQP.Internal.ReturnReplyCode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds6 :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (ds7 :: MyNetwork.AMQP.Internal.ReturnReplyCode) ->
                 case ds6 of wild {
                   MyNetwork.AMQP.Internal.Unroutable a1
                   -> case ds7 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Internal.Unroutable b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   MyNetwork.AMQP.Internal.NoConsumers a1
                   -> case ds7 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Internal.NoConsumers b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   MyNetwork.AMQP.Internal.NotFound a1
                   -> case ds7 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MyNetwork.AMQP.Internal.NotFound b1
                        -> Data.Text.$fEqText_$c== a1 b1 } }) -}
f7bde183c07509c93d41e860d14c0460
  $fEqReturnReplyCode ::
    GHC.Classes.Eq MyNetwork.AMQP.Internal.ReturnReplyCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.ReturnReplyCode
                  MyNetwork.AMQP.Internal.$fEqPublishError_$c==1
                  MyNetwork.AMQP.Internal.$fEqReturnReplyCode_$c/= -}
f7bde183c07509c93d41e860d14c0460
  $fEqReturnReplyCode_$c/= ::
    MyNetwork.AMQP.Internal.ReturnReplyCode
    -> MyNetwork.AMQP.Internal.ReturnReplyCode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (y :: MyNetwork.AMQP.Internal.ReturnReplyCode) ->
                 case MyNetwork.AMQP.Internal.$fEqPublishError_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException ::
    GHC.Exception.Exception
      MyNetwork.AMQP.Internal.ChanThreadKilledException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                  MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException7
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <MyNetwork.AMQP.Internal.ChanThreadKilledException>_N)
                  MyNetwork.AMQP.Internal.$fShowChanThreadKilledException
                  MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException_$ctoException
                  MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException_$cfromException
                  MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException_$cshow -}
3e38706f40b12af84db0247f86a89b39
  $fExceptionChanThreadKilledException1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException2) -}
74ce499e8440e7b722a71697e40cecac
  $fExceptionChanThreadKilledException2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
552aee8a923252a1725da24a038f532c
  $fExceptionChanThreadKilledException3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4e07b1395474ef6c760ce13d467b1948
  $fExceptionChanThreadKilledException4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cause = "#) -}
3add079b0d103715bbf5b7bbba288ea4
  $fExceptionChanThreadKilledException5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ChanThreadKilledException {"#) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException6 ::
    GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException7) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException7 ::
    Data.Typeable.Internal.TypeRep
      MyNetwork.AMQP.Internal.ChanThreadKilledException
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                        6378725418837481457##
                        15114659974606812525##
                        MyNetwork.AMQP.Internal.$trModule
                        MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException8
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ *
                   @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
a07207de4f518f86146ec44a4b2219ec
  $fExceptionChanThreadKilledException8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException9) -}
244b3ad1b8b4e15a37f490c695583a75
  $fExceptionChanThreadKilledException9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ChanThreadKilledException"#) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe MyNetwork.AMQP.Internal.ChanThreadKilledException
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: GHC.Exception.SomeException) ->
                 case ds6 of wild { GHC.Exception.SomeException e1 $dException1 e2 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e1
                        (GHC.Exception.$p1Exception @ e1 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException6 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Base.Nothing
                             @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                        1#
                        -> (GHC.Base.Just @ e1 e2)
                             `cast`
                           (GHC.Base.Maybe
                              (UnsafeCo representational e1 MyNetwork.AMQP.Internal.ChanThreadKilledException))_R } } } } }) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException_$cshow ::
    MyNetwork.AMQP.Internal.ChanThreadKilledException
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.ChanThreadKilledException) ->
                 case w of ww { MyNetwork.AMQP.Internal.ChanThreadKilledException ww1 ->
                 MyNetwork.AMQP.Internal.$w$cshow ww1 }) -}
3a90d0615f17322f97fa5a05c488ef99
  $fExceptionChanThreadKilledException_$ctoException ::
    MyNetwork.AMQP.Internal.ChanThreadKilledException
    -> GHC.Exception.SomeException
  {- Arity: 1 -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode ::
    GHC.Classes.Ord MyNetwork.AMQP.Internal.DeliveryMode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.DeliveryMode
                  MyNetwork.AMQP.Internal.$fEqDeliveryMode
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$ccompare
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$c<
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$c<=
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$c>
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$c>=
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$cmax
                  MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$cmin -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$c< ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (b :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case a of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case b of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.False
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.True }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$c<= ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (b :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case b of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case a of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.True
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.False }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$c> ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (b :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 MyNetwork.AMQP.Internal.$fOrdDeliveryMode_$c< b a) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$c>= ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (b :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case a of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case b of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.True
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.False }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$ccompare ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (b :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case a of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case b of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.EQ
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.LT }
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case b of wild1 {
                        MyNetwork.AMQP.Internal.Persistent -> GHC.Types.GT
                        MyNetwork.AMQP.Internal.NonPersistent -> GHC.Types.EQ } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$cmax ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (y :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case y of wild {
                   MyNetwork.AMQP.Internal.Persistent -> x
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> case x of wild1 { DEFAULT ->
                      MyNetwork.AMQP.Internal.NonPersistent } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fOrdDeliveryMode_$cmin ::
    MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode
    -> MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (y :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case y of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> case x of wild1 { DEFAULT ->
                      MyNetwork.AMQP.Internal.Persistent }
                   MyNetwork.AMQP.Internal.NonPersistent -> x }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage :: GHC.Classes.Ord MyNetwork.AMQP.Internal.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.Message
                  MyNetwork.AMQP.Internal.$fEqMessage
                  MyNetwork.AMQP.Internal.$fOrdMessage_$ccompare
                  MyNetwork.AMQP.Internal.$fOrdMessage_$c<
                  MyNetwork.AMQP.Internal.$fOrdMessage_$c<=
                  MyNetwork.AMQP.Internal.$fOrdMessage_$c>
                  MyNetwork.AMQP.Internal.$fOrdMessage_$c>=
                  MyNetwork.AMQP.Internal.$fOrdMessage_$cmax
                  MyNetwork.AMQP.Internal.$fOrdMessage_$cmin -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$c< ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)> -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$c<= ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.Message)
                   (b :: MyNetwork.AMQP.Internal.Message) ->
                 case MyNetwork.AMQP.Internal.$fOrdMessage_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$c> ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MyNetwork.AMQP.Internal.Message)
                   (b :: MyNetwork.AMQP.Internal.Message) ->
                 MyNetwork.AMQP.Internal.$fOrdMessage_$c< b a) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$c>= ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MyNetwork.AMQP.Internal.Message)
                   (b :: MyNetwork.AMQP.Internal.Message) ->
                 case MyNetwork.AMQP.Internal.$fOrdMessage_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$ccompare ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)> -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$cmax ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.Message)
                   (y :: MyNetwork.AMQP.Internal.Message) ->
                 case MyNetwork.AMQP.Internal.$fOrdMessage_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fOrdMessage_$cmin ::
    MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message
    -> MyNetwork.AMQP.Internal.Message
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLLLLLLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.Message)
                   (y :: MyNetwork.AMQP.Internal.Message) ->
                 case MyNetwork.AMQP.Internal.$fOrdMessage_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode ::
    GHC.Read.Read MyNetwork.AMQP.Internal.DeliveryMode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.DeliveryMode
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode_$creadsPrec
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode_$creadList
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.DeliveryMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <MyNetwork.AMQP.Internal.DeliveryMode>_R))
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode_$creadListPrec -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.DeliveryMode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Internal.DeliveryMode
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <MyNetwork.AMQP.Internal.DeliveryMode>_R))) -}
ff63f6eab2586e97882def5bfe7505dc
  $fReadDeliveryMode10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode11) -}
1e0fa32045b3e905b8aaacbabb510b8f
  $fReadDeliveryMode11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Persistent"#) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode12 ::
    Text.ParserCombinators.ReadP.P
      [MyNetwork.AMQP.Internal.DeliveryMode]
  {- Unfolding: ((MyNetwork.AMQP.Internal.$fReadDeliveryMode_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Internal.DeliveryMode]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Internal.DeliveryMode]>_R)
                   @ [MyNetwork.AMQP.Internal.DeliveryMode]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Internal.DeliveryMode])) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ MyNetwork.AMQP.Internal.DeliveryMode
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode_sps
                   eta) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode3 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        MyNetwork.AMQP.Internal.DeliveryMode)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        MyNetwork.AMQP.Internal.DeliveryMode)
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode4
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           MyNetwork.AMQP.Internal.DeliveryMode))) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode4 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       MyNetwork.AMQP.Internal.DeliveryMode)
  {- Strictness: m,
     Unfolding: ((MyNetwork.AMQP.Internal.$fReadDeliveryMode6,
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode5
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.DeliveryMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <MyNetwork.AMQP.Internal.DeliveryMode>_R)))) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.DeliveryMode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds6 :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MyNetwork.AMQP.Internal.DeliveryMode
                         -> Text.ParserCombinators.ReadP.P b) ->
                 k MyNetwork.AMQP.Internal.NonPersistent) -}
6e63bb26156533f65a5ba03081649ff3
  $fReadDeliveryMode6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode7) -}
dc43210be8dac431c05604b691908167
  $fReadDeliveryMode7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NonPersistent"#) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       MyNetwork.AMQP.Internal.DeliveryMode)
  {- Strictness: m,
     Unfolding: ((MyNetwork.AMQP.Internal.$fReadDeliveryMode10,
                  MyNetwork.AMQP.Internal.$fReadDeliveryMode9
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.DeliveryMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <MyNetwork.AMQP.Internal.DeliveryMode>_R)))) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.DeliveryMode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds6 :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MyNetwork.AMQP.Internal.DeliveryMode
                         -> Text.ParserCombinators.ReadP.P b) ->
                 k MyNetwork.AMQP.Internal.Persistent) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Internal.DeliveryMode]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Internal.DeliveryMode]
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode12) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Internal.DeliveryMode]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Internal.DeliveryMode
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.DeliveryMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                         <MyNetwork.AMQP.Internal.DeliveryMode>_R))) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Internal.DeliveryMode
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Internal.DeliveryMode
                      MyNetwork.AMQP.Internal.$fReadDeliveryMode2
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <MyNetwork.AMQP.Internal.DeliveryMode>_R))
                      n
                      @ MyNetwork.AMQP.Internal.DeliveryMode
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Internal.DeliveryMode))) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fReadDeliveryMode_sps ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        MyNetwork.AMQP.Internal.DeliveryMode)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        MyNetwork.AMQP.Internal.DeliveryMode)
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode8
                   MyNetwork.AMQP.Internal.$fReadDeliveryMode3) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage :: GHC.Read.Read MyNetwork.AMQP.Internal.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.Message
                  MyNetwork.AMQP.Internal.$fReadMessage_$creadsPrec
                  MyNetwork.AMQP.Internal.$fReadMessage_$creadList
                  MyNetwork.AMQP.Internal.$fReadMessage1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.Message>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                   <MyNetwork.AMQP.Internal.Message>_R))
                  MyNetwork.AMQP.Internal.$fReadMessage_$creadListPrec -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.Message
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Internal.Message
                   MyNetwork.AMQP.Internal.$fReadMessage2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.Message>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Internal.Message>_R))) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.Message
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Internal.Message
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$w$creadPrec ww1 @ b w1 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage3 ::
    Text.ParserCombinators.ReadP.P [MyNetwork.AMQP.Internal.Message]
  {- Unfolding: ((MyNetwork.AMQP.Internal.$fReadMessage_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Internal.Message]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Internal.Message]>_R)
                   @ [MyNetwork.AMQP.Internal.Message]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Internal.Message])) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Internal.Message]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Internal.Message]
                   MyNetwork.AMQP.Internal.$fReadMessage3) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Internal.Message]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Internal.Message
                   MyNetwork.AMQP.Internal.$fReadMessage1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.Message>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                    <MyNetwork.AMQP.Internal.Message>_R))) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fReadMessage_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Internal.Message
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Internal.Message
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Internal.Message
                      MyNetwork.AMQP.Internal.$fReadMessage2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Internal.Message>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                       <MyNetwork.AMQP.Internal.Message>_R))
                      n
                      @ MyNetwork.AMQP.Internal.Message
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Internal.Message))) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError ::
    GHC.Read.Read MyNetwork.AMQP.Internal.PublishError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.PublishError
                  MyNetwork.AMQP.Internal.$fReadPublishError_$creadsPrec
                  MyNetwork.AMQP.Internal.$fReadPublishError_$creadList
                  MyNetwork.AMQP.Internal.$fReadPublishError1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.PublishError>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                        <MyNetwork.AMQP.Internal.PublishError>_R))
                  MyNetwork.AMQP.Internal.$fReadPublishError_$creadListPrec -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.PublishError
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Internal.PublishError
                   MyNetwork.AMQP.Internal.$fReadPublishError2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.PublishError>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                         <MyNetwork.AMQP.Internal.PublishError>_R))) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.PublishError
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Internal.PublishError
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$w$creadPrec1 ww1 @ b w1 }) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError3 ::
    Text.ParserCombinators.ReadP.P
      [MyNetwork.AMQP.Internal.PublishError]
  {- Unfolding: ((MyNetwork.AMQP.Internal.$fReadPublishError_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Internal.PublishError]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Internal.PublishError]>_R)
                   @ [MyNetwork.AMQP.Internal.PublishError]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Internal.PublishError])) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Internal.PublishError]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Internal.PublishError]
                   MyNetwork.AMQP.Internal.$fReadPublishError3) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Internal.PublishError]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Internal.PublishError
                   MyNetwork.AMQP.Internal.$fReadPublishError1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.PublishError>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                         <MyNetwork.AMQP.Internal.PublishError>_R))) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fReadPublishError_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Internal.PublishError
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Internal.PublishError
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Internal.PublishError
                      MyNetwork.AMQP.Internal.$fReadPublishError2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Internal.PublishError>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                            <MyNetwork.AMQP.Internal.PublishError>_R))
                      n
                      @ MyNetwork.AMQP.Internal.PublishError
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Internal.PublishError))) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode ::
    GHC.Read.Read MyNetwork.AMQP.Internal.ReturnReplyCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.ReturnReplyCode
                  MyNetwork.AMQP.Internal.$fReadReturnReplyCode_$creadsPrec
                  MyNetwork.AMQP.Internal.$fReadReturnReplyCode_$creadList
                  MyNetwork.AMQP.Internal.$fReadReturnReplyCode1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MyNetwork.AMQP.Internal.ReturnReplyCode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                           <MyNetwork.AMQP.Internal.ReturnReplyCode>_R))
                  MyNetwork.AMQP.Internal.$fReadReturnReplyCode_$creadListPrec -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.ReturnReplyCode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MyNetwork.AMQP.Internal.ReturnReplyCode
                   MyNetwork.AMQP.Internal.$fReadReturnReplyCode2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.ReturnReplyCode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                            <MyNetwork.AMQP.Internal.ReturnReplyCode>_R))) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MyNetwork.AMQP.Internal.ReturnReplyCode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MyNetwork.AMQP.Internal.ReturnReplyCode
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$w$creadPrec2 ww1 @ b w1 }) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode3 ::
    Text.ParserCombinators.ReadP.P
      [MyNetwork.AMQP.Internal.ReturnReplyCode]
  {- Unfolding: ((MyNetwork.AMQP.Internal.$fReadReturnReplyCode_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MyNetwork.AMQP.Internal.ReturnReplyCode]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <[MyNetwork.AMQP.Internal.ReturnReplyCode]>_R)
                   @ [MyNetwork.AMQP.Internal.ReturnReplyCode]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MyNetwork.AMQP.Internal.ReturnReplyCode])) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [MyNetwork.AMQP.Internal.ReturnReplyCode]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MyNetwork.AMQP.Internal.ReturnReplyCode]
                   MyNetwork.AMQP.Internal.$fReadReturnReplyCode3) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [MyNetwork.AMQP.Internal.ReturnReplyCode]
  {- Unfolding: (GHC.Read.list
                   @ MyNetwork.AMQP.Internal.ReturnReplyCode
                   MyNetwork.AMQP.Internal.$fReadReturnReplyCode1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MyNetwork.AMQP.Internal.ReturnReplyCode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                            <MyNetwork.AMQP.Internal.ReturnReplyCode>_R))) -}
f7bde183c07509c93d41e860d14c0460
  $fReadReturnReplyCode_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         MyNetwork.AMQP.Internal.ReturnReplyCode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MyNetwork.AMQP.Internal.ReturnReplyCode
                   (GHC.Read.$fRead()6
                      @ MyNetwork.AMQP.Internal.ReturnReplyCode
                      MyNetwork.AMQP.Internal.$fReadReturnReplyCode2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MyNetwork.AMQP.Internal.ReturnReplyCode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                               <MyNetwork.AMQP.Internal.ReturnReplyCode>_R))
                      n
                      @ MyNetwork.AMQP.Internal.ReturnReplyCode
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MyNetwork.AMQP.Internal.ReturnReplyCode))) -}
947a2b46e8b1df068558c545a9d1a410
  $fShowAckType :: GHC.Show.Show MyNetwork.AMQP.Internal.AckType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.AckType
                  MyNetwork.AMQP.Internal.$fShowAckType_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowAckType_$cshow
                  MyNetwork.AMQP.Internal.$fShowAckType_$cshowList -}
947a2b46e8b1df068558c545a9d1a410
  $fShowAckType1 :: MyNetwork.AMQP.Internal.AckType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.AckType)
                   (eta :: GHC.Base.String) ->
                 case ds6 of wild {
                   MyNetwork.AMQP.Internal.BasicAck
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fShowAckType4)
                        eta
                   MyNetwork.AMQP.Internal.BasicNack
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fShowAckType2)
                        eta }) -}
94200aeade323fa0b098a78d0919aa88
  $fShowAckType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fShowAckType3) -}
c51e743a6a7b4477176f10d20f320165
  $fShowAckType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BasicNack"#) -}
35190758a46a258f0e4f5f0824017e89
  $fShowAckType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fShowAckType5) -}
6a46bdde6569033d941dacee2d38b94c
  $fShowAckType5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BasicAck"#) -}
947a2b46e8b1df068558c545a9d1a410
  $fShowAckType_$cshow ::
    MyNetwork.AMQP.Internal.AckType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.AckType) ->
                 case x of wild {
                   MyNetwork.AMQP.Internal.BasicAck
                   -> MyNetwork.AMQP.Internal.$fShowAckType4
                   MyNetwork.AMQP.Internal.BasicNack
                   -> MyNetwork.AMQP.Internal.$fShowAckType2 }) -}
947a2b46e8b1df068558c545a9d1a410
  $fShowAckType_$cshowList ::
    [MyNetwork.AMQP.Internal.AckType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.AckType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.AckType
                   MyNetwork.AMQP.Internal.$fShowAckType1
                   ls
                   s) -}
947a2b46e8b1df068558c545a9d1a410
  $fShowAckType_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Internal.AckType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds6 :: GHC.Types.Int)
                   (ds7 :: MyNetwork.AMQP.Internal.AckType)
                   (eta :: GHC.Base.String) ->
                 case ds7 of wild {
                   MyNetwork.AMQP.Internal.BasicAck
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fShowAckType4)
                        eta
                   MyNetwork.AMQP.Internal.BasicNack
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fShowAckType2)
                        eta }) -}
6b333bc34acb406998d522b90c43651a
  $fShowAssembly :: GHC.Show.Show MyNetwork.AMQP.Internal.Assembly
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.Assembly
                  MyNetwork.AMQP.Internal.$fShowAssembly_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowAssembly_$cshow
                  MyNetwork.AMQP.Internal.$fShowAssembly_$cshowList -}
6b333bc34acb406998d522b90c43651a
  $fShowAssembly1 ::
    MyNetwork.AMQP.Internal.Assembly -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Internal.Assembly) ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec1 0# w) -}
2ea3d0c0c7a98e3a6c34f0640ba40f27
  $fShowAssembly2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContentMethod "#) -}
0557baa3d550b07c6b89d37be4f53d95
  $fShowAssembly3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.$fShowAssembly4) -}
5fc60c1faff29785cbe381cabd70718c
  $fShowAssembly4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SimpleMethod "#) -}
d47454aeaed2aa0bdc44000c5988c969
  $fShowAssembly5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
6b333bc34acb406998d522b90c43651a
  $fShowAssembly_$cshow ::
    MyNetwork.AMQP.Internal.Assembly -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.Assembly) ->
                 MyNetwork.AMQP.Internal.$fShowAssembly_$cshowsPrec
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6b333bc34acb406998d522b90c43651a
  $fShowAssembly_$cshowList ::
    [MyNetwork.AMQP.Internal.Assembly] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.Assembly])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.Assembly
                   MyNetwork.AMQP.Internal.$fShowAssembly1
                   ls
                   s) -}
6b333bc34acb406998d522b90c43651a
  $fShowAssembly_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Internal.Assembly -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MyNetwork.AMQP.Internal.Assembly) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec1 ww1 w1 }) -}
3a90d0615f17322f97fa5a05c488ef99
  $fShowChanThreadKilledException ::
    GHC.Show.Show MyNetwork.AMQP.Internal.ChanThreadKilledException
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                  MyNetwork.AMQP.Internal.$fShowChanThreadKilledException_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException_$cshow
                  MyNetwork.AMQP.Internal.$fShowChanThreadKilledException_$cshowList -}
3a90d0615f17322f97fa5a05c488ef99
  $fShowChanThreadKilledException1 ::
    MyNetwork.AMQP.Internal.ChanThreadKilledException -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U)>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Internal.ChanThreadKilledException) ->
                 case w of ww { MyNetwork.AMQP.Internal.ChanThreadKilledException ww1 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec 0# ww1 }) -}
3a90d0615f17322f97fa5a05c488ef99
  $fShowChanThreadKilledException_$cshowList ::
    [MyNetwork.AMQP.Internal.ChanThreadKilledException]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.ChanThreadKilledException])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.ChanThreadKilledException
                   MyNetwork.AMQP.Internal.$fShowChanThreadKilledException1
                   ls
                   s) -}
3a90d0615f17322f97fa5a05c488ef99
  $fShowChanThreadKilledException_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Internal.ChanThreadKilledException
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Internal.ChanThreadKilledException) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Internal.ChanThreadKilledException ww3 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec ww1 ww3 } }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fShowDeliveryMode ::
    GHC.Show.Show MyNetwork.AMQP.Internal.DeliveryMode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.DeliveryMode
                  MyNetwork.AMQP.Internal.$fShowDeliveryMode_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowDeliveryMode_$cshow
                  MyNetwork.AMQP.Internal.$fShowDeliveryMode_$cshowList -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fShowDeliveryMode1 ::
    MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (eta :: GHC.Base.String) ->
                 case ds6 of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fReadDeliveryMode10)
                        eta
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fReadDeliveryMode6)
                        eta }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fShowDeliveryMode_$cshow ::
    MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case x of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> MyNetwork.AMQP.Internal.$fReadDeliveryMode10
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> MyNetwork.AMQP.Internal.$fReadDeliveryMode6 }) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fShowDeliveryMode_$cshowList ::
    [MyNetwork.AMQP.Internal.DeliveryMode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.DeliveryMode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.DeliveryMode
                   MyNetwork.AMQP.Internal.$fShowDeliveryMode1
                   ls
                   s) -}
dbe7c5f34461c7b48b8bf4d91f1f4910
  $fShowDeliveryMode_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Internal.DeliveryMode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds6 :: GHC.Types.Int)
                   (ds7 :: MyNetwork.AMQP.Internal.DeliveryMode)
                   (eta :: GHC.Base.String) ->
                 case ds7 of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fReadDeliveryMode10)
                        eta
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           MyNetwork.AMQP.Internal.$fReadDeliveryMode6)
                        eta }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fShowMessage :: GHC.Show.Show MyNetwork.AMQP.Internal.Message
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.Message
                  MyNetwork.AMQP.Internal.$fShowMessage_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowMessage_$cshow
                  MyNetwork.AMQP.Internal.$fShowMessage_$cshowList -}
526afa0333c4fb39d6fd1fa459b2940d
  $fShowMessage1 :: MyNetwork.AMQP.Internal.Message -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (MyNetwork.AMQP.Internal.$fShowMessage_$cshowsPrec
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fShowMessage_$cshow ::
    MyNetwork.AMQP.Internal.Message -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.Message) ->
                 MyNetwork.AMQP.Internal.$fShowMessage_$cshowsPrec
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fShowMessage_$cshowList ::
    [MyNetwork.AMQP.Internal.Message] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.Message])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.Message
                   MyNetwork.AMQP.Internal.$fShowMessage1
                   ls
                   s) -}
526afa0333c4fb39d6fd1fa459b2940d
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> MyNetwork.AMQP.Internal.Message -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)> -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fShowPublishError ::
    GHC.Show.Show MyNetwork.AMQP.Internal.PublishError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.PublishError
                  MyNetwork.AMQP.Internal.$fShowPublishError_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowPublishError_$cshow
                  MyNetwork.AMQP.Internal.$fShowPublishError_$cshowList -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fShowPublishError1 ::
    MyNetwork.AMQP.Internal.PublishError -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U(U,U,U))>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Internal.PublishError) ->
                 case w of ww { MyNetwork.AMQP.Internal.PublishError ww1 ww2 ww3 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec2 0# ww1 ww2 ww3 }) -}
acdcabce845b352cca0757207ee582c4
  $fShowPublishError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("errRoutingKey = "#) -}
f37f976170c48df297339a7058637f68
  $fShowPublishError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("errExchange = "#) -}
384baf9170a4e7243bec9eda69d0cbe4
  $fShowPublishError4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotFound "#) -}
92c85fab3a7cd030d6b53f75ba918a39
  $fShowPublishError5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoConsumers "#) -}
dbea6f121a0e39194acfafc080d99a3e
  $fShowPublishError6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unroutable "#) -}
e57d4002469fe83deb96dd6e78e662b3
  $fShowPublishError7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("errReplyCode = "#) -}
fc817f470e84ec6d2e0d9d161dd523fd
  $fShowPublishError8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishError {"#) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fShowPublishError_$cshow ::
    MyNetwork.AMQP.Internal.PublishError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.PublishError) ->
                 MyNetwork.AMQP.Internal.$fShowPublishError_$cshowsPrec
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fShowPublishError_$cshowList ::
    [MyNetwork.AMQP.Internal.PublishError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.PublishError])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.PublishError
                   MyNetwork.AMQP.Internal.$fShowPublishError1
                   ls
                   s) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $fShowPublishError_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Internal.PublishError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Internal.PublishError) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MyNetwork.AMQP.Internal.PublishError ww3 ww4 ww5 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec2 ww1 ww3 ww4 ww5 } }) -}
f7bde183c07509c93d41e860d14c0460
  $fShowReturnReplyCode ::
    GHC.Show.Show MyNetwork.AMQP.Internal.ReturnReplyCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MyNetwork.AMQP.Internal.ReturnReplyCode
                  MyNetwork.AMQP.Internal.$fShowReturnReplyCode_$cshowsPrec
                  MyNetwork.AMQP.Internal.$fShowReturnReplyCode_$cshow
                  MyNetwork.AMQP.Internal.$fShowReturnReplyCode_$cshowList -}
f7bde183c07509c93d41e860d14c0460
  $fShowReturnReplyCode1 ::
    MyNetwork.AMQP.Internal.ReturnReplyCode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (w1 :: GHC.Base.String) ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec3 0# w w1) -}
f7bde183c07509c93d41e860d14c0460
  $fShowReturnReplyCode_$cshow ::
    MyNetwork.AMQP.Internal.ReturnReplyCode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: MyNetwork.AMQP.Internal.ReturnReplyCode) ->
                 case x of wild {
                   MyNetwork.AMQP.Internal.Unroutable b1
                   -> GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Internal.$fShowPublishError6
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   MyNetwork.AMQP.Internal.NoConsumers b1
                   -> GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Internal.$fShowPublishError5
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   MyNetwork.AMQP.Internal.NotFound b1
                   -> GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Internal.$fShowPublishError4
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
f7bde183c07509c93d41e860d14c0460
  $fShowReturnReplyCode_$cshowList ::
    [MyNetwork.AMQP.Internal.ReturnReplyCode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MyNetwork.AMQP.Internal.ReturnReplyCode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MyNetwork.AMQP.Internal.ReturnReplyCode
                   MyNetwork.AMQP.Internal.$fShowReturnReplyCode1
                   ls
                   s) -}
f7bde183c07509c93d41e860d14c0460
  $fShowReturnReplyCode_$cshowsPrec ::
    GHC.Types.Int
    -> MyNetwork.AMQP.Internal.ReturnReplyCode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$w$cshowsPrec3 ww1 w1 w2 }) -}
ecece924e6da737246788830c3e8ed40
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds6 :: [(Data.Text.Internal.Text, a)]) ->
                 case ds6 of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds7 ds8
                   -> case ds7 of wild1 { (,) kx x ->
                      case ds8 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds9 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> MyNetwork.AMQP.Internal.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2
                             GHC.Types.LT
                             -> MyNetwork.AMQP.Internal.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } }) -}
ce6b0a2c56b5ef1aaa24a5ad059a208c
  $sfromList1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
08d2bc14afde62147dd5b674006a3f00
  $slookup1 ::
    Data.Text.Internal.Text
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Map.Internal.Map Data.Text.Internal.Text a) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 MyNetwork.AMQP.Internal.$wpoly_go1 @ a ww1 ww2 ww3 w1 }) -}
7ce58c424eb227fdff647fd3b918b43e
  $tc'BasicAck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13578660985290960101##
                   12078897296303661118##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'BasicAck2
                   0#
                   MyNetwork.AMQP.Internal.$tc'BasicAck1) -}
87ae2a6ec44a173f0bd056bba4366a1a
  $tc'BasicAck1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ed25c3f63b61c49655cc4ea6a0da7b44
  $tc'BasicAck2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'BasicAck3) -}
bdba18451a2f6812444982e8f441acaa
  $tc'BasicAck3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BasicAck"#) -}
2518bae2fe4d5a66b2cecb24c7878468
  $tc'BasicNack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13552881827769900540##
                   11736861471839396964##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'BasicNack1
                   0#
                   MyNetwork.AMQP.Internal.$tc'BasicAck1) -}
aa9b89cc0f67b813436748ea029b64cd
  $tc'BasicNack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'BasicNack2) -}
b7e7715f571a15b8fbe7e403c63cebb9
  $tc'BasicNack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BasicNack"#) -}
9669007146234cd209e378d8424a77c7
  $tc'ChanThreadKilledException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6461228272181109314##
                   4498092563322512771##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'ChanThreadKilledException2
                   0#
                   MyNetwork.AMQP.Internal.$tc'ChanThreadKilledException1) -}
26226e4f12443ca20b3a4b5fe27928b6
  $tc'ChanThreadKilledException1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ffa353131e7e42466e00a5966144b0ac
  $tc'ChanThreadKilledException2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'ChanThreadKilledException3) -}
a8c060219749c13012127d2389960165
  $tc'ChanThreadKilledException3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ChanThreadKilledException"#) -}
e0772c24dd1c9d7890d504ade053fa63
  $tc'Channel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12853882334925240198##
                   17895016289956342908##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Channel2
                   0#
                   MyNetwork.AMQP.Internal.$tc'Channel1) -}
1bd25e3ddcf67684b1f756744cee0775
  $tc'Channel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3fc9a066edfe87a0ffaf2518f32fc6ad
  $tc'Channel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Channel3) -}
efe8f76514768864a8c50bcd8cb1ee60
  $tc'Channel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Channel"#) -}
52f586b7e2153645e61d95dc9b9ddc98
  $tc'Connection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5403687284453621461##
                   17016324973223403241##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Connection2
                   0#
                   MyNetwork.AMQP.Internal.$tc'Connection1) -}
b9ff104c0c9507fe3d0bf1a6fbc53dc1
  $tc'Connection1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1882bd19b7cb28d0d75ec414b02d476b
  $tc'Connection2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Connection3) -}
030cac226ee41f287d45a07ea27829c4
  $tc'Connection3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Connection"#) -}
a9bc512bfea295eccbf09c5a0557c0d0
  $tc'ConnectionOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5169609534770730531##
                   6482875465002514134##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'ConnectionOpts2
                   0#
                   MyNetwork.AMQP.Internal.$tc'ConnectionOpts1) -}
9b224980c637b00450ba5969dd2056fd
  $tc'ConnectionOpts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f555bad551d16b19ad82ec0e2404e016
  $tc'ConnectionOpts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'ConnectionOpts3) -}
4355800a1353bef6eb1e18c66b172255
  $tc'ConnectionOpts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConnectionOpts"#) -}
f213e52f82db039c945704856a7e6b73
  $tc'ContentMethod :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1915124669442660054##
                   14724392457470549537##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'ContentMethod2
                   0#
                   MyNetwork.AMQP.Internal.$tc'ContentMethod1) -}
2b1b2d1536fccc3007f3dcfaa3b37435
  $tc'ContentMethod1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ce72cbc324881a7eb340a29be6cb320e
  $tc'ContentMethod2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'ContentMethod3) -}
fd067d50ec49e0e5a2734be7b9d8ede2
  $tc'ContentMethod3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ContentMethod"#) -}
faf1dfc9dfd449071e042a208d7a33b5
  $tc'Envelope :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16962626559574771042##
                   17627185675633752064##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Envelope2
                   0#
                   MyNetwork.AMQP.Internal.$tc'Envelope1) -}
6668baf375058efd766740c16e9f9304
  $tc'Envelope1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3b684d5743a8dcddeed561dd14b43b9
  $tc'Envelope2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Envelope3) -}
f8a4d96c90aba699ad0877d54673e9fa
  $tc'Envelope3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Envelope"#) -}
52e3eeb0bb560de36f27788ef31f3f0b
  $tc'Message :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11404345548682316255##
                   8060910187542764279##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Message2
                   0#
                   MyNetwork.AMQP.Internal.$tc'Message1) -}
952df139ea7aec9dc60bd15247fcfc4a
  $tc'Message1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b9f37ffa34053c7767d329ab75af492
  $tc'Message2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Message3) -}
968aefd8bcbbbcb44b99ab1065040dd0
  $tc'Message3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Message"#) -}
5baa1a3a75d675c581edeca7357ead82
  $tc'NoConsumers :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9820860407748002037##
                   916792507785287874##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'NoConsumers2
                   0#
                   MyNetwork.AMQP.Internal.$tc'NoConsumers1) -}
09063e98f06d393437de2fb721680adb
  $tc'NoConsumers1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2d54e45b2faed878b3ba0596aad4aa40
  $tc'NoConsumers2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'NoConsumers3) -}
86c915982cb12867d9183300a15c3427
  $tc'NoConsumers3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoConsumers"#) -}
7e4bcf55fa372f28f32cb047f27b669f
  $tc'NonPersistent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15083261417039112100##
                   2463025923419629817##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'NonPersistent2
                   0#
                   MyNetwork.AMQP.Internal.$tc'NonPersistent1) -}
1b98d2c58e2f7c1cba60029f72d4e076
  $tc'NonPersistent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
10ca9fa68b1cf298d76bd2bc5134078e
  $tc'NonPersistent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'NonPersistent3) -}
21ddb1b2f72e1702851e9aa4fdf30ded
  $tc'NonPersistent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonPersistent"#) -}
374a7485c422ab3118c6323fb2e55c35
  $tc'NotFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   74221589980866695##
                   4086472867958668299##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'NotFound1
                   0#
                   MyNetwork.AMQP.Internal.$tc'NoConsumers1) -}
ff8f5d9a00d8c6424abc839aab105ef5
  $tc'NotFound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'NotFound2) -}
d53d84f46d973c654f73c765de471c66
  $tc'NotFound2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotFound"#) -}
f27dfb2afe512bc77235a867b2f92b97
  $tc'Persistent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6472648241922817615##
                   16376213355940733056##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Persistent1
                   0#
                   MyNetwork.AMQP.Internal.$tc'NonPersistent1) -}
63160d026c4c8996469fc8c1601f1790
  $tc'Persistent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Persistent2) -}
850e32292f0b1e82fa0774e49bcb3a43
  $tc'Persistent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Persistent"#) -}
b91e914ea8e7abbf4a90b750fc9d8eb3
  $tc'PublishError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15958415697322206382##
                   9205555470956010468##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'PublishError2
                   0#
                   MyNetwork.AMQP.Internal.$tc'PublishError1) -}
9abcb26cee3046a308086cd0e7eb5965
  $tc'PublishError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e440559323542d88e889cb1962c01d63
  $tc'PublishError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'PublishError3) -}
2d9cc7e725b1b7fe792e1d8b25621708
  $tc'PublishError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishError"#) -}
aee8eea53bf878295631b8a9b80e991c
  $tc'SASLMechanism :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   248629460483262346##
                   7375137863518895723##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'SASLMechanism2
                   0#
                   MyNetwork.AMQP.Internal.$tc'SASLMechanism1) -}
6ef47191d3e95c068568ab6732341597
  $tc'SASLMechanism1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5656d24c1b5e5112b73fd663df5387aa
  $tc'SASLMechanism2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'SASLMechanism3) -}
62f1a7d9dd836d693f2ee12f91cb91ef
  $tc'SASLMechanism3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SASLMechanism"#) -}
8d77399c43ccbda96123cc75cb36c5e9
  $tc'SimpleMethod :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2081984234498654162##
                   10190293778750986996##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'SimpleMethod2
                   0#
                   MyNetwork.AMQP.Internal.$tc'SimpleMethod1) -}
aec8ca7ed63e8db6a570ed19b4a942c2
  $tc'SimpleMethod1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a373b56da06a6f0def272ff3c8742574
  $tc'SimpleMethod2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'SimpleMethod3) -}
8d87cc9a5d3c27551481b08f72c2d768
  $tc'SimpleMethod3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SimpleMethod"#) -}
565eb19f74e4d4497323f09e3a085aa9
  $tc'TLSCustom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5867406874688940410##
                   8998168827638286136##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'TLSCustom2
                   0#
                   MyNetwork.AMQP.Internal.$tc'TLSCustom1) -}
fc172984e03b980d0efb74fe576fea60
  $tc'TLSCustom1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1de9c663102f706e85d523b5f3a34817
  $tc'TLSCustom2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'TLSCustom3) -}
d9e2f3f94bf24296b53f608e71ca3661
  $tc'TLSCustom3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TLSCustom"#) -}
89f1946b57b0d3136a9c72fa25c893b1
  $tc'TLSTrusted :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3921855035357534033##
                   12246433130424339804##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'TLSTrusted2
                   0#
                   MyNetwork.AMQP.Internal.$tc'TLSTrusted1) -}
7f5dca500093f9b897f16e578a489a97
  $tc'TLSTrusted1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
a5d8b7bcee168c1d23773f03cc8099b2
  $tc'TLSTrusted2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'TLSTrusted3) -}
3b8a46a69c419d464c3122f7f297106e
  $tc'TLSTrusted3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TLSTrusted"#) -}
ce686dd79e46b1f9625dbf45e116fbe2
  $tc'TLSUntrusted :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2805269908934734891##
                   771679180869875402##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'TLSUntrusted1
                   0#
                   MyNetwork.AMQP.Internal.$tc'TLSTrusted1) -}
11ecfeb76a167294e9b7f4bc166884a5
  $tc'TLSUntrusted1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'TLSUntrusted2) -}
fe85c33352953b3bb1314f811eb51a12
  $tc'TLSUntrusted2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TLSUntrusted"#) -}
be2ae00a9582bf72327006fcbedf91ed
  $tc'Unroutable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16096924129980822838##
                   3895799292412805091##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tc'Unroutable1
                   0#
                   MyNetwork.AMQP.Internal.$tc'NoConsumers1) -}
729860a5476f47dfe72a003d2033e8fa
  $tc'Unroutable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tc'Unroutable2) -}
7dd8c65fe97100ccc9028d47688093f9
  $tc'Unroutable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unroutable"#) -}
d04318726f3f629cf2f5aacfde4588ad
  $tcAckType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14457480619088887849##
                   15030943162656627649##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcAckType1
                   0#
                   GHC.Types.krep$*) -}
64c62996ca7326e8cb26c6774b0ad70a
  $tcAckType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcAckType2) -}
6755b3f95ddf34480ebb23b25565f037
  $tcAckType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AckType"#) -}
ca89c3cc8683b0c4c53a30915cf4583c
  $tcAssembly :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14449812516015323513##
                   16545981695282301692##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcAssembly1
                   0#
                   GHC.Types.krep$*) -}
ce0bdca1871e093a518382c0e9dc62d7
  $tcAssembly1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcAssembly2) -}
a854b180ebfa0c70bac41c56d2c8a3f2
  $tcAssembly2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Assembly"#) -}
382fdce8df3447ebdd20cc898d1752ad
  $tcChanThreadKilledException :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6378725418837481457##
                   15114659974606812525##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException8
                   0#
                   GHC.Types.krep$*) -}
9e85f75b41d1584673b8acc5578c9cd2
  $tcChannel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4464210048176454586##
                   4493099006959207890##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcChannel1
                   0#
                   GHC.Types.krep$*) -}
ab001204f9e06fd69e2e8692724ab5b4
  $tcChannel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcChannel2) -}
526f31510d063c75499a93af8e91edc7
  $tcChannel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Channel"#) -}
4675c713c4f93b2a7e760c31f59177c2
  $tcConnection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14541485369659459192##
                   13180362273006995721##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcConnection1
                   0#
                   GHC.Types.krep$*) -}
9e735a3b0f08c95575e2697ced253e3c
  $tcConnection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcConnection2) -}
a58f6b1e318fff982b8005b11a4b24a1
  $tcConnection2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Connection"#) -}
365cbca9e95688895c8ba8ab22af5dfc
  $tcConnectionOpts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16268350236430541228##
                   10502514026427914468##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcConnectionOpts1
                   0#
                   GHC.Types.krep$*) -}
e7955268897e2cad4051549fe27211ce
  $tcConnectionOpts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcConnectionOpts2) -}
28be413200e4bc5591a917b9b607a5aa
  $tcConnectionOpts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConnectionOpts"#) -}
6f84b97e5493ce66ea7c0b7437b6a0d7
  $tcDeliveryMode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14503941864055678918##
                   5881067580159051630##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcDeliveryMode1
                   0#
                   GHC.Types.krep$*) -}
778780cd8c893432bf166286279ec4ac
  $tcDeliveryMode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcDeliveryMode2) -}
647294781509ee16372a11a710852919
  $tcDeliveryMode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DeliveryMode"#) -}
49a09fa79f72c91d367f158f9be38940
  $tcEnvelope :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6209543894332933515##
                   5142080212817433816##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcEnvelope1
                   0#
                   GHC.Types.krep$*) -}
b58cb5a1be5d7ae24b58ec9529a4d001
  $tcEnvelope1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcEnvelope2) -}
53b81c052a25404e58dea49ad7f982c0
  $tcEnvelope2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Envelope"#) -}
77b86a02c5218b0395adef3efa541e6e
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9106141637664154374##
                   7679572406798678678##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcMessage1
                   0#
                   GHC.Types.krep$*) -}
fb09fa9ffe205d67af42f9940e6350c2
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcMessage2) -}
d3bde57c915766435a311fe3eb5e5648
  $tcMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Message"#) -}
d15fa049a1dccb82cadfe8c98de459b5
  $tcPublishError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17301646903609618507##
                   4666551253825013130##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcPublishError1
                   0#
                   GHC.Types.krep$*) -}
3f698d5f9b937bfaa6d611f434c0d61c
  $tcPublishError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcPublishError2) -}
18e04967f8c1b621b33f6a3f2d435871
  $tcPublishError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishError"#) -}
32e1f299b962b332a13b49743f418a00
  $tcReturnReplyCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15445715281808270220##
                   8215350363624081392##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcReturnReplyCode1
                   0#
                   GHC.Types.krep$*) -}
5df604c22eb9ba30e85ce7c08f0c249d
  $tcReturnReplyCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcReturnReplyCode2) -}
8177bb9d1cafa655ba299c84aa7b5345
  $tcReturnReplyCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReturnReplyCode"#) -}
3e6bad2fe4571bb944eb294d45c0a3f2
  $tcSASLMechanism :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14061359132824056166##
                   10052278292087974859##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcSASLMechanism1
                   0#
                   GHC.Types.krep$*) -}
06e6a431cfe0d9e8d348f255a1de4627
  $tcSASLMechanism1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcSASLMechanism2) -}
b3fcd4b4d76b800a7fb9757f03c749f5
  $tcSASLMechanism2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SASLMechanism"#) -}
ac218b1dd36b245f896b476177076778
  $tcTLSSettings :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9359467743103852891##
                   10462959425527412960##
                   MyNetwork.AMQP.Internal.$trModule
                   MyNetwork.AMQP.Internal.$tcTLSSettings1
                   0#
                   GHC.Types.krep$*) -}
2ff2854da236f7520d0d856932452296
  $tcTLSSettings1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$tcTLSSettings2) -}
fb1afcf6175ecef658717c473af36a2a
  $tcTLSSettings2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TLSSettings"#) -}
b246f92aa66f5cbc711bf87b7afc9f9f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyNetwork.AMQP.Internal.$trModule3
                   MyNetwork.AMQP.Internal.$trModule1) -}
90a20a8f58a17369c98e807b3a8558f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$trModule2) -}
62df958cc7f5485b3fa70d299d6920c7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyNetwork.AMQP.Internal"#) -}
350c595a1233b866c873eaa1b95a8d56
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MyNetwork.AMQP.Internal.$trModule4) -}
fd694fd3c879e34409458ad8114c2223
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("largemsgtest-0.1.0.0-BAlIjeLvE8DKjAjJ9aXXGC"#) -}
ba5250b4c14f5f5f09b15e0bb4086ae9
  $w$c== ::
    MyNetwork.AMQP.Internal.ReturnReplyCode
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> MyNetwork.AMQP.Internal.ReturnReplyCode
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (ww1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww2 :: Data.Text.Internal.Text)
                   (ww3 :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (ww4 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww5 :: Data.Text.Internal.Text) ->
                 case MyNetwork.AMQP.Internal.$fEqPublishError_$c==1
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing -> Data.Text.$fEqText_$c== ww2 ww5
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case a1 of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                case b1 of wild4 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                case GHC.Prim.==# dt2 dt5 of lwild {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Int# #)}
                                            dt
                                            (GHC.Prim.int2Word# dt1)
                                            dt3
                                            (GHC.Prim.int2Word# dt4)
                                            (GHC.Prim.int2Word# dt2)
                                            GHC.Prim.realWorld# of wild5 { (#,#) ds6 ds7 ->
                                     case GHC.Prim.narrow32Int# ds7 of wild6 {
                                       DEFAULT -> GHC.Types.False
                                       0# -> Data.Text.$fEqText_$c== ww2 ww5 } } } } } } } }) -}
526afa0333c4fb39d6fd1fa459b2940d
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Internal.Message
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Internal.PublishError
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
f7bde183c07509c93d41e860d14c0460
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (MyNetwork.AMQP.Internal.ReturnReplyCode
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
7eaee98351f8a0006059cb644be2d7ac
  $w$cshow :: GHC.Exception.SomeException -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Exception.SomeException) ->
                 GHC.CString.unpackAppendCString#
                   MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException5
                   (GHC.CString.unpackAppendCString#
                      MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException4
                      (case ww of wild { GHC.Exception.SomeException e $dException e1 ->
                       GHC.Show.showsPrec
                         @ e
                         (GHC.Exception.$p2Exception @ e $dException)
                         MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                         e1
                         MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException1 }))) -}
c6684063bd94152b2a0c78c6001bd193
  $w$cshowsPrec ::
    GHC.Prim.Int# -> GHC.Exception.SomeException -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Exception.SomeException) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of wild { GHC.Exception.SomeException e $dException e1 ->
                     GHC.Show.showsPrec
                       @ e
                       (GHC.Exception.$p2Exception @ e $dException)
                       MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                       e1 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException5
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException4
                           (f2
                              (GHC.CString.unpackAppendCString#
                                 MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException2
                                 x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException5
                           (GHC.CString.unpackAppendCString#
                              MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException4
                              (f2
                                 (GHC.CString.unpackAppendCString#
                                    MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
6b333bc34acb406998d522b90c43651a
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> MyNetwork.AMQP.Internal.Assembly -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: MyNetwork.AMQP.Internal.Assembly) ->
                 case w of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = MyNetwork.AMQP.Generated.$fShowMethodPayload_$cshowsPrec
                            MyNetwork.AMQP.Internal.$fShowAssembly5
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             MyNetwork.AMQP.Internal.$fShowAssembly3
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                MyNetwork.AMQP.Internal.$fShowAssembly3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   MyNetwork.AMQP.Internal.ContentMethod b1 b2 b3
                   -> let {
                        lvl234 :: [GHC.Types.Char]
                        = Data.ByteString.Lazy.Internal.unpackChars b3
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = MyNetwork.AMQP.Generated.$fShowMethodPayload_$cshowsPrec
                            MyNetwork.AMQP.Internal.$fShowAssembly5
                            b1
                      } in
                      let {
                        f3 :: GHC.Base.String -> GHC.Base.String
                        = MyNetwork.AMQP.Generated.$fShowContentHeaderProperties_$cshowsPrec
                            MyNetwork.AMQP.Internal.$fShowAssembly5
                            b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.CString.unpackAppendCString#
                            MyNetwork.AMQP.Internal.$fShowAssembly2
                            (f2
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (f3
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)3
                                           (GHC.Show.showLitString
                                              lvl234
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)3
                                                 x)))))))
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) } }) -}
c952be0937e4bf4259870a0e287cd4de
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Internal.ReturnReplyCode
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (ww2 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww3 :: Data.Text.Internal.Text) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException3
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        MyNetwork.AMQP.Internal.$fShowPublishError8
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Internal.$fShowPublishError7
                           (MyNetwork.AMQP.Internal.$w$cshowsPrec3
                              0#
                              ww1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    MyNetwork.AMQP.Internal.$fShowPublishError3
                                    (f2
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             MyNetwork.AMQP.Internal.$fShowPublishError2
                                             (case Data.Text.Show.$w$cshowsPrec
                                                     ww3
                                                     (GHC.CString.unpackAppendCString#
                                                        MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException2
                                                        x) of ww4 { (#,#) ww5 ww6 ->
                                              GHC.Types.: @ GHC.Types.Char ww5 ww6 }))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           MyNetwork.AMQP.Internal.$fShowPublishError8
                           (GHC.CString.unpackAppendCString#
                              MyNetwork.AMQP.Internal.$fShowPublishError7
                              (MyNetwork.AMQP.Internal.$w$cshowsPrec3
                                 0#
                                 ww1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       MyNetwork.AMQP.Internal.$fShowPublishError3
                                       (f2
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                MyNetwork.AMQP.Internal.$fShowPublishError2
                                                (case Data.Text.Show.$w$cshowsPrec
                                                        ww3
                                                        (GHC.CString.unpackAppendCString#
                                                           MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException2
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.$fShow(,)2
                                                              x)) of ww4 { (#,#) ww5 ww6 ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   ww5
                                                   ww6 }))))))))) }) -}
f7bde183c07509c93d41e860d14c0460
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> MyNetwork.AMQP.Internal.ReturnReplyCode
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: MyNetwork.AMQP.Internal.ReturnReplyCode)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   MyNetwork.AMQP.Internal.Unroutable b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MyNetwork.AMQP.Internal.$fShowPublishError6
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Internal.$fShowPublishError6
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   MyNetwork.AMQP.Internal.NoConsumers b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MyNetwork.AMQP.Internal.$fShowPublishError5
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Internal.$fShowPublishError5
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   MyNetwork.AMQP.Internal.NotFound b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MyNetwork.AMQP.Internal.$fShowPublishError4
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Internal.$fShowPublishError4
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
ac37dc4c9d74f7a18e3a155b05bb0671
  $w$sgo13 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
f032a7cdad5f877f22163678deacbed7
  $waddChannelExceptionHandler ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld [GHC.Exception.SomeException -> GHC.Types.IO ()]
    -> (GHC.Exception.SomeException -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            [GHC.Exception.SomeException -> GHC.Types.IO ()])
                   (w :: GHC.Exception.SomeException -> GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w1 of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ (GHC.Exception.SomeException -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                ww
                                s1 of ds8 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    (# s,
                                       GHC.Types.:
                                         @ (GHC.Exception.SomeException -> GHC.Types.IO ())
                                         w
                                         ipv3 #)))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                   e1
                                   s2# })
                                ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                ww
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ (GHC.Exception.SomeException -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [GHC.Exception.SomeException -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }) -}
73beefdbfc1738e21c7a9390db7ea3d1
  $waddConnectionBlockedHandler ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
    -> (Data.Text.Internal.Text -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())])
                   (w :: Data.Text.Internal.Text -> GHC.Types.IO ())
                   (w1 :: GHC.Types.IO ())
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w2 of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ (Data.Text.Internal.Text -> GHC.Types.IO (),
                                         GHC.Types.IO ())
                                      (w, w1)
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(Data.Text.Internal.Text -> GHC.Types.IO (),
                                         GHC.Types.IO ())]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                ww
                                s1 of ds8 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    (# s,
                                       GHC.Types.:
                                         @ (Data.Text.Internal.Text -> GHC.Types.IO (),
                                            GHC.Types.IO ())
                                         (w, w1)
                                         ipv3 #)))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ [(Data.Text.Internal.Text -> GHC.Types.IO (),
                                            GHC.Types.IO ())]
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                   e1
                                   s2# })
                                ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                ww
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ (Data.Text.Internal.Text -> GHC.Types.IO (),
                                         GHC.Types.IO ())
                                      (w, w1)
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(Data.Text.Internal.Text -> GHC.Types.IO (),
                                         GHC.Types.IO ())]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }) -}
d7ead70bc14c2938127ab8958d3a7024
  $waddConnectionClosedHandler ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> GHC.MVar.MVar [GHC.Types.IO ()]
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)))
                   (ww1 :: GHC.MVar.MVar [GHC.Types.IO ()])
                   (w :: GHC.Types.Bool)
                   (w1 :: GHC.Types.IO ())
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w2 of ds6 { (#,#) ipv ipv1 ->
                 let {
                   lvl234 :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.getMaskingState# s of ds7 { (#,#) ipv2 ipv3 ->
                     case ipv3 of ds8 {
                       DEFAULT
                       -> case ww1 of wild { GHC.MVar.MVar mvar# ->
                          case GHC.Prim.takeMVar#
                                 @ GHC.Prim.RealWorld
                                 @ [GHC.Types.IO ()]
                                 mvar#
                                 ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                          case GHC.Prim.catch#
                                 @ [GHC.Types.IO ()]
                                 @ GHC.Exception.SomeException
                                 (GHC.Prim.maskAsyncExceptions#
                                    @ [GHC.Types.IO ()]
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     (# s1, GHC.Types.: @ (GHC.Types.IO ()) w1 ipv5 #)))
                                 (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                    (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.putMVar#
                                         @ GHC.Prim.RealWorld
                                         @ [GHC.Types.IO ()]
                                         mvar#
                                         ipv5
                                         s1 of s2# { DEFAULT ->
                                  GHC.Prim.raiseIO#
                                    @ GHC.Exception.SomeException
                                    @ [GHC.Types.IO ()]
                                    e1
                                    s2# })
                                 ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                          case GHC.Prim.putMVar#
                                 @ GHC.Prim.RealWorld
                                 @ [GHC.Types.IO ()]
                                 mvar#
                                 ipv7
                                 ipv6 of s2# { DEFAULT ->
                          (# s2#, GHC.Tuple.() #) } } } }
                       0#
                       -> GHC.Prim.maskAsyncExceptions#
                            @ ()
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ww1 of wild { GHC.MVar.MVar mvar# ->
                             case GHC.Prim.takeMVar#
                                    @ GHC.Prim.RealWorld
                                    @ [GHC.Types.IO ()]
                                    mvar#
                                    s1 of ds9 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.catch#
                                    @ [GHC.Types.IO ()]
                                    @ GHC.Exception.SomeException
                                    (GHC.Prim.unmaskAsyncExceptions#
                                       @ [GHC.Types.IO ()]
                                       (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        (# s2, GHC.Types.: @ (GHC.Types.IO ()) w1 ipv5 #)))
                                    (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                       (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case GHC.Prim.putMVar#
                                            @ GHC.Prim.RealWorld
                                            @ [GHC.Types.IO ()]
                                            mvar#
                                            ipv5
                                            s2 of s2# { DEFAULT ->
                                     GHC.Prim.raiseIO#
                                       @ GHC.Exception.SomeException
                                       @ [GHC.Types.IO ()]
                                       e1
                                       s2# })
                                    ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                             case GHC.Prim.putMVar#
                                    @ GHC.Prim.RealWorld
                                    @ [GHC.Types.IO ()]
                                    mvar#
                                    ipv7
                                    ipv6 of s2# { DEFAULT ->
                             (# s2#, GHC.Tuple.() #) } } } })
                            ipv2
                       1#
                       -> case ww1 of wild { GHC.MVar.MVar mvar# ->
                          case GHC.Prim.takeMVar#
                                 @ GHC.Prim.RealWorld
                                 @ [GHC.Types.IO ()]
                                 mvar#
                                 ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                          case GHC.Prim.catch#
                                 @ [GHC.Types.IO ()]
                                 @ GHC.Exception.SomeException
                                 (GHC.Prim.maskUninterruptible#
                                    @ [GHC.Types.IO ()]
                                    (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     (# s1, GHC.Types.: @ (GHC.Types.IO ()) w1 ipv5 #)))
                                 (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                    (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.putMVar#
                                         @ GHC.Prim.RealWorld
                                         @ [GHC.Types.IO ()]
                                         mvar#
                                         ipv5
                                         s1 of s2# { DEFAULT ->
                                  GHC.Prim.raiseIO#
                                    @ GHC.Exception.SomeException
                                    @ [GHC.Types.IO ()]
                                    e1
                                    s2# })
                                 ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                          case GHC.Prim.putMVar#
                                 @ GHC.Prim.RealWorld
                                 @ [GHC.Types.IO ()]
                                 mvar#
                                 ipv7
                                 ipv6 of s2# { DEFAULT ->
                          (# s2#, GHC.Tuple.() #) } } } } } }
                 } in
                 let {
                   io2 :: GHC.Base.Maybe
                            (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (cc :: GHC.Base.Maybe
                                               (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case cc of wild {
                                      GHC.Base.Nothing -> lvl234 eta
                                      GHC.Base.Just ds7
                                      -> case w of wild1 {
                                           GHC.Types.False -> lvl234 eta
                                           GHC.Types.True
                                           -> w1 `cast` (GHC.Types.N:IO[0] <()>_R) eta } }) -}
                   = \ (cc :: GHC.Base.Maybe
                                (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))[OneShot]
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case cc of wild {
                       GHC.Base.Nothing -> lvl234 eta
                       GHC.Base.Just ds7
                       -> case w of wild1 {
                            GHC.Types.False -> lvl234 eta
                            GHC.Types.True -> w1 `cast` (GHC.Types.N:IO[0] <()>_R) eta } }
                 } in
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions# @ () (io2 ipv3))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv3
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, ipv5 #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                ww
                                s1 of ds8 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ ()
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions# @ () (io2 ipv3))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (GHC.Base.Maybe
                                             (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 s2# })
                                ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                ww
                                ipv3
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, ipv5 #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible# @ () (io2 ipv3))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv3
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, ipv5 #) } } } } }) -}
4ce97b4a12e79386fd2373876c0df1b8
  $waddReturnListener ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      [(MyNetwork.AMQP.Internal.Message,
        MyNetwork.AMQP.Internal.PublishError)
       -> GHC.Types.IO ()]
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.PublishError)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            [(MyNetwork.AMQP.Internal.Message,
                              MyNetwork.AMQP.Internal.PublishError)
                             -> GHC.Types.IO ()])
                   (w :: (MyNetwork.AMQP.Internal.Message,
                          MyNetwork.AMQP.Internal.PublishError)
                         -> GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w1 of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ ((MyNetwork.AMQP.Internal.Message,
                                          MyNetwork.AMQP.Internal.PublishError)
                                         -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(MyNetwork.AMQP.Internal.Message,
                                         MyNetwork.AMQP.Internal.PublishError)
                                        -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                ww
                                s1 of ds8 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ [(MyNetwork.AMQP.Internal.Message,
                                       MyNetwork.AMQP.Internal.PublishError)
                                      -> GHC.Types.IO ()]
                                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    (# s,
                                       GHC.Types.:
                                         @ ((MyNetwork.AMQP.Internal.Message,
                                             MyNetwork.AMQP.Internal.PublishError)
                                            -> GHC.Types.IO ())
                                         w
                                         ipv3 #)))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ [(MyNetwork.AMQP.Internal.Message,
                                            MyNetwork.AMQP.Internal.PublishError)
                                           -> GHC.Types.IO ()]
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ [(MyNetwork.AMQP.Internal.Message,
                                       MyNetwork.AMQP.Internal.PublishError)
                                      -> GHC.Types.IO ()]
                                   e1
                                   s2# })
                                ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                ww
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Types.:
                                      @ ((MyNetwork.AMQP.Internal.Message,
                                          MyNetwork.AMQP.Internal.PublishError)
                                         -> GHC.Types.IO ())
                                      w
                                      ipv3 #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ [(MyNetwork.AMQP.Internal.Message,
                                         MyNetwork.AMQP.Internal.PublishError)
                                        -> GHC.Types.IO ()]
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ [(MyNetwork.AMQP.Internal.Message,
                                    MyNetwork.AMQP.Internal.PublishError)
                                   -> GHC.Types.IO ()]
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [(MyNetwork.AMQP.Internal.Message,
                                 MyNetwork.AMQP.Internal.PublishError)
                                -> GHC.Types.IO ()]
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }) -}
d38d7b0dba97c12ae66500d2721dbd0b
  $wcloseChannel' ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar
         (Data.Sequence.Internal.Seq
            (GHC.MVar.MVar MyNetwork.AMQP.Internal.Assembly))
    -> GHC.Word.Word16
    -> MyNetwork.AMQP.Helpers.Lock
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> MyNetwork.AMQP.Types.CloseType
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(A,1*U(A,1*U(U,U,U)),1*U(U),A,A,A,A,A,A,A,A,A)><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,U><L,U><L,1*U(U,U,U)><S,U>,
     Inline: [0] -}
6f223bacfb81dfe95073f3074956c235
  $wcloseConnection ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
    -> GHC.MVar.MVar ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U),A,A)><S,U><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: MyNetwork2.Connection.Types.Connection)
                   (ww1 :: GHC.Prim.MVar# GHC.Prim.RealWorld ())
                   (ww2 :: GHC.MVar.MVar ())
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ ()
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.getMaskingState# s of ds6 { (#,#) ipv ipv1 ->
                         case ipv1 of ds7 {
                           DEFAULT
                           -> case ww2 of wild { GHC.MVar.MVar mvar# ->
                              case GHC.Prim.takeMVar#
                                     @ GHC.Prim.RealWorld
                                     @ ()
                                     mvar#
                                     ipv of ds8 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.SomeException
                                     (GHC.Prim.maskAsyncExceptions#
                                        @ ()
                                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         MyNetwork.AMQP.Internal.$wwriteFrame
                                           ww
                                           MyNetwork.AMQP.Internal.closeChannel6
                                           MyNetwork.AMQP.Internal.closeConnection3
                                           eta))
                                     (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                        (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case GHC.Prim.putMVar#
                                             @ GHC.Prim.RealWorld
                                             @ ()
                                             mvar#
                                             ipv3
                                             s1 of s2# { DEFAULT ->
                                      GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 s2# })
                                     ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ ()
                                     mvar#
                                     ipv3
                                     ipv4 of s2# { DEFAULT ->
                              (# s2#, ipv5 #) } } } }
                           0#
                           -> GHC.Prim.maskAsyncExceptions#
                                @ ()
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case ww2 of wild { GHC.MVar.MVar mvar# ->
                                 case GHC.Prim.takeMVar#
                                        @ GHC.Prim.RealWorld
                                        @ ()
                                        mvar#
                                        s1 of ds8 { (#,#) ipv2 ipv3 ->
                                 case GHC.Prim.catch#
                                        @ ()
                                        @ GHC.Exception.SomeException
                                        (GHC.Prim.unmaskAsyncExceptions#
                                           @ ()
                                           (\ (eta :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                            MyNetwork.AMQP.Internal.$wwriteFrame
                                              ww
                                              MyNetwork.AMQP.Internal.closeChannel6
                                              MyNetwork.AMQP.Internal.closeConnection3
                                              eta))
                                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case GHC.Prim.putMVar#
                                                @ GHC.Prim.RealWorld
                                                @ ()
                                                mvar#
                                                ipv3
                                                s2 of s2# { DEFAULT ->
                                         GHC.Prim.raiseIO#
                                           @ GHC.Exception.SomeException
                                           @ ()
                                           e1
                                           s2# })
                                        ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ ()
                                        mvar#
                                        ipv3
                                        ipv4 of s2# { DEFAULT ->
                                 (# s2#, ipv5 #) } } } })
                                ipv
                           1#
                           -> case ww2 of wild { GHC.MVar.MVar mvar# ->
                              case GHC.Prim.takeMVar#
                                     @ GHC.Prim.RealWorld
                                     @ ()
                                     mvar#
                                     ipv of ds8 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.SomeException
                                     (GHC.Prim.maskUninterruptible#
                                        @ ()
                                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         MyNetwork.AMQP.Internal.$wwriteFrame
                                           ww
                                           MyNetwork.AMQP.Internal.closeChannel6
                                           MyNetwork.AMQP.Internal.closeConnection3
                                           eta))
                                     (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                        (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case GHC.Prim.putMVar#
                                             @ GHC.Prim.RealWorld
                                             @ ()
                                             mvar#
                                             ipv3
                                             s1 of s2# { DEFAULT ->
                                      GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () e1 s2# })
                                     ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ ()
                                     mvar#
                                     ipv3
                                     ipv4 of s2# { DEFAULT ->
                              (# s2#, ipv5 #) } } } } } })
                        MyNetwork.AMQP.Internal.closeConnection2
                        w of ds6 { (#,#) ipv ipv1 ->
                 case GHC.Prim.readMVar#
                        @ GHC.Prim.RealWorld
                        @ ()
                        ww1
                        ipv of ds7 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
adaf87ed223b3b01fe85f9b6633c4271
  $wcollectContent ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      (Control.Concurrent.Chan.Stream
         MyNetwork.AMQP.Protocol.FramePayload)
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (Control.Concurrent.Chan.Stream
            MyNetwork.AMQP.Protocol.FramePayload)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (MyNetwork.AMQP.Generated.ContentHeaderProperties,
           Data.ByteString.Lazy.Internal.ByteString) #)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            (Control.Concurrent.Chan.Stream
                               MyNetwork.AMQP.Protocol.FramePayload))
                   (ww1 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld
                             (Control.Concurrent.Chan.Stream
                                MyNetwork.AMQP.Protocol.FramePayload))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Control.Concurrent.Chan.$wreadChan
                        @ MyNetwork.AMQP.Protocol.FramePayload
                        ww
                        ww1
                        w of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   DEFAULT
                   -> MyNetwork.AMQP.Internal.collectContent5
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(MyNetwork.AMQP.Generated.ContentHeaderProperties,
                             Data.ByteString.Lazy.Internal.ByteString)>_R)
                        ipv
                   MyNetwork.AMQP.Protocol.ContentHeaderPayload ds7 ds8 bodySize props
                   -> case bodySize of wild1 { GHC.Word.W64# x# ->
                      letrec {
                        $wcollect :: GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           [Data.ByteString.Lazy.Internal.ByteString] #)
                          {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                        = \ (ww2 :: GHC.Prim.Int#)
                            (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case GHC.Prim.<=# ww2 0# of lwild {
                            DEFAULT
                            -> case Control.Concurrent.Chan.$wreadChan
                                      @ MyNetwork.AMQP.Protocol.FramePayload
                                      ww
                                      ww1
                                      w1 of ds9 { (#,#) ipv2 ipv3 ->
                               case ipv3 of wild2 {
                                 DEFAULT
                                 -> MyNetwork.AMQP.Internal.collectContent2
                                      `cast`
                                    (GHC.Types.N:IO[0]
                                         <[Data.ByteString.Lazy.Internal.ByteString]>_R)
                                      ipv2
                                 MyNetwork.AMQP.Protocol.ContentBodyPayload payload
                                 -> let {
                                      exit :: GHC.Prim.Int#
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    [Data.ByteString.Lazy.Internal.ByteString] #)
                                        <join 1> {- Arity: 1, Strictness: <S,U> -}
                                      = \ (ww3 :: GHC.Prim.Int#)[OneShot] ->
                                        case $wcollect
                                               (GHC.Prim.-# ww2 ww3)
                                               ipv2 of ds10 { (#,#) ipv4 ipv5 ->
                                        (# ipv4,
                                           GHC.Types.:
                                             @ Data.ByteString.Lazy.Internal.ByteString
                                             payload
                                             ipv5 #) }
                                    } in
                                    letrec {
                                      $wgo2 :: GHC.Prim.Int#
                                               -> Data.ByteString.Lazy.Internal.ByteString
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     [Data.ByteString.Lazy.Internal.ByteString] #)
                                        <join 2> {- Arity: 2, Strictness: <S,U><S,1*U>,
                                                    Inline: [0] -}
                                      = \ (ww3 :: GHC.Prim.Int#)
                                          (w2 :: Data.ByteString.Lazy.Internal.ByteString) ->
                                        case w2 of wild3 {
                                          Data.ByteString.Lazy.Internal.Empty -> exit ww3
                                          Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs1
                                          -> $wgo2 (GHC.Prim.+# ww3 dt3) cs1 }
                                    } in
                                    $wgo2 0# payload } }
                            1#
                            -> (# w1,
                                  GHC.Types.[] @ Data.ByteString.Lazy.Internal.ByteString #) }
                      } in
                      case $wcollect
                             (GHC.Prim.word2Int# x#)
                             ipv of ds9 { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         (props,
                          Data.ByteString.Lazy.Internal.$fMonoidByteString_$cmconcat
                            ipv3) #) } } } }) -}
1a6755c48548e9641bc545849230f3cd
  $wconnectionGetExact ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U),U(U,U(U)))><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: MyNetwork2.Connection.Types.Connection)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 letrec {
                   $wloop1 :: Data.ByteString.Internal.ByteString
                              -> GHC.Prim.Int#
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    Data.ByteString.Internal.ByteString #)
                     <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                   = \ (w2 :: Data.ByteString.Internal.ByteString)
                       (ww1 :: GHC.Prim.Int#)
                       (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case GHC.Prim.==# ww1 ww of lwild {
                       DEFAULT
                       -> case MyNetwork2.Connection.$wconnectionGet
                                 w
                                 (GHC.Prim.-# ww ww1)
                                 w3 of ds6 { (#,#) ipv ipv1 ->
                          case ipv1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                          $wloop1
                            (GHC.Base.mappend
                               @ Data.ByteString.Internal.ByteString
                               Data.ByteString.Internal.$fMonoidByteString
                               w2
                               wild)
                            (GHC.Prim.+# ww1 dt3)
                            ipv } }
                       1# -> (# w3, w2 #) }
                 } in
                 $wloop1 Data.ByteString.empty 0# w1) -}
6cf0d4f012d8faf71459e575dd8c1a5f
  $wconnectionReceiver ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld MyNetwork2.Connection.Types.ConnectionBackend
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (GHC.Base.Maybe Data.ByteString.Internal.ByteString)
    -> Network.Socket.HostName
    -> GHC.Prim.Word#
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (Data.IntMap.Internal.IntMap
            (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId))
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
    -> GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <B,U><B,U><B,U><B,U><B,U><B,U><B,U><B,U><B,U>b,
     Inline: [0] -}
0b63654308056003efd2e2467d04ac09
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (GHC.Magic.noinline
                    @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                    GHC.IO.failIO1
                      `cast`
                    (forall (a :: <*>_N).
                     <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                    @ ()
                    MyNetwork.AMQP.Internal.closeChannel2)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   w) -}
4e34ffe6fff50042b43f23bd8844cf26
  $wgo1 ::
    GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>m2,
     Inline: [0] -}
46ac3cafe6ed4a10d0838011af118e3a
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.ByteString.Lazy.Internal.ByteString
    -> MyNetwork.AMQP.Types.LongLongInt
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>m,
     Inline: [0] -}
d911b863dd4f44bd9498b91b47023fd1
  $wkillConnection ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> MyNetwork.AMQP.Types.CloseType
    -> GHC.Exception.SomeException
    -> GHC.Prim.ThreadId#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><L,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)))
                   (w :: MyNetwork.AMQP.Types.CloseType)
                   (w1 :: GHC.Exception.SomeException)
                   (ww1 :: GHC.Prim.ThreadId#)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w2 of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Base.Just
                                      @ (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)
                                      (w, GHC.Exception.$fShowSomeException_$cshow w1) #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      case GHC.Prim.killThread#
                             @ GHC.Exception.SomeException
                             ww1
                             w1
                             s2# of s1 { DEFAULT ->
                      (# s1, GHC.Tuple.() #) } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.takeMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     s1 of ds8 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.catch#
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     @ GHC.Exception.SomeException
                                     (GHC.Prim.unmaskAsyncExceptions#
                                        @ (GHC.Base.Maybe
                                             (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         (# s,
                                            GHC.Base.Just
                                              @ (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)
                                              (w, GHC.Exception.$fShowSomeException_$cshow w1) #)))
                                     (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                        (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case GHC.Prim.putMVar#
                                             @ GHC.Prim.RealWorld
                                             @ (GHC.Base.Maybe
                                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                             ww
                                             ipv3
                                             s2 of s2# { DEFAULT ->
                                      GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ (GHC.Base.Maybe
                                             (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                        e1
                                        s2# })
                                     ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     ipv5
                                     ipv4 of s2# { DEFAULT ->
                              (# s2#, GHC.Tuple.() #) } } })
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.killThread#
                             @ GHC.Exception.SomeException
                             ww1
                             w1
                             ipv2 of s1 { DEFAULT ->
                      (# s1, GHC.Tuple.() #) } }
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 (# s,
                                    GHC.Base.Just
                                      @ (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)
                                      (w, GHC.Exception.$fShowSomeException_$cshow w1) #)))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (GHC.Base.Maybe
                                          (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (GHC.Base.Maybe
                                  (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      case GHC.Prim.killThread#
                             @ GHC.Exception.SomeException
                             ww1
                             w1
                             s2# of s1 { DEFAULT ->
                      (# s1, GHC.Tuple.() #) } } } } } }) -}
d72547e60e45359f9bdf3a35781f458f
  $wlvl :: GHC.Prim.Word# -> MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
ba69dfe942c82d3d93b63687b4197e62
  $wlvl1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Types.IO MyNetwork.AMQP.Protocol.Frame
  {- Arity: 2, Strictness: <B,U><B,U>x, Inline: [0] -}
d6e821708d67b8bc040056c95945bdef
  $wopenConnection'' ::
    [(GHC.Base.String, Network.Socket.Types.PortNumber)]
    -> Data.Text.Internal.Text
    -> [MyNetwork.AMQP.Internal.SASLMechanism]
    -> GHC.Base.Maybe GHC.Word.Word32
    -> GHC.Base.Maybe GHC.Word.Word16
    -> GHC.Base.Maybe GHC.Word.Word16
    -> GHC.Base.Maybe MyNetwork.AMQP.Internal.TLSSettings
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Connection #)
  {- Arity: 9,
     Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,1*U><L,U><S,U>,
     Inline: [0] -}
08c950b5e2eb1ab061af3604ec59251c
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
dcee34eae44c4b917ed7ef2c97da2b17
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
a149153852a378fb555fd4d04e09351e
  $wreadAssembly ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      (Control.Concurrent.Chan.Stream
         MyNetwork.AMQP.Protocol.FramePayload)
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (Control.Concurrent.Chan.Stream
            MyNetwork.AMQP.Protocol.FramePayload)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Assembly #)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld
                            (Control.Concurrent.Chan.Stream
                               MyNetwork.AMQP.Protocol.FramePayload))
                   (ww1 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld
                             (Control.Concurrent.Chan.Stream
                                MyNetwork.AMQP.Protocol.FramePayload))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Control.Concurrent.Chan.$wreadChan
                        @ MyNetwork.AMQP.Protocol.FramePayload
                        ww
                        ww1
                        w of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   DEFAULT
                   -> case MyNetwork.AMQP.Internal.readAssembly2 wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                MyNetwork.AMQP.Internal.Assembly #)
                      of {}
                   MyNetwork.AMQP.Protocol.MethodPayload p
                   -> case p of wild1 {
                        DEFAULT -> (# ipv, MyNetwork.AMQP.Internal.SimpleMethod wild1 #)
                        MyNetwork.AMQP.Generated.Basic_return ds7 ds8 ds9 ds10
                        -> case MyNetwork.AMQP.Internal.$wcollectContent
                                  ww
                                  ww1
                                  ipv of ds11 { (#,#) ipv2 ipv3 ->
                           case ipv3 of wild2 { (,) props msg ->
                           (# ipv2,
                              MyNetwork.AMQP.Internal.ContentMethod wild1 props msg #) } }
                        MyNetwork.AMQP.Generated.Basic_deliver ds7 ds8 ds9 ds10 ds11
                        -> case MyNetwork.AMQP.Internal.$wcollectContent
                                  ww
                                  ww1
                                  ipv of ds12 { (#,#) ipv2 ipv3 ->
                           case ipv3 of wild2 { (,) props msg ->
                           (# ipv2,
                              MyNetwork.AMQP.Internal.ContentMethod wild1 props msg #) } }
                        MyNetwork.AMQP.Generated.Basic_get_ok ds7 ds8 ds9 ds10 ds11
                        -> case MyNetwork.AMQP.Internal.$wcollectContent
                                  ww
                                  ww1
                                  ipv of ds12 { (#,#) ipv2 ipv3 ->
                           case ipv3 of wild2 { (,) props msg ->
                           (# ipv2,
                              MyNetwork.AMQP.Internal.ContentMethod
                                wild1
                                props
                                msg #) } } } } }) -}
31245ffccdc96cc87c09b9c5dd36683c
  $wsplitLen ::
    Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Prim.Int# -> [Data.ByteString.Lazy.Internal.ByteString]
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
356bcdd6bc3a02e6e154159a33b4d3f3
  $wthrowMostRelevantAMQPException ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld
      (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x, Inline: [0] -}
0849d71e602d5e27ab68c91abebf097c
  $wupdateLastReceived ::
    GHC.Prim.MVar# GHC.Prim.RealWorld GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld GHC.Int.Int64)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.getMaskingState# w of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of ds7 {
                   DEFAULT
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Int.Int64
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Int.Int64
                             @ GHC.Exception.SomeException
                             MyNetwork.AMQP.Internal.updateLastReceived4
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Int.Int64
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Int.Int64
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Int.Int64
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Int.Int64
                                ww
                                s1 of ds8 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ GHC.Int.Int64
                                @ GHC.Exception.SomeException
                                MyNetwork.AMQP.Internal.updateLastReceived3
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ GHC.Int.Int64
                                        ww
                                        ipv3
                                        s2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ GHC.Int.Int64
                                   e1
                                   s2# })
                                ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Int.Int64
                                ww
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } })
                        ipv
                   1#
                   -> case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Int.Int64
                             ww
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ GHC.Int.Int64
                             @ GHC.Exception.SomeException
                             MyNetwork.AMQP.Internal.updateLastReceived2
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Int.Int64
                                     ww
                                     ipv3
                                     s1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Int.Int64
                                e1
                                s2# })
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Int.Int64
                             ww
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }) -}
f1a72d377484be6b6f0da66d500ec19e
  $wwaitForAllConfirms ::
    GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.TVar# GHC.Prim.RealWorld Data.IntSet.Internal.IntSet
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.TVar#
                            GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (ww1 :: GHC.Prim.TVar#
                             GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (ww2 :: GHC.Prim.TVar#
                             GHC.Prim.RealWorld Data.IntSet.Internal.IntSet)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readTVar#
                        @ GHC.Prim.RealWorld
                        @ Data.IntSet.Internal.IntSet
                        ww
                        w of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   DEFAULT
                   -> case GHC.Prim.retry# @ () ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                (Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet) #)
                      of {}
                   Data.IntSet.Internal.Nil
                   -> case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ Data.IntSet.Internal.IntSet
                             ww1
                             ipv of ds7 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ Data.IntSet.Internal.IntSet
                             ww1
                             Data.IntSet.Internal.Nil
                             ipv2 of s2# { DEFAULT ->
                      case GHC.Prim.readTVar#
                             @ GHC.Prim.RealWorld
                             @ Data.IntSet.Internal.IntSet
                             ww2
                             s2# of ds8 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.writeTVar#
                             @ GHC.Prim.RealWorld
                             @ Data.IntSet.Internal.IntSet
                             ww2
                             Data.IntSet.Internal.Nil
                             ipv4 of s2#1 { DEFAULT ->
                      (# s2#1, (ipv3, ipv5) #) } } } } } }) -}
dbcb4df755b42d89d60268becaa97f65
  $wwatchHeartbeats ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (letrec {
                              a' :: GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                {- Arity: 1, Strictness: <L,U> -}
                              = \ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case {__pkg_ccall base-4.11.1.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                                       GHC.Prim.realWorld# of wild { (#,#) ds6 ds7 ->
                                case ds7 of wild1 {
                                  DEFAULT
                                  -> case GHC.Event.Thread.threadDelay1
                                            (case w of wild2 { GHC.Types.I# x ->
                                             GHC.Types.I#
                                               (GHC.Prim.*# (GHC.Prim.*# x 1000#) 250#) })
                                            s1 of ds8 { (#,#) ipv2 ipv3 ->
                                     a' ipv2 }
                                  0#
                                  -> case w of wild2 { GHC.Types.I# x ->
                                     case GHC.Prim.delay#
                                            @ GHC.Prim.RealWorld
                                            (GHC.Prim.*# (GHC.Prim.*# x 1000#) 250#)
                                            s1 of s' { DEFAULT ->
                                     a' s' } } } }
                            } in
                            a')
                           GHC.Conc.Sync.forkIO2
                           eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        w1 of ds6 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Conc.Sync.ThreadId ipv1 #) }) -}
4d6ba4562d0f87a7d5c48db4aa74f7a6
  $wwriteAssembly' ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Word.Word16
    -> MyNetwork.AMQP.Helpers.Lock
    -> MyNetwork.AMQP.Internal.Assembly
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U(U),A,A),A,1*U(U),U(U),A,A,U(U),A,A,A,U(U),A)><L,1*U(U)><L,1*U(A,1*U(U))><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: MyNetwork.AMQP.Internal.Connection)
                   (ww1 :: GHC.Word.Word16)
                   (ww2 :: MyNetwork.AMQP.Helpers.Lock)
                   (w :: MyNetwork.AMQP.Internal.Assembly)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod m
                   -> case ww of ww3 { MyNetwork.AMQP.Internal.Connection ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                      case ww6 of ww16 { GHC.MVar.MVar ww17 ->
                      MyNetwork.AMQP.Internal.$wwriteFrames
                        ww4
                        ww17
                        ww10
                        ww14
                        ww1
                        (GHC.Types.:
                           @ MyNetwork.AMQP.Protocol.FramePayload
                           (MyNetwork.AMQP.Protocol.MethodPayload m)
                           (GHC.Types.[] @ MyNetwork.AMQP.Protocol.FramePayload))
                        w1 } }
                   MyNetwork.AMQP.Internal.ContentMethod m properties msg
                   -> case ww2 of wild1 { MyNetwork.AMQP.Helpers.Lock ds6 b ->
                      case b of wild2 { GHC.MVar.MVar mvar# ->
                      case GHC.Prim.readMVar#
                             @ GHC.Prim.RealWorld
                             @ ()
                             mvar#
                             w1 of ds7 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Internal.writeAssembly4
                                (MyNetwork.AMQP.Internal.$wgo1 0# msg))
                             GHC.Types.True
                             ipv of ds8 { (#,#) ipv2 ipv3 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString#
                                MyNetwork.AMQP.Internal.writeAssembly3
                                (case ww of wild3 { MyNetwork.AMQP.Internal.Connection ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                                 case ds12 of ww3 { GHC.Types.I# ww4 ->
                                 case GHC.Show.$wshowSignedInt
                                        0#
                                        ww4
                                        (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }))
                             GHC.Types.True
                             ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                      case ww of ww3 { MyNetwork.AMQP.Internal.Connection ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                      case ww6 of ww16 { GHC.MVar.MVar ww17 ->
                      MyNetwork.AMQP.Internal.$wwriteFrames
                        ww4
                        ww17
                        ww10
                        ww14
                        ww1
                        (GHC.Types.:
                           @ MyNetwork.AMQP.Protocol.FramePayload
                           (MyNetwork.AMQP.Protocol.MethodPayload m)
                           (GHC.Types.:
                              @ MyNetwork.AMQP.Protocol.FramePayload
                              (MyNetwork.AMQP.Protocol.ContentHeaderPayload
                                 (MyNetwork.AMQP.Generated.getClassIDOf properties)
                                 MyNetwork.AMQP.Internal.closeChannel6
                                 (MyNetwork.AMQP.Internal.$wgo3 0# msg)
                                 properties)
                              (let {
                                 exit :: GHC.Prim.Int# -> [MyNetwork.AMQP.Protocol.FramePayload]
                                   <join 1> {- Arity: 1, Strictness: <S,U> -}
                                 = \ (ww18 :: GHC.Prim.Int#)[OneShot] ->
                                   case GHC.Prim.># ww18 0# of lwild {
                                     DEFAULT -> GHC.Types.[] @ MyNetwork.AMQP.Protocol.FramePayload
                                     1#
                                     -> case ww7 of wild3 { GHC.Types.I# x# ->
                                        GHC.Base.map
                                          @ Data.ByteString.Lazy.Internal.ByteString
                                          @ MyNetwork.AMQP.Protocol.FramePayload
                                          MyNetwork.AMQP.Protocol.ContentBodyPayload
                                          (MyNetwork.AMQP.Internal.$wsplitLen
                                             msg
                                             (GHC.Prim.-# x# 8#)) } }
                               } in
                               letrec {
                                 $wgo2 :: GHC.Prim.Int#
                                          -> Data.ByteString.Lazy.Internal.ByteString
                                          -> [MyNetwork.AMQP.Protocol.FramePayload]
                                   <join 2> {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
                                 = \ (ww18 :: GHC.Prim.Int#)
                                     (w2 :: Data.ByteString.Lazy.Internal.ByteString) ->
                                   case w2 of wild3 {
                                     Data.ByteString.Lazy.Internal.Empty -> exit ww18
                                     Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs1
                                     -> $wgo2 (GHC.Prim.+# ww18 dt3) cs1 }
                               } in
                               $wgo2 0# msg)))
                        ipv4 } } } } } } } }) -}
e499b0929c3bf6149bbd278461ca879b
  $wwriteFrame ::
    MyNetwork2.Connection.Types.Connection
    -> MyNetwork.AMQP.Types.ChannelID
    -> MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(1*U(U),A,A)><L,U(U)><L,U><S,U>,
     Inline: [0] -}
cb868e4a99e2f93d023b38ee504dfb01
  $wwriteFrames ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld
         (Data.IntMap.Internal.IntMap
            (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId))
    -> GHC.MVar.MVar ()
    -> GHC.MVar.MVar GHC.Int.Int64
    -> GHC.Word.Word16
    -> [MyNetwork.AMQP.Protocol.FramePayload]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U(U(U),A,A)><S,U><L,U(U)><L,U(U)><L,1*U(U)><L,U><S,U>,
     Inline: [0] -}
947a2b46e8b1df068558c545a9d1a410
  data AckType = BasicAck | BasicNack
6b333bc34acb406998d522b90c43651a
  data Assembly
    = SimpleMethod MyNetwork.AMQP.Generated.MethodPayload
    | ContentMethod MyNetwork.AMQP.Generated.MethodPayload
                    MyNetwork.AMQP.Generated.ContentHeaderProperties
                    Data.ByteString.Lazy.Internal.ByteString
3a90d0615f17322f97fa5a05c488ef99
  data ChanThreadKilledException
    = ChanThreadKilledException {cause :: GHC.Exception.SomeException}
7d542ee1ef20270f61c1e8689122e18c
  data Channel
    = Channel {connection :: MyNetwork.AMQP.Internal.Connection,
               inQueue :: Control.Concurrent.Chan.Chan
                            MyNetwork.AMQP.Protocol.FramePayload,
               outstandingResponses :: GHC.MVar.MVar
                                         (Data.Sequence.Internal.Seq
                                            (GHC.MVar.MVar MyNetwork.AMQP.Internal.Assembly)),
               channelID :: GHC.Word.Word16,
               lastConsumerTag :: GHC.MVar.MVar GHC.Types.Int,
               nextPublishSeqNum :: GHC.MVar.MVar GHC.Types.Int,
               unconfirmedSet :: GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet,
               ackedSet :: GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet,
               nackedSet :: GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet,
               chanActive :: MyNetwork.AMQP.Helpers.Lock,
               chanClosed :: GHC.MVar.MVar
                               (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)),
               consumers :: GHC.MVar.MVar
                              (Data.Map.Internal.Map
                                 Data.Text.Internal.Text
                                 ((MyNetwork.AMQP.Internal.Message,
                                   MyNetwork.AMQP.Internal.Envelope)
                                  -> GHC.Types.IO (),
                                  MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ())),
               returnListeners :: GHC.MVar.MVar
                                    [(MyNetwork.AMQP.Internal.Message,
                                      MyNetwork.AMQP.Internal.PublishError)
                                     -> GHC.Types.IO ()],
               confirmListeners :: GHC.MVar.MVar
                                     [(GHC.Word.Word64, GHC.Types.Bool,
                                       MyNetwork.AMQP.Internal.AckType)
                                      -> GHC.Types.IO ()],
               chanExceptionHandlers :: GHC.MVar.MVar
                                          [GHC.Exception.SomeException -> GHC.Types.IO ()]}
7d542ee1ef20270f61c1e8689122e18c
  data Connection
    = Connection {connHandle :: MyNetwork2.Connection.Types.Connection,
                  connChanAllocator :: MyNetwork.AMQP.ChannelAllocator.ChannelAllocator,
                  connChannels :: GHC.MVar.MVar
                                    (Data.IntMap.Internal.IntMap
                                       (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId)),
                  connMaxFrameSize :: GHC.Types.Int,
                  connClosed :: GHC.MVar.MVar
                                  (GHC.Base.Maybe
                                     (MyNetwork.AMQP.Types.CloseType, GHC.Base.String)),
                  connClosedLock :: GHC.MVar.MVar (),
                  connWriteLock :: GHC.MVar.MVar (),
                  connClosedHandlers :: GHC.MVar.MVar [GHC.Types.IO ()],
                  connBlockedHandlers :: GHC.MVar.MVar
                                           [(Data.Text.Internal.Text -> GHC.Types.IO (),
                                             GHC.Types.IO ())],
                  connLastReceived :: GHC.MVar.MVar GHC.Int.Int64,
                  connLastSent :: GHC.MVar.MVar GHC.Int.Int64,
                  connServerProperties :: MyNetwork.AMQP.Types.FieldTable}
12baaf6b27b7fdceeb98fb2f41dc1af3
  data ConnectionOpts
    = ConnectionOpts {coServers :: ![(GHC.Base.String,
                                      Network.Socket.Types.PortNumber)],
                      coVHost :: !Data.Text.Internal.Text,
                      coAuth :: ![MyNetwork.AMQP.Internal.SASLMechanism],
                      coMaxFrameSize :: !(GHC.Base.Maybe GHC.Word.Word32),
                      coHeartbeatDelay :: !(GHC.Base.Maybe GHC.Word.Word16),
                      coMaxChannel :: !(GHC.Base.Maybe GHC.Word.Word16),
                      coTLSSettings :: GHC.Base.Maybe
                                         MyNetwork.AMQP.Internal.TLSSettings,
                      coName :: !(GHC.Base.Maybe Data.Text.Internal.Text)}
dbe7c5f34461c7b48b8bf4d91f1f4910
  data DeliveryMode = Persistent | NonPersistent
7d542ee1ef20270f61c1e8689122e18c
  data Envelope
    = Envelope {envDeliveryTag :: MyNetwork.AMQP.Types.LongLongInt,
                envRedelivered :: GHC.Types.Bool,
                envExchangeName :: Data.Text.Internal.Text,
                envRoutingKey :: Data.Text.Internal.Text,
                envChannel :: MyNetwork.AMQP.Internal.Channel}
526afa0333c4fb39d6fd1fa459b2940d
  data Message
    = Message {msgBody :: Data.ByteString.Lazy.Internal.ByteString,
               msgDeliveryMode :: GHC.Base.Maybe
                                    MyNetwork.AMQP.Internal.DeliveryMode,
               msgTimestamp :: GHC.Base.Maybe MyNetwork.AMQP.Types.Timestamp,
               msgID :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgType :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgUserID :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgApplicationID :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgClusterID :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgContentType :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgContentEncoding :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgReplyTo :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgPriority :: GHC.Base.Maybe MyNetwork.AMQP.Types.Octet,
               msgCorrelationID :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgExpiration :: GHC.Base.Maybe Data.Text.Internal.Text,
               msgHeaders :: GHC.Base.Maybe MyNetwork.AMQP.Types.FieldTable}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  data PublishError
    = PublishError {errReplyCode :: MyNetwork.AMQP.Internal.ReturnReplyCode,
                    errExchange :: GHC.Base.Maybe Data.Text.Internal.Text,
                    errRoutingKey :: Data.Text.Internal.Text}
f7bde183c07509c93d41e860d14c0460
  data ReturnReplyCode
    = Unroutable Data.Text.Internal.Text
    | NoConsumers Data.Text.Internal.Text
    | NotFound Data.Text.Internal.Text
ea50a7f6887dca2cbe54fe9a12b6bd34
  data SASLMechanism
    = SASLMechanism {saslName :: !Data.Text.Internal.Text,
                     saslInitialResponse :: !Data.ByteString.Internal.ByteString,
                     saslChallengeFunc :: !(GHC.Base.Maybe
                                              (Data.ByteString.Internal.ByteString
                                               -> GHC.Types.IO
                                                    Data.ByteString.Internal.ByteString))}
09164f3ec2dd9b975c6cb3a39557e784
  data TLSSettings
    = TLSTrusted
    | TLSUntrusted
    | TLSCustom MyNetwork2.Connection.Types.TLSSettings
7d542ee1ef20270f61c1e8689122e18c
  ackedSet ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds14 }) -}
26c99ca917d4c4d0e94c70b957066631
  addChannelExceptionHandler ::
    MyNetwork.AMQP.Internal.Channel
    -> (GHC.Exception.SomeException -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLS(S)),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.addChannelExceptionHandler1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <GHC.Exception.SomeException -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
eccd751aafa304441183d4399e96b029
  addChannelExceptionHandler1 ::
    MyNetwork.AMQP.Internal.Channel
    -> (GHC.Exception.SomeException -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLS(S)),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: GHC.Exception.SomeException -> GHC.Types.IO ())
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww15 of ww16 { GHC.MVar.MVar ww17 ->
                 MyNetwork.AMQP.Internal.$waddChannelExceptionHandler
                   ww17
                   w1
                   w2 } }) -}
bf427847b16ec848a2628d6118693c15
  addConnectionBlockedHandler ::
    MyNetwork.AMQP.Internal.Connection
    -> (Data.Text.Internal.Text -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS(S)LLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.addConnectionBlockedHandler1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R <Data.Text.Internal.Text -> GHC.Types.IO ()>_R
                 ->_R <GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4d3f3f1f8d75469a476b8b3765774638
  addConnectionBlockedHandler1 ::
    MyNetwork.AMQP.Internal.Connection
    -> (Data.Text.Internal.Text -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS(S)LLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A)><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: Data.Text.Internal.Text -> GHC.Types.IO ())
                   (w2 :: GHC.Types.IO ())
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww9 of ww13 { GHC.MVar.MVar ww14 ->
                 MyNetwork.AMQP.Internal.$waddConnectionBlockedHandler
                   ww14
                   w1
                   w2
                   w3 } }) -}
f24840a9bdf7076f43221416955b4b7b
  addConnectionClosedHandler ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.Bool -> GHC.Types.IO () -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLS(S)LLLLLLL),1*U(A,A,A,A,1*U(U),A,A,1*U(U),A,A,A,A)><L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.addConnectionClosedHandler1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5d4d16dc5d16f4592a2d67c4df371e69
  addConnectionClosedHandler1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLS(S)LLLLLLL),1*U(A,A,A,A,1*U(U),A,A,1*U(U),A,A,A,A)><L,1*U><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: GHC.Types.IO ())
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww5 of ww13 { GHC.MVar.MVar ww14 ->
                 MyNetwork.AMQP.Internal.$waddConnectionClosedHandler
                   ww14
                   ww8
                   w1
                   w2
                   w3 } }) -}
1d7a31106fec3a3650e9a5d3da677b65
  addReturnListener ::
    MyNetwork.AMQP.Internal.Channel
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.PublishError)
        -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLS(S)LL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.addReturnListener1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <(MyNetwork.AMQP.Internal.Message,
                        MyNetwork.AMQP.Internal.PublishError)
                       -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
93dc0901358ff29fd0092408b2dead1c
  addReturnListener1 ::
    MyNetwork.AMQP.Internal.Channel
    -> ((MyNetwork.AMQP.Internal.Message,
         MyNetwork.AMQP.Internal.PublishError)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLS(S)LL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: (MyNetwork.AMQP.Internal.Message,
                           MyNetwork.AMQP.Internal.PublishError)
                          -> GHC.Types.IO ())
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww13 of ww16 { GHC.MVar.MVar ww17 ->
                 MyNetwork.AMQP.Internal.$waddReturnListener ww17 w1 w2 } }) -}
3a90d0615f17322f97fa5a05c488ef99
  cause ::
    MyNetwork.AMQP.Internal.ChanThreadKilledException
    -> GHC.Exception.SomeException
  RecSel Left MyNetwork.AMQP.Internal.ChanThreadKilledException
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ChanThreadKilledException) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ChanThreadKilledException ds7 ->
                 ds7 }) -}
7d542ee1ef20270f61c1e8689122e18c
  chanActive ::
    MyNetwork.AMQP.Internal.Channel -> MyNetwork.AMQP.Helpers.Lock
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds16 }) -}
7d542ee1ef20270f61c1e8689122e18c
  chanClosed ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds17 }) -}
7d542ee1ef20270f61c1e8689122e18c
  chanExceptionHandlers ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar [GHC.Exception.SomeException -> GHC.Types.IO ()]
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds21 }) -}
7d542ee1ef20270f61c1e8689122e18c
  channelID :: MyNetwork.AMQP.Internal.Channel -> GHC.Word.Word16
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLL),1*U(A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds10 }) -}
d5b6ace0568a6f2755412f39f68f1997
  channelReceiver ::
    MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LS(SS)LLLLLLLLLLLLL),1*U(U(U,U(U,U(U,U,U)),U(U),U,U,U,U,U,U,U,U,U),U(U,U),U(U),U(U),U,U,U(U),U(U),U(U),U(U(U),U(U)),U(U),U(U),U(U),U(U),U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.channelReceiver1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8b59e40909c9364edbb55f639e970c39
  channelReceiver1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LS(SS)LLLLLLLLLLLLL),1*U(U(U,U(U,U(U,U,U)),U(U),U,U,U,U,U,U,U,U,U),U(U,U),U(U),U(U),U,U,U(U),U(U),U(U),U(U(U),U(U)),U(U),U(U),U(U),U(U),U)><S,U> -}
4190d77e7341452ce29bdb590d1938d1
  closeChannel :: MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.closeChannel1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
57d6d6766e74c56425518ec80fa16776
  closeChannel' ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.CloseType
    -> Data.Text.Internal.Text
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LLLLLLLLLLS(S)LLLL),1*U(U(A,U(A,U(U,U,U)),U(U),A,A,A,A,A,A,A,A,A),A,1*U(U),1*U(U),A,A,A,A,A,1*U(1*U(U),1*U(U)),1*U(U),A,A,A,A)><L,U><L,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.closeChannel'1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Types.CloseType>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
dff9e70d4219d59ef94da8068b3e2664
  closeChannel'1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Types.CloseType
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LLLLLLLLLLS(S)LLLL),1*U(U(A,U(A,U(U,U,U)),U(U),A,A,A,A,A,A,A,A,A),A,1*U(U),1*U(U),A,A,A,A,A,1*U(1*U(U),1*U(U)),1*U(U),A,A,A,A)><L,U><L,1*U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: MyNetwork.AMQP.Types.CloseType)
                   (w2 :: Data.Text.Internal.Text)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww11 of ww16 { GHC.MVar.MVar ww17 ->
                 MyNetwork.AMQP.Internal.$wcloseChannel'
                   ww1
                   ww3
                   ww4
                   ww10
                   ww17
                   w1
                   w2
                   w3 } }) -}
c444107c34138c4b2bcceb5b5736649f
  closeChannel1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,U(U),U(U),A,A,A,A,A,U(A,U(U)),U(U),A,A,A,A)><S,U>,
     Unfolding: (\ (c :: MyNetwork.AMQP.Internal.Channel)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.closeChannel7
                        c
                        MyNetwork.AMQP.Internal.closeChannel4
                        s of ds6 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   MyNetwork.AMQP.Internal.SimpleMethod ds7
                   -> case ds7 of wild1 {
                        DEFAULT -> MyNetwork.AMQP.Internal.$wfail ipv
                        MyNetwork.AMQP.Generated.Channel_close_ok
                        -> case GHC.Prim.getMaskingState# ipv of ds8 { (#,#) ipv2 ipv3 ->
                           let {
                             io2 :: Data.IntMap.Internal.IntMap
                                      (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId)
                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                               {- Arity: 2, Strictness: <S,1*U><S,U> -}
                             = \ (chans :: Data.IntMap.Internal.IntMap
                                             (MyNetwork.AMQP.Internal.Channel,
                                              GHC.Conc.Sync.ThreadId))[OneShot]
                                 (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case c of wild2 { MyNetwork.AMQP.Internal.Channel ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                               case ds12 of wild3 { GHC.Word.W16# x# ->
                               case Data.IntMap.Internal.$wlookup
                                      @ (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId)
                                      (GHC.Prim.word2Int# x#)
                                      chans of wild4 {
                                 GHC.Base.Nothing -> (# eta, GHC.Tuple.() #)
                                 GHC.Base.Just ds24
                                 -> case ds24 of wild5 { (,) ds25 thrID ->
                                    GHC.Conc.Sync.killThread1 thrID eta } } } }
                           } in
                           case ipv3 of ds9 {
                             DEFAULT
                             -> case c of wild2 { MyNetwork.AMQP.Internal.Channel ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                                case ds10 of wild3 { MyNetwork.AMQP.Internal.Connection ds25 ds26 ds27 ds28 ds29 ds30 ds31 ds32 ds33 ds34 ds35 ds36 ->
                                case ds27 of wild4 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.IntMap.Internal.IntMap
                                            (MyNetwork.AMQP.Internal.Channel,
                                             GHC.Conc.Sync.ThreadId))
                                       mvar#
                                       ipv2 of ds37 { (#,#) ipv4 ipv5 ->
                                case GHC.Prim.catch#
                                       @ ()
                                       @ GHC.Exception.SomeException
                                       (GHC.Prim.maskAsyncExceptions# @ () (io2 ipv5))
                                       (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                          (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ (Data.IntMap.Internal.IntMap
                                                    (MyNetwork.AMQP.Internal.Channel,
                                                     GHC.Conc.Sync.ThreadId))
                                               mvar#
                                               ipv5
                                               s1 of s2# { DEFAULT ->
                                        GHC.Prim.raiseIO#
                                          @ GHC.Exception.SomeException
                                          @ ()
                                          e1
                                          s2# })
                                       ipv4 of ds38 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.IntMap.Internal.IntMap
                                            (MyNetwork.AMQP.Internal.Channel,
                                             GHC.Conc.Sync.ThreadId))
                                       mvar#
                                       ipv5
                                       ipv6 of s2# { DEFAULT ->
                                (# s2#, ipv7 #) } } } } } }
                             0#
                             -> GHC.Prim.maskAsyncExceptions#
                                  @ ()
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case c of wild2 { MyNetwork.AMQP.Internal.Channel ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                                   case ds10 of wild3 { MyNetwork.AMQP.Internal.Connection ds25 ds26 ds27 ds28 ds29 ds30 ds31 ds32 ds33 ds34 ds35 ds36 ->
                                   case ds27 of wild4 { GHC.MVar.MVar mvar# ->
                                   case GHC.Prim.takeMVar#
                                          @ GHC.Prim.RealWorld
                                          @ (Data.IntMap.Internal.IntMap
                                               (MyNetwork.AMQP.Internal.Channel,
                                                GHC.Conc.Sync.ThreadId))
                                          mvar#
                                          s1 of ds37 { (#,#) ipv4 ipv5 ->
                                   case GHC.Prim.catch#
                                          @ ()
                                          @ GHC.Exception.SomeException
                                          (GHC.Prim.unmaskAsyncExceptions# @ () (io2 ipv5))
                                          (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                             (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.Prim.putMVar#
                                                  @ GHC.Prim.RealWorld
                                                  @ (Data.IntMap.Internal.IntMap
                                                       (MyNetwork.AMQP.Internal.Channel,
                                                        GHC.Conc.Sync.ThreadId))
                                                  mvar#
                                                  ipv5
                                                  s2 of s2# { DEFAULT ->
                                           GHC.Prim.raiseIO#
                                             @ GHC.Exception.SomeException
                                             @ ()
                                             e1
                                             s2# })
                                          ipv4 of ds38 { (#,#) ipv6 ipv7 ->
                                   case GHC.Prim.putMVar#
                                          @ GHC.Prim.RealWorld
                                          @ (Data.IntMap.Internal.IntMap
                                               (MyNetwork.AMQP.Internal.Channel,
                                                GHC.Conc.Sync.ThreadId))
                                          mvar#
                                          ipv5
                                          ipv6 of s2# { DEFAULT ->
                                   (# s2#, ipv7 #) } } } } } })
                                  ipv2
                             1#
                             -> case c of wild2 { MyNetwork.AMQP.Internal.Channel ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                                case ds10 of wild3 { MyNetwork.AMQP.Internal.Connection ds25 ds26 ds27 ds28 ds29 ds30 ds31 ds32 ds33 ds34 ds35 ds36 ->
                                case ds27 of wild4 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.IntMap.Internal.IntMap
                                            (MyNetwork.AMQP.Internal.Channel,
                                             GHC.Conc.Sync.ThreadId))
                                       mvar#
                                       ipv2 of ds37 { (#,#) ipv4 ipv5 ->
                                case GHC.Prim.catch#
                                       @ ()
                                       @ GHC.Exception.SomeException
                                       (GHC.Prim.maskUninterruptible# @ () (io2 ipv5))
                                       (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                          (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                        case GHC.Prim.putMVar#
                                               @ GHC.Prim.RealWorld
                                               @ (Data.IntMap.Internal.IntMap
                                                    (MyNetwork.AMQP.Internal.Channel,
                                                     GHC.Conc.Sync.ThreadId))
                                               mvar#
                                               ipv5
                                               s1 of s2# { DEFAULT ->
                                        GHC.Prim.raiseIO#
                                          @ GHC.Exception.SomeException
                                          @ ()
                                          e1
                                          s2# })
                                       ipv4 of ds38 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ (Data.IntMap.Internal.IntMap
                                            (MyNetwork.AMQP.Internal.Channel,
                                             GHC.Conc.Sync.ThreadId))
                                       mvar#
                                       ipv5
                                       ipv6 of s2# { DEFAULT ->
                                (# s2#, ipv7 #) } } } } } } } } }
                   MyNetwork.AMQP.Internal.ContentMethod ipv2 ipv3 ipv4
                   -> MyNetwork.AMQP.Internal.$wfail ipv } }) -}
b40a7d9f1e4054b40fc0fbcb6c4fc711
  closeChannel2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.closeChannel3) -}
05ce6b420713e16bb89e017cd99d09a4
  closeChannel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP/Internal.hs:763:5-33"#) -}
f9bf11a47e7be89fdb2e7405f46e44e5
  closeChannel4 :: MyNetwork.AMQP.Internal.Assembly
  {- Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Internal.SimpleMethod
                   MyNetwork.AMQP.Internal.closeChannel5) -}
13765371c53bbbf8508e0aded706a389
  closeChannel5 :: MyNetwork.AMQP.Generated.MethodPayload
  {- Strictness: m17,
     Unfolding: (MyNetwork.AMQP.Generated.Channel_close
                   MyNetwork.AMQP.Internal.closeChannel6
                   Data.Text.Internal.empty_
                     `cast`
                   (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                   MyNetwork.AMQP.Internal.closeChannel6
                   MyNetwork.AMQP.Internal.closeChannel6) -}
f68ae2696173422d2e0a5d2b55c6203d
  closeChannel6 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W16# 0##) -}
67388b393368be7d279fc0808f50de41
  closeChannel7 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Assembly #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,1*U(U),1*U(U),A,A,A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><L,1*U><S,U> -}
738d900c1a033d0f30f6f64287eeb107
  closeConnection ::
    MyNetwork.AMQP.Internal.Connection -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LLLLLS(S)LLLLLL),1*U(1*U(1*U(U),A,A),A,A,A,A,1*U(U),1*U(U),A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.closeConnection1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8bc5f26d8bd06d9b9037bf4f48e60219
  closeConnection1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LLLLLS(S)LLLLLL),1*U(1*U(1*U(U),A,A),A,A,A,A,1*U(U),1*U(U),A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww6 of ww13 { GHC.MVar.MVar ww14 ->
                 MyNetwork.AMQP.Internal.$wcloseConnection ww1 ww14 ww7 w1 } }) -}
10c3f9404eb1d8bbe284534982e65ca3
  closeConnection2 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e2
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case GHC.IO.Exception.$fExceptionIOException4 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () wild eta
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ () wild eta
                        1# -> (# eta, GHC.Tuple.() #) } } } } }) -}
f634f1d52b82fb1e493778dddc273fa7
  closeConnection3 :: MyNetwork.AMQP.Protocol.FramePayload
  {- Strictness: m1,
     Unfolding: (MyNetwork.AMQP.Protocol.MethodPayload
                   MyNetwork.AMQP.Internal.closeConnection4) -}
ccc2a8c91a360aacfaab6463fcba2bcf
  closeConnection4 :: MyNetwork.AMQP.Generated.MethodPayload
  {- Strictness: m9,
     Unfolding: (MyNetwork.AMQP.Generated.Connection_close
                   MyNetwork.AMQP.Internal.closeChannel6
                   Data.Text.Internal.empty_
                     `cast`
                   (Sym (MyNetwork.AMQP.Types.N:ShortString[0]))
                   MyNetwork.AMQP.Internal.closeChannel6
                   MyNetwork.AMQP.Internal.closeChannel6) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coAuth ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> [MyNetwork.AMQP.Internal.SASLMechanism]
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds9 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coHeartbeatDelay ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Base.Maybe GHC.Word.Word16
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds11 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coMaxChannel ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Base.Maybe GHC.Word.Word16
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds12 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coMaxFrameSize ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Base.Maybe GHC.Word.Word32
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds10 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coName ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds14 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coServers ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> [(GHC.Base.String, Network.Socket.Types.PortNumber)]
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds7 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coTLSSettings ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Base.Maybe MyNetwork.AMQP.Internal.TLSSettings
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds13 }) -}
12baaf6b27b7fdceeb98fb2f41dc1af3
  coVHost ::
    MyNetwork.AMQP.Internal.ConnectionOpts -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.ConnectionOpts
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.ConnectionOpts) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.ConnectionOpts ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                 ds8 }) -}
96efeded3b57ab6f8c1b7b53d8b5d6ca
  collectContent ::
    Control.Concurrent.Chan.Chan MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Types.IO
         (MyNetwork.AMQP.Generated.ContentHeaderProperties,
          Data.ByteString.Lazy.Internal.ByteString)
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.collectContent1
                  `cast`
                (<Control.Concurrent.Chan.Chan
                    MyNetwork.AMQP.Protocol.FramePayload>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(MyNetwork.AMQP.Generated.ContentHeaderProperties,
                                 Data.ByteString.Lazy.Internal.ByteString)>_R)) -}
dcbff62e1c054707d6c6e85b49772ecc
  collectContent1 ::
    Control.Concurrent.Chan.Chan MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (MyNetwork.AMQP.Generated.ContentHeaderProperties,
           Data.ByteString.Lazy.Internal.ByteString) #)
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Control.Concurrent.Chan.Chan
                           MyNetwork.AMQP.Protocol.FramePayload)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Control.Concurrent.Chan.Chan ww1 ww2 ->
                 MyNetwork.AMQP.Internal.$wcollectContent ww1 ww2 w1 }) -}
ba6a47c6e7f2b3f23b3addf332982533
  collectContent2 ::
    GHC.Types.IO [Data.ByteString.Lazy.Internal.ByteString]
  {- Unfolding: (GHC.Magic.noinline
                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                   @ [Data.ByteString.Lazy.Internal.ByteString]
                   MyNetwork.AMQP.Internal.collectContent3) -}
7741c1bb7e47a23ffbe35f7792d3ac98
  collectContent3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.collectContent4) -}
2d1fd199aaa98792e4fd0cac6fce7d69
  collectContent4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP/Internal.hs:132:9-36"#) -}
c4ca2b9e68237dda111dc47ca5e06003
  collectContent5 ::
    GHC.Types.IO
      (MyNetwork.AMQP.Generated.ContentHeaderProperties,
       Data.ByteString.Lazy.Internal.ByteString)
  {- Unfolding: (GHC.Magic.noinline
                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                   @ (MyNetwork.AMQP.Generated.ContentHeaderProperties,
                      Data.ByteString.Lazy.Internal.ByteString)
                   MyNetwork.AMQP.Internal.collectContent6) -}
8da9baf1877310f6518eba8a753771af
  collectContent6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.collectContent7) -}
91c0f89301cac0a8090c3d00e2ca5a9d
  collectContent7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/MyNetwork/AMQP/Internal.hs:125:5-45"#) -}
7d542ee1ef20270f61c1e8689122e18c
  confirmListeners ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar
         [(GHC.Word.Word64, GHC.Types.Bool, MyNetwork.AMQP.Internal.AckType)
          -> GHC.Types.IO ()]
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds20 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connBlockedHandlers ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar
         [(Data.Text.Internal.Text -> GHC.Types.IO (), GHC.Types.IO ())]
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds15 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connChanAllocator ::
    MyNetwork.AMQP.Internal.Connection
    -> MyNetwork.AMQP.ChannelAllocator.ChannelAllocator
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLL),1*U(A,1*U(U,U),A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds8 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connChannels ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar
         (Data.IntMap.Internal.IntMap
            (MyNetwork.AMQP.Internal.Channel, GHC.Conc.Sync.ThreadId))
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds9 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connClosed ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar
         (GHC.Base.Maybe (MyNetwork.AMQP.Types.CloseType, GHC.Base.String))
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds11 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connClosedHandlers ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.MVar.MVar [GHC.Types.IO ()]
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds14 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connClosedLock ::
    MyNetwork.AMQP.Internal.Connection -> GHC.MVar.MVar ()
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds12 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connHandle ::
    MyNetwork.AMQP.Internal.Connection
    -> MyNetwork2.Connection.Types.Connection
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds7 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connLastReceived ::
    MyNetwork.AMQP.Internal.Connection -> GHC.MVar.MVar GHC.Int.Int64
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds16 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connLastSent ::
    MyNetwork.AMQP.Internal.Connection -> GHC.MVar.MVar GHC.Int.Int64
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds17 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connMaxFrameSize ::
    MyNetwork.AMQP.Internal.Connection -> GHC.Types.Int
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLL),1*U(A,A,A,1*U(U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds10 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connServerProperties ::
    MyNetwork.AMQP.Internal.Connection
    -> MyNetwork.AMQP.Types.FieldTable
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds18 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connWriteLock ::
    MyNetwork.AMQP.Internal.Connection -> GHC.MVar.MVar ()
  RecSel Left MyNetwork.AMQP.Internal.Connection
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Connection) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Connection ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds13 }) -}
7d542ee1ef20270f61c1e8689122e18c
  connection ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Connection
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U(U,U,U,U,U,U,U,U,U,U,U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds7 }) -}
32984ba93ffc905518dda7587d531805
  connectionGetExact ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Types.Int
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
  {- Arity: 3,
     Strictness: <L,U(U(U),U(U),U(U,U(U)))><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.connectionGetExact1
                  `cast`
                (<MyNetwork2.Connection.Types.Connection>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.ByteString.Internal.ByteString>_R)) -}
32675710500933d233a176f5e34b5d70
  connectionGetExact1 ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 3,
     Strictness: <L,U(U(U),U(U),U(U,U(U)))><S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork2.Connection.Types.Connection)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 MyNetwork.AMQP.Internal.$wconnectionGetExact w ww1 w2 }) -}
225a1aa7233ae62a15b4dfcc5a897eea
  connectionReceiver ::
    MyNetwork.AMQP.Internal.Connection -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <B,1*U(1*U(1*U(U),1*U(U),1*U(U,1*U(U))),A,1*U(U),A,1*U(U),A,A,A,1*U(U),1*U(U),A,A)><B,U>b,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.connectionReceiver1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8513f50e5aed382177268e0b5e239cf6
  connectionReceiver1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <B,1*U(1*U(1*U(U),1*U(U),1*U(U,1*U(U))),A,1*U(U),A,1*U(U),A,A,A,1*U(U),1*U(U),A,A)><B,U>b,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww1 of ww13 { MyNetwork2.Connection.Types.Connection ww14 ww15 ww16 ->
                 case ww14 of ww17 { GHC.MVar.MVar ww18 ->
                 case ww15 of ww19 { GHC.MVar.MVar ww20 ->
                 case ww16 of ww21 { (,) ww22 ww23 ->
                 case ww23
                        `cast`
                      (Network.Socket.Types.N:PortNumber[0]) of ww24 { GHC.Word.W16# ww25 ->
                 case ww3 of ww26 { GHC.MVar.MVar ww27 ->
                 case ww5 of ww28 { GHC.MVar.MVar ww29 ->
                 case ww9 of ww30 { GHC.MVar.MVar ww31 ->
                 case ww10 of ww32 { GHC.MVar.MVar ww33 ->
                 MyNetwork.AMQP.Internal.$wconnectionReceiver
                   ww18
                   ww20
                   ww22
                   ww25
                   ww27
                   ww29
                   ww31
                   ww33
                   w1 } } } } } } } } } }) -}
da25990729aed88513d2e83d599681e3
  connectionTLSSettings ::
    MyNetwork.AMQP.Internal.TLSSettings
    -> GHC.Base.Maybe MyNetwork2.Connection.Types.TLSSettings
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (tlsSettings :: MyNetwork.AMQP.Internal.TLSSettings) ->
                 GHC.Base.Just
                   @ MyNetwork2.Connection.Types.TLSSettings
                   (case tlsSettings of wild {
                      MyNetwork.AMQP.Internal.TLSTrusted
                      -> MyNetwork.AMQP.Internal.connectionTLSSettings2
                      MyNetwork.AMQP.Internal.TLSUntrusted
                      -> MyNetwork.AMQP.Internal.connectionTLSSettings1
                      MyNetwork.AMQP.Internal.TLSCustom x -> x })) -}
d84f8bce627be78b327d51ee59b080dd
  connectionTLSSettings1 :: MyNetwork2.Connection.Types.TLSSettings
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork2.Connection.Types.TLSSettingsSimple
                   GHC.Types.True
                   GHC.Types.False
                   GHC.Types.False) -}
4aefd0f445e7a56825db957cd1d69d28
  connectionTLSSettings2 :: MyNetwork2.Connection.Types.TLSSettings
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MyNetwork2.Connection.Types.TLSSettingsSimple
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False) -}
7d542ee1ef20270f61c1e8689122e18c
  consumers ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar
         (Data.Map.Internal.Map
            Data.Text.Internal.Text
            ((MyNetwork.AMQP.Internal.Message,
              MyNetwork.AMQP.Internal.Envelope)
             -> GHC.Types.IO (),
             MyNetwork.AMQP.Types.ConsumerTag -> GHC.Types.IO ()))
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds18 }) -}
40a3b1a9966e88b15ad37f1d3da63c69
  deliveryModeToInt ::
    MyNetwork.AMQP.Internal.DeliveryMode -> MyNetwork.AMQP.Types.Octet
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.DeliveryMode) ->
                 case ds6 of wild {
                   MyNetwork.AMQP.Internal.Persistent
                   -> MyNetwork.AMQP.Internal.deliveryModeToInt2
                   MyNetwork.AMQP.Internal.NonPersistent
                   -> MyNetwork.AMQP.Internal.deliveryModeToInt1 }) -}
fb51c2bffe6bee31d14f803783764d36
  deliveryModeToInt1 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 1##) -}
4b278e52ef5bafddfcca5c6a4dd6ca92
  deliveryModeToInt2 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 2##) -}
7d542ee1ef20270f61c1e8689122e18c
  envChannel ::
    MyNetwork.AMQP.Internal.Envelope -> MyNetwork.AMQP.Internal.Channel
  RecSel Left MyNetwork.AMQP.Internal.Envelope
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Envelope) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Envelope ds7 ds8 ds9 ds10 ds11 ->
                 ds11 }) -}
7d542ee1ef20270f61c1e8689122e18c
  envDeliveryTag ::
    MyNetwork.AMQP.Internal.Envelope
    -> MyNetwork.AMQP.Types.LongLongInt
  RecSel Left MyNetwork.AMQP.Internal.Envelope
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Envelope) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Envelope ds7 ds8 ds9 ds10 ds11 ->
                 ds7 }) -}
7d542ee1ef20270f61c1e8689122e18c
  envExchangeName ::
    MyNetwork.AMQP.Internal.Envelope -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Envelope
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Envelope) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Envelope ds7 ds8 ds9 ds10 ds11 ->
                 ds9 }) -}
7d542ee1ef20270f61c1e8689122e18c
  envRedelivered ::
    MyNetwork.AMQP.Internal.Envelope -> GHC.Types.Bool
  RecSel Left MyNetwork.AMQP.Internal.Envelope
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Envelope) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Envelope ds7 ds8 ds9 ds10 ds11 ->
                 ds8 }) -}
7d542ee1ef20270f61c1e8689122e18c
  envRoutingKey ::
    MyNetwork.AMQP.Internal.Envelope -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Envelope
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Envelope) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Envelope ds7 ds8 ds9 ds10 ds11 ->
                 ds10 }) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  errExchange ::
    MyNetwork.AMQP.Internal.PublishError
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.PublishError
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.PublishError) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.PublishError ds7 ds8 ds9 ->
                 ds8 }) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  errReplyCode ::
    MyNetwork.AMQP.Internal.PublishError
    -> MyNetwork.AMQP.Internal.ReturnReplyCode
  RecSel Left MyNetwork.AMQP.Internal.PublishError
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.PublishError) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.PublishError ds7 ds8 ds9 ->
                 ds7 }) -}
ede5ac3eb2f1fe804d63f0d00f2c19c6
  errRoutingKey ::
    MyNetwork.AMQP.Internal.PublishError -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.PublishError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.PublishError) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.PublishError ds7 ds8 ds9 ->
                 ds9 }) -}
85a61530a5888feeb7622bba440bf3e7
  getServerProperties ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.IO MyNetwork.AMQP.Types.FieldTable
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.getServerProperties1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Types.FieldTable>_R)) -}
4a40de1cf2d8ba5aabb03aaa59f7a54c
  getServerProperties1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Types.FieldTable #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MyNetwork.AMQP.Internal.Connection)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    case x of wild { MyNetwork.AMQP.Internal.Connection ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                    ds17 } #)) -}
7d542ee1ef20270f61c1e8689122e18c
  inQueue ::
    MyNetwork.AMQP.Internal.Channel
    -> Control.Concurrent.Chan.Chan
         MyNetwork.AMQP.Protocol.FramePayload
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLL),1*U(A,1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds8 }) -}
2a16f9fbd22e22ff8c4f158cb591d767
  intToDeliveryMode ::
    MyNetwork.AMQP.Types.Octet -> MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Types.Octet) ->
                 case ds6 of wild { GHC.Word.W8# x ->
                 case x of wild1 {
                   DEFAULT -> MyNetwork.AMQP.Internal.intToDeliveryMode1 wild
                   1## -> MyNetwork.AMQP.Internal.NonPersistent
                   2## -> MyNetwork.AMQP.Internal.Persistent } }) -}
4488d08a25ccd474f6bee2adf6a765a7
  intToDeliveryMode1 ::
    MyNetwork.AMQP.Types.Octet -> MyNetwork.AMQP.Internal.DeliveryMode
  {- Arity: 1, Strictness: <B,1*U(U)>x, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MyNetwork.AMQP.Types.Octet) ->
                 case w of ww { GHC.Word.W8# ww1 ->
                 MyNetwork.AMQP.Internal.$wlvl ww1 }) -}
7443655a9ce2c65a6fb35fde80ca5dc6
  killConnection ::
    MyNetwork.AMQP.Internal.Connection
    -> MyNetwork.AMQP.Types.CloseType
    -> GHC.Exception.SomeException
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Types.IO ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLLS(S)LLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A)><L,U><L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.killConnection1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R <MyNetwork.AMQP.Types.CloseType>_R
                 ->_R <GHC.Exception.SomeException>_R
                 ->_R <GHC.Conc.Sync.ThreadId>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ef69c25b766e6b6b01107f0e39834906
  killConnection1 ::
    MyNetwork.AMQP.Internal.Connection
    -> MyNetwork.AMQP.Types.CloseType
    -> GHC.Exception.SomeException
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLLS(S)LLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A)><L,U><L,U><S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: MyNetwork.AMQP.Types.CloseType)
                   (w2 :: GHC.Exception.SomeException)
                   (w3 :: GHC.Conc.Sync.ThreadId)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww5 of ww13 { GHC.MVar.MVar ww14 ->
                 case w3 of ww15 { GHC.Conc.Sync.ThreadId ww16 ->
                 MyNetwork.AMQP.Internal.$wkillConnection
                   ww14
                   w1
                   w2
                   ww16
                   w4 } } }) -}
7d542ee1ef20270f61c1e8689122e18c
  lastConsumerTag ::
    MyNetwork.AMQP.Internal.Channel -> GHC.MVar.MVar GHC.Types.Int
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds11 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgApplicationID ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds13 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgBody ::
    MyNetwork.AMQP.Internal.Message
    -> Data.ByteString.Lazy.Internal.ByteString
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds7 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgClusterID ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds14 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgContentEncoding ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds16 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgContentType ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds15 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgCorrelationID ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds19 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgDeliveryMode ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe MyNetwork.AMQP.Internal.DeliveryMode
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds8 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgExpiration ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds20 }) -}
b213da13c14fa7e25484c7ebf94a784b
  msgFromContentHeaderProperties ::
    MyNetwork.AMQP.Generated.ContentHeaderProperties
    -> Data.ByteString.Lazy.Internal.ByteString
    -> MyNetwork.AMQP.Internal.Message
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ds6 :: MyNetwork.AMQP.Generated.ContentHeaderProperties)
                   (body :: Data.ByteString.Lazy.Internal.ByteString) ->
                 case ds6 of wild {
                   DEFAULT
                   -> MyNetwork.AMQP.Internal.msgFromContentHeaderProperties1 wild
                   MyNetwork.AMQP.Generated.CHBasic content_type content_encoding headers delivery_mode priority correlation_id reply_to expiration message_id timestamp message_type user_id application_id cluster_id
                   -> MyNetwork.AMQP.Internal.Message
                        body
                        (case delivery_mode of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.Nothing @ MyNetwork.AMQP.Internal.DeliveryMode
                           GHC.Base.Just a1
                           -> GHC.Base.Just
                                @ MyNetwork.AMQP.Internal.DeliveryMode
                                (MyNetwork.AMQP.Internal.intToDeliveryMode a1) })
                        timestamp
                        (case message_id of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case message_type of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case user_id of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case application_id of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case cluster_id of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case content_type of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case content_encoding of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case reply_to of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        priority
                        (case correlation_id of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        (case expiration of wild1 {
                           GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Text.Internal.Text
                           GHC.Base.Just ds7
                           -> GHC.Base.Just
                                @ Data.Text.Internal.Text
                                ds7 `cast` (MyNetwork.AMQP.Types.N:ShortString[0]) })
                        headers }) -}
62d22a766b07edca7c54e103cd11f0e6
  msgFromContentHeaderProperties1 ::
    MyNetwork.AMQP.Generated.ContentHeaderProperties
    -> MyNetwork.AMQP.Internal.Message
  {- Arity: 1, Strictness: <B,1*U>x -}
526afa0333c4fb39d6fd1fa459b2940d
  msgHeaders ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe MyNetwork.AMQP.Types.FieldTable
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds21 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgID ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds10 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgPriority ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe MyNetwork.AMQP.Types.Octet
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds18 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgReplyTo ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds17 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgTimestamp ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe MyNetwork.AMQP.Types.Timestamp
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds9 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgType ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds11 }) -}
526afa0333c4fb39d6fd1fa459b2940d
  msgUserID ::
    MyNetwork.AMQP.Internal.Message
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Message) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Message ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds12 }) -}
7d542ee1ef20270f61c1e8689122e18c
  nackedSet ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds15 }) -}
7d542ee1ef20270f61c1e8689122e18c
  nextPublishSeqNum ::
    MyNetwork.AMQP.Internal.Channel -> GHC.MVar.MVar GHC.Types.Int
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds12 }) -}
380b7fae40b21f566be5183e66a528f8
  openChannel ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Channel
  {- Arity: 2,
     Strictness: <S(LLS(S)LLLLLLLLL),U(U,U(U(U),U(U,U,U)),U(U),U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.openChannel1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Channel>_R)) -}
b3d7adc2925f4b9693241a1b86ed5ce9
  openChannel1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Channel #)
  {- Arity: 2,
     Strictness: <S(LLS(S)LLLLLLLLL),U(U,U(U(U),U(U,U,U)),U(U),U,U,U,U,U,U,U,U,U)><S,U> -}
32f8d1d8dc43429e17cf7589ee39c6ac
  openConnection'' ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Connection
  {- Arity: 2, Strictness: <S(SSSSSSLS),1*U(U,U,U,U,U,U,1*U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.openConnection''1
                  `cast`
                (<MyNetwork.AMQP.Internal.ConnectionOpts>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Connection>_R)) -}
2b8fc7168be1a372d146fa8c14629850
  openConnection''1 ::
    MyNetwork.AMQP.Internal.ConnectionOpts
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Connection #)
  {- Arity: 2, Strictness: <S(SSSSSSLS),1*U(U,U,U,U,U,U,1*U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.ConnectionOpts)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.ConnectionOpts ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 MyNetwork.AMQP.Internal.$wopenConnection''
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   w1 }) -}
7d542ee1ef20270f61c1e8689122e18c
  outstandingResponses ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar
         (Data.Sequence.Internal.Seq
            (GHC.MVar.MVar MyNetwork.AMQP.Internal.Assembly))
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds9 }) -}
bcdb76a6e966b16ba145a8236ce4f73e
  readAssembly ::
    Control.Concurrent.Chan.Chan MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Assembly
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.readAssembly1
                  `cast`
                (<Control.Concurrent.Chan.Chan
                    MyNetwork.AMQP.Protocol.FramePayload>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Assembly>_R)) -}
6fbcc7fe00654f785d451bae8ebb3104
  readAssembly1 ::
    Control.Concurrent.Chan.Chan MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Internal.Assembly #)
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Control.Concurrent.Chan.Chan
                           MyNetwork.AMQP.Protocol.FramePayload)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Control.Concurrent.Chan.Chan ww1 ww2 ->
                 MyNetwork.AMQP.Internal.$wreadAssembly ww1 ww2 w1 }) -}
e5d920b039c4b2c55d4ba6bf70e62c25
  readAssembly2 ::
    MyNetwork.AMQP.Protocol.FramePayload
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Assembly
  {- Arity: 1, Strictness: <B,1*U>x -}
9d05243f46aae825a4a495a9131715c8
  readFrame ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Types.IO MyNetwork.AMQP.Protocol.Frame
  {- Arity: 2, Strictness: <L,U(U(U),U(U),U(U,U(U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.readFrame1
                  `cast`
                (<MyNetwork2.Connection.Types.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <MyNetwork.AMQP.Protocol.Frame>_R)) -}
c36569aed92dc853fde47cf69ff64ab0
  readFrame1 ::
    MyNetwork2.Connection.Types.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          MyNetwork.AMQP.Protocol.Frame #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U),U(U,U(U)))><S,U>,
     Unfolding: (\ (handle :: MyNetwork2.Connection.Types.Connection)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case MyNetwork.AMQP.Internal.$wconnectionGetExact
                        handle
                        7#
                        s of ds6 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.fromChunks_go
                        (GHC.Types.:
                           @ Data.ByteString.Internal.ByteString
                           ipv1
                           (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ ()
                             MyNetwork.AMQP.Internal.readFrame4
                             ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                MyNetwork.AMQP.Protocol.Frame #)
                      of {}
                   Data.ByteString.Lazy.Internal.Chunk ipv2 ipv3 ipv4 ipv5 ipv6
                   -> case Data.Binary.Get.runGet3
                             @ MyNetwork.AMQP.Types.PayloadSize
                             MyNetwork.AMQP.Protocol.peekFrameSize1
                             wild of wild1 { GHC.Word.W32# x# ->
                      let {
                        len :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                      } in
                      case MyNetwork.AMQP.Internal.$wconnectionGetExact
                             handle
                             (GHC.Prim.+# len 1#)
                             ipv of ds7 { (#,#) ipv7 ipv8 ->
                      case Data.ByteString.Lazy.fromChunks_go
                             (GHC.Types.:
                                @ Data.ByteString.Internal.ByteString
                                ipv8
                                (GHC.Types.[] @ Data.ByteString.Internal.ByteString)) of wild2 {
                        Data.ByteString.Lazy.Internal.Empty
                        -> case GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ ()
                                  MyNetwork.AMQP.Internal.readFrame4
                                  ipv7
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     MyNetwork.AMQP.Protocol.Frame #)
                           of {}
                        Data.ByteString.Lazy.Internal.Chunk ipv9 ipv10 ipv11 ipv12 ipv13
                        -> case Data.Binary.Get.runGetOrFail1
                                  @ MyNetwork.AMQP.Protocol.Frame
                                  MyNetwork.AMQP.Internal.readFrame3
                                  (letrec {
                                     go2 :: Data.ByteString.Lazy.Internal.ByteString
                                            -> Data.ByteString.Lazy.Internal.ByteString
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds8 :: Data.ByteString.Lazy.Internal.ByteString) ->
                                       case ds8 of wild3 {
                                         Data.ByteString.Lazy.Internal.Empty -> wild2
                                         Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs
                                         -> Data.ByteString.Lazy.Internal.Chunk
                                              dt
                                              dt1
                                              dt2
                                              dt3
                                              (go2 cs) }
                                   } in
                                   go2 wild) of wild3 {
                             Data.Either.Left ds8
                             -> case ds8 of wild4 { (,,) ds9 ds10 errMsg ->
                                case MyNetwork.AMQP.Internal.readFrame2 errMsg
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          MyNetwork.AMQP.Protocol.Frame #)
                                of {} }
                             Data.Either.Right ds8
                             -> case ds8 of wild4 { (,,) ds9 consumedBytes ds10 ->
                                case consumedBytes of wild5 { GHC.Int.I64# x ->
                                case GHC.Prim./=# x (GHC.Prim.+# len 8#) of lwild {
                                  DEFAULT -> (# ipv7, ds10 #)
                                  1#
                                  -> case MyNetwork.AMQP.Internal.$wlvl1 x len
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               MyNetwork.AMQP.Protocol.Frame #)
                                     of {} } } } } } } } } }) -}
5ecb2d2f6209ffcd88b09c4afae5e20d
  readFrame2 ::
    GHC.Base.String -> GHC.Types.IO MyNetwork.AMQP.Protocol.Frame
  {- Arity: 1, Strictness: <B,U>x -}
610bddb7e1c6715736e1f51895307606
  readFrame3 :: Data.Binary.Get.Decoder MyNetwork.AMQP.Protocol.Frame
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ MyNetwork.AMQP.Protocol.Frame
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ MyNetwork.AMQP.Protocol.Frame
                      (MyNetwork.AMQP.Protocol.$w$cget
                         @ MyNetwork.AMQP.Protocol.Frame
                         __NULL
                         Data.ByteString.Internal.$fMonoidByteString1
                         0#
                         0#
                         (Data.Binary.Get.Internal.$WDone @ MyNetwork.AMQP.Protocol.Frame)))
                   0#) -}
7c10b9091ced427c757da7937f6f8ac1
  readFrame4 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   MyNetwork.AMQP.Internal.readFrame5) -}
be9b170c3b5b15ede42ceea6fdfb6c4d
  readFrame5 :: GHC.IO.Exception.IOException
  {- Strictness: m,
     Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   MyNetwork.AMQP.Internal.readFrame6
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
8bc86851bb00759fe2babc09188d897e
  readFrame6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MyNetwork.AMQP.Internal.readFrame7) -}
04eaf22b44f5ed05deaca9c9e73d9799
  readFrame7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("connection not open"#) -}
8c77295ce8baea0fd58e4b6689f2d626
  request ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly
    -> GHC.Types.IO MyNetwork.AMQP.Internal.Assembly
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,1*U(U),1*U(U),A,A,A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.closeChannel7
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Internal.Assembly>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <MyNetwork.AMQP.Internal.Assembly>_R)) -}
7d542ee1ef20270f61c1e8689122e18c
  returnListeners ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.MVar.MVar
         [(MyNetwork.AMQP.Internal.Message,
           MyNetwork.AMQP.Internal.PublishError)
          -> GHC.Types.IO ()]
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds19 }) -}
ea50a7f6887dca2cbe54fe9a12b6bd34
  saslChallengeFunc ::
    MyNetwork.AMQP.Internal.SASLMechanism
    -> GHC.Base.Maybe
         (Data.ByteString.Internal.ByteString
          -> GHC.Types.IO Data.ByteString.Internal.ByteString)
  RecSel Left MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.SASLMechanism) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.SASLMechanism ds7 ds8 ds9 ->
                 ds9 }) -}
ea50a7f6887dca2cbe54fe9a12b6bd34
  saslInitialResponse ::
    MyNetwork.AMQP.Internal.SASLMechanism
    -> Data.ByteString.Internal.ByteString
  RecSel Left MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.SASLMechanism) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.SASLMechanism ds7 ds8 ds9 ->
                 ds8 }) -}
ea50a7f6887dca2cbe54fe9a12b6bd34
  saslName ::
    MyNetwork.AMQP.Internal.SASLMechanism -> Data.Text.Internal.Text
  RecSel Left MyNetwork.AMQP.Internal.SASLMechanism
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.SASLMechanism) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.SASLMechanism ds7 ds8 ds9 ->
                 ds7 }) -}
27d311f6538bc1ba8c5c041de61b0ab5
  throwMostRelevantAMQPException ::
    MyNetwork.AMQP.Internal.Channel -> GHC.Types.IO a
  {- Arity: 2,
     Strictness: <B,1*U(1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)><B,U>x,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.throwMostRelevantAMQPException1
                  `cast`
                (forall (a :: <*>_N).
                 <MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
dc98b77a1d78c37f24a45a551bf7c710
  throwMostRelevantAMQPException1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2,
     Strictness: <B,1*U(1*U(A,A,A,A,1*U(U),A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)><B,U>x,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww1 of ww16 { MyNetwork.AMQP.Internal.Connection ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ->
                 case ww21 of ww29 { GHC.MVar.MVar ww30 ->
                 case ww11 of ww31 { GHC.MVar.MVar ww32 ->
                 MyNetwork.AMQP.Internal.$wthrowMostRelevantAMQPException
                   @ a
                   ww30
                   ww32
                   w1 } } } }) -}
7d542ee1ef20270f61c1e8689122e18c
  unconfirmedSet ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Conc.Sync.TVar Data.IntSet.Internal.IntSet
  RecSel Left MyNetwork.AMQP.Internal.Channel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: MyNetwork.AMQP.Internal.Channel) ->
                 case ds6 of wild { MyNetwork.AMQP.Internal.Channel ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds13 }) -}
da927f2e74e9f06a1cd6efa04761ff82
  unwrapChanThreadKilledException ::
    GHC.Exception.SomeException -> GHC.Exception.SomeException
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (e :: GHC.Exception.SomeException) ->
                 case e of wild { GHC.Exception.SomeException e1 $dException1 e2 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e1
                        (GHC.Exception.$p1Exception @ e1 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException6 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> wild
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> wild
                        1#
                        -> case e2
                                  `cast`
                                (UnsafeCo representational e1 MyNetwork.AMQP.Internal.ChanThreadKilledException) of wild4 { MyNetwork.AMQP.Internal.ChanThreadKilledException ds6 ->
                           ds6 } } } } } }) -}
3c7336b51a61eb7fc7b61909b1eced9c
  updateLastReceived ::
    MyNetwork.AMQP.Internal.Connection -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLS(S)LL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.updateLastReceived1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a04742de093f3c99f2abbfc98624f7e8
  updateLastReceived1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLS(S)LL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww10 of ww13 { GHC.MVar.MVar ww14 ->
                 MyNetwork.AMQP.Internal.$wupdateLastReceived ww14 w1 } }) -}
493689c002ed65000f11bf3812a6625f
  updateLastReceived2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Prim.maskUninterruptible#
                   @ GHC.Int.Int64
                   MyNetwork.AMQP.Helpers.getTimestamp1) -}
31e5d2ce63470cbbbca66d131da766df
  updateLastReceived3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Prim.unmaskAsyncExceptions#
                   @ GHC.Int.Int64
                   MyNetwork.AMQP.Helpers.getTimestamp1) -}
e5382b39c9fe9aa4baebcc0949a69d44
  updateLastReceived4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Prim.maskAsyncExceptions#
                   @ GHC.Int.Int64
                   MyNetwork.AMQP.Helpers.getTimestamp1) -}
ab64e49435bca75591a7879e19960bc7
  updateLastSent ::
    MyNetwork.AMQP.Internal.Connection -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLS(S)L),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.updateLastSent1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
90fc349a61d108c25da92c595a125fe2
  updateLastSent1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLS(S)L),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Connection ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww11 of ww13 { GHC.MVar.MVar ww14 ->
                 MyNetwork.AMQP.Internal.$wupdateLastReceived ww14 w1 } }) -}
a2be679af31b96869ffcdc0fb5408e4c
  waitForAllConfirms ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Conc.Sync.STM
         (Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLS(S)S(S)S(S)LLLLLL),1*U(A,A,A,A,A,A,1*U(U),1*U(U),1*U(U),A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.waitForAllConfirms1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R Sym (GHC.Conc.Sync.N:STM[0]
                               <(Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet)>_R)) -}
9bfbd0c2454a6c683ab4bd2f612a3f88
  waitForAllConfirms1 ::
    MyNetwork.AMQP.Internal.Channel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.IntSet.Internal.IntSet, Data.IntSet.Internal.IntSet) #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLS(S)S(S)S(S)LLLLLL),1*U(A,A,A,A,A,A,1*U(U),1*U(U),1*U(U),A,A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww7 of ww16 { GHC.Conc.Sync.TVar ww17 ->
                 case ww8 of ww18 { GHC.Conc.Sync.TVar ww19 ->
                 case ww9 of ww20 { GHC.Conc.Sync.TVar ww21 ->
                 MyNetwork.AMQP.Internal.$wwaitForAllConfirms
                   ww17
                   ww19
                   ww21
                   w1 } } } }) -}
53630906d3c0fb0ec756874c91d4da12
  watchHeartbeats ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.Int
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Types.IO GHC.Conc.Sync.ThreadId
  {- Arity: 4, Strictness: <L,A><L,U(U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.watchHeartbeats1
                  `cast`
                (<MyNetwork.AMQP.Internal.Connection>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Conc.Sync.ThreadId>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Conc.Sync.ThreadId>_R)) -}
29a0e9f3c7fae5f3221b030c3aa25eaf
  watchHeartbeats1 ::
    MyNetwork.AMQP.Internal.Connection
    -> GHC.Types.Int
    -> GHC.Conc.Sync.ThreadId
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
  {- Arity: 4, Strictness: <L,A><L,U(U)><L,A><S,U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: MyNetwork.AMQP.Internal.Connection)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Conc.Sync.ThreadId)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 MyNetwork.AMQP.Internal.$wwatchHeartbeats w1 w3) -}
4f3d2b9c99766b42a762a6f4386fd7fb
  writeAssembly ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.writeAssembly1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Internal.Assembly>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
587f25e54a68d27131f679c73e38b4bd
  writeAssembly' ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S,1*U(U(U(U(U),A,A),A,U(U),U(U),A,A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,1*U(A,1*U(U)),A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.writeAssembly2
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <MyNetwork.AMQP.Internal.Assembly>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
55e35cdb345ccbf077c6c71976df92e2
  writeAssembly1 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U(U(U(U),A,A),A,U(U),U(U),U(U),A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,1*U(A,1*U(U)),U(U),A,A,A,A)><L,1*U><S,U>,
     Unfolding: (\ (chan :: MyNetwork.AMQP.Internal.Channel)
                   (m :: MyNetwork.AMQP.Internal.Assembly)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Control.Exception.catches1
                   @ ()
                   (MyNetwork.AMQP.Internal.writeAssembly2 chan m)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Types.:
                      @ (Control.Exception.Handler ())
                      (Control.Exception.Handler
                         @ ()
                         @ MyNetwork.AMQP.Types.AMQPException
                         MyNetwork.AMQP.Types.$fExceptionAMQPException
                         (\ (ds6 :: MyNetwork.AMQP.Types.AMQPException)
                            (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          MyNetwork.AMQP.Internal.throwMostRelevantAMQPException1
                            @ ()
                            chan
                            eta1)
                           `cast`
                         (<MyNetwork.AMQP.Types.AMQPException>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                      (GHC.Types.:
                         @ (Control.Exception.Handler ())
                         (Control.Exception.Handler
                            @ ()
                            @ GHC.Exception.ErrorCall
                            GHC.Exception.$fExceptionErrorCall
                            (\ (ds6 :: GHC.Exception.ErrorCall)
                               (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             MyNetwork.AMQP.Internal.throwMostRelevantAMQPException1
                               @ ()
                               chan
                               eta1)
                              `cast`
                            (<GHC.Exception.ErrorCall>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                         (GHC.Types.:
                            @ (Control.Exception.Handler ())
                            (Control.Exception.Handler
                               @ ()
                               @ GHC.IO.Exception.IOException
                               GHC.IO.Exception.$fExceptionIOException
                               (\ (ds6 :: GHC.IO.Exception.IOException)
                                  (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                MyNetwork.AMQP.Internal.throwMostRelevantAMQPException1
                                  @ ()
                                  chan
                                  eta1)
                                 `cast`
                               (<GHC.IO.Exception.IOException>_R
                                ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                            (GHC.Types.[] @ (Control.Exception.Handler ())))))
                   eta) -}
f10ffca892e049344324e9c10409bff4
  writeAssembly2 ::
    MyNetwork.AMQP.Internal.Channel
    -> MyNetwork.AMQP.Internal.Assembly
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S,1*U(U(U(U(U),A,A),A,U(U),U(U),A,A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,1*U(A,1*U(U)),A,A,A,A,A)><S,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: MyNetwork.AMQP.Internal.Assembly)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 MyNetwork.AMQP.Internal.$wwriteAssembly' ww1 ww4 ww10 w1 w2 }) -}
6ef13c7377b716357b736b46928d183b
  writeAssembly3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("writeAssembly' :: connMaxFrameSize $ connection chan = "#) -}
796cbb1377736ac30e5beb484c9b2035
  writeAssembly4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("writeAssembly' :: BL.length msg = "#) -}
05db8a64dab8945020f452e6bd9b4e3c
  writeFrame ::
    MyNetwork2.Connection.Types.Connection
    -> MyNetwork.AMQP.Protocol.Frame -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(1*U(U),A,A)><S,1*U(U(U),U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.writeFrame1
                  `cast`
                (<MyNetwork2.Connection.Types.Connection>_R
                 ->_R <MyNetwork.AMQP.Protocol.Frame>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e06ccefa6bec998cfbc5bf43f05e70ce
  writeFrame1 ::
    MyNetwork2.Connection.Types.Connection
    -> MyNetwork.AMQP.Protocol.Frame
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(1*U(U),A,A)><S,1*U(U(U),U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork2.Connection.Types.Connection)
                   (w1 :: MyNetwork.AMQP.Protocol.Frame)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { MyNetwork.AMQP.Protocol.Frame ww1 ww2 ->
                 MyNetwork.AMQP.Internal.$wwriteFrame w ww1 ww2 w2 }) -}
1e3095b8fdd7973c3feb75b0233d235c
  writeFrames ::
    MyNetwork.AMQP.Internal.Channel
    -> [MyNetwork.AMQP.Protocol.FramePayload] -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLL)LLLLLLLLLLLLLL),1*U(1*U(U(U(U),A,A),A,1*U(U),A,A,A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MyNetwork.AMQP.Internal.writeFrames1
                  `cast`
                (<MyNetwork.AMQP.Internal.Channel>_R
                 ->_R <[MyNetwork.AMQP.Protocol.FramePayload]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bf70bdcbe4190f488e95d3b9dc6bc9a9
  writeFrames1 ::
    MyNetwork.AMQP.Internal.Channel
    -> [MyNetwork.AMQP.Protocol.FramePayload]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLL)LLLLLLLLLLLLLL),1*U(1*U(U(U(U),A,A),A,1*U(U),A,A,A,U(U),A,A,A,U(U),A),A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MyNetwork.AMQP.Internal.Channel)
                   (w1 :: [MyNetwork.AMQP.Protocol.FramePayload])
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { MyNetwork.AMQP.Internal.Channel ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww1 of ww16 { MyNetwork.AMQP.Internal.Connection ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ->
                 case ww19 of ww29 { GHC.MVar.MVar ww30 ->
                 MyNetwork.AMQP.Internal.$wwriteFrames
                   ww17
                   ww30
                   ww23
                   ww27
                   ww4
                   w1
                   w2 } } }) -}
instance GHC.Classes.Eq [MyNetwork.AMQP.Internal.DeliveryMode]
  = MyNetwork.AMQP.Internal.$fEqDeliveryMode
instance GHC.Classes.Eq [MyNetwork.AMQP.Internal.Message]
  = MyNetwork.AMQP.Internal.$fEqMessage
instance GHC.Classes.Eq [MyNetwork.AMQP.Internal.PublishError]
  = MyNetwork.AMQP.Internal.$fEqPublishError
instance GHC.Classes.Eq [MyNetwork.AMQP.Internal.ReturnReplyCode]
  = MyNetwork.AMQP.Internal.$fEqReturnReplyCode
instance GHC.Exception.Exception [MyNetwork.AMQP.Internal.ChanThreadKilledException]
  = MyNetwork.AMQP.Internal.$fExceptionChanThreadKilledException
instance GHC.Classes.Ord [MyNetwork.AMQP.Internal.DeliveryMode]
  = MyNetwork.AMQP.Internal.$fOrdDeliveryMode
instance GHC.Classes.Ord [MyNetwork.AMQP.Internal.Message]
  = MyNetwork.AMQP.Internal.$fOrdMessage
instance GHC.Read.Read [MyNetwork.AMQP.Internal.DeliveryMode]
  = MyNetwork.AMQP.Internal.$fReadDeliveryMode
instance GHC.Read.Read [MyNetwork.AMQP.Internal.Message]
  = MyNetwork.AMQP.Internal.$fReadMessage
instance GHC.Read.Read [MyNetwork.AMQP.Internal.PublishError]
  = MyNetwork.AMQP.Internal.$fReadPublishError
instance GHC.Read.Read [MyNetwork.AMQP.Internal.ReturnReplyCode]
  = MyNetwork.AMQP.Internal.$fReadReturnReplyCode
instance GHC.Show.Show [MyNetwork.AMQP.Internal.AckType]
  = MyNetwork.AMQP.Internal.$fShowAckType
instance GHC.Show.Show [MyNetwork.AMQP.Internal.Assembly]
  = MyNetwork.AMQP.Internal.$fShowAssembly
instance GHC.Show.Show [MyNetwork.AMQP.Internal.ChanThreadKilledException]
  = MyNetwork.AMQP.Internal.$fShowChanThreadKilledException
instance GHC.Show.Show [MyNetwork.AMQP.Internal.DeliveryMode]
  = MyNetwork.AMQP.Internal.$fShowDeliveryMode
instance GHC.Show.Show [MyNetwork.AMQP.Internal.Message]
  = MyNetwork.AMQP.Internal.$fShowMessage
instance GHC.Show.Show [MyNetwork.AMQP.Internal.PublishError]
  = MyNetwork.AMQP.Internal.$fShowPublishError
instance GHC.Show.Show [MyNetwork.AMQP.Internal.ReturnReplyCode]
  = MyNetwork.AMQP.Internal.$fShowReturnReplyCode
"SPEC/MyNetwork.AMQP.Internal fromList @ Text _" [orphan] forall @ a
                                                                 ($dOrd :: GHC.Classes.Ord
                                                                             Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = MyNetwork.AMQP.Internal.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

